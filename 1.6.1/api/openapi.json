{
  "openapi": "3.0.2",
  "info": {
    "title": "fidesctl",
    "version": "0.1.0"
  },
  "paths": {
    "/data_category/": {
      "get": {
        "tags": [
          "DataCategory"
        ],
        "summary": "List",
        "description": "Get a list of all of the resources of this type.",
        "operationId": "List_data_category__get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_category"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Data Category  Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataCategory"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "DataCategory"
        ],
        "summary": "Update",
        "description": "Update a resource by its fides_key.",
        "operationId": "update_data_category__put",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_category"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataCategory"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataCategory"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "DataCategory"
        ],
        "summary": "Create",
        "description": "Create a resource.",
        "operationId": "create_data_category__post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_category"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataCategory"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataCategory"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/data_category/{fides_key}": {
      "get": {
        "tags": [
          "DataCategory"
        ],
        "summary": "Get",
        "description": "Get a resource by its fides_key.",
        "operationId": "get_data_category__fides_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_category"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataCategory"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DataCategory"
        ],
        "summary": "Delete",
        "description": "Delete a resource by its fides_key.",
        "operationId": "delete_data_category__fides_key__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_category"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/data_category/upsert": {
      "post": {
        "tags": [
          "DataCategory"
        ],
        "summary": "Upsert",
        "description": "For any resource in `resources` that already exists in the database,\nupdate the resource by its `fides_key`. Otherwise, create a new resource.\n\nResponds with a `201 Created` if even a single resource in `resources`\ndid not previously exist. Otherwise, responds with a `200 OK`.",
        "operationId": "upsert_data_category_upsert_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_category"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Resources",
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "message": "Upserted 3 data_category(s)",
                  "inserted": 0,
                  "updated": 3
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "example": {
                  "message": "Upserted 3 data_category(s)",
                  "inserted": 1,
                  "updated": 2
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/data_qualifier/": {
      "get": {
        "tags": [
          "DataQualifier"
        ],
        "summary": "List",
        "description": "Get a list of all of the resources of this type.",
        "operationId": "List_data_qualifier__get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_qualifier"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Data Qualifier  Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataQualifier"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "DataQualifier"
        ],
        "summary": "Update",
        "description": "Update a resource by its fides_key.",
        "operationId": "update_data_qualifier__put",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_qualifier"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataQualifier"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataQualifier"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "DataQualifier"
        ],
        "summary": "Create",
        "description": "Create a resource.",
        "operationId": "create_data_qualifier__post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_qualifier"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataQualifier"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataQualifier"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/data_qualifier/{fides_key}": {
      "get": {
        "tags": [
          "DataQualifier"
        ],
        "summary": "Get",
        "description": "Get a resource by its fides_key.",
        "operationId": "get_data_qualifier__fides_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_qualifier"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataQualifier"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DataQualifier"
        ],
        "summary": "Delete",
        "description": "Delete a resource by its fides_key.",
        "operationId": "delete_data_qualifier__fides_key__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_qualifier"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/data_qualifier/upsert": {
      "post": {
        "tags": [
          "DataQualifier"
        ],
        "summary": "Upsert",
        "description": "For any resource in `resources` that already exists in the database,\nupdate the resource by its `fides_key`. Otherwise, create a new resource.\n\nResponds with a `201 Created` if even a single resource in `resources`\ndid not previously exist. Otherwise, responds with a `200 OK`.",
        "operationId": "upsert_data_qualifier_upsert_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_qualifier"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Resources",
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "message": "Upserted 3 data_qualifier(s)",
                  "inserted": 0,
                  "updated": 3
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "example": {
                  "message": "Upserted 3 data_qualifier(s)",
                  "inserted": 1,
                  "updated": 2
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/data_subject/": {
      "get": {
        "tags": [
          "DataSubject"
        ],
        "summary": "List",
        "description": "Get a list of all of the resources of this type.",
        "operationId": "List_data_subject__get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_subject"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Data Subject  Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataSubject"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "DataSubject"
        ],
        "summary": "Update",
        "description": "Update a resource by its fides_key.",
        "operationId": "update_data_subject__put",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_subject"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSubject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSubject"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "DataSubject"
        ],
        "summary": "Create",
        "description": "Create a resource.",
        "operationId": "create_data_subject__post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_subject"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSubject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSubject"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/data_subject/{fides_key}": {
      "get": {
        "tags": [
          "DataSubject"
        ],
        "summary": "Get",
        "description": "Get a resource by its fides_key.",
        "operationId": "get_data_subject__fides_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_subject"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSubject"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DataSubject"
        ],
        "summary": "Delete",
        "description": "Delete a resource by its fides_key.",
        "operationId": "delete_data_subject__fides_key__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_subject"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/data_subject/upsert": {
      "post": {
        "tags": [
          "DataSubject"
        ],
        "summary": "Upsert",
        "description": "For any resource in `resources` that already exists in the database,\nupdate the resource by its `fides_key`. Otherwise, create a new resource.\n\nResponds with a `201 Created` if even a single resource in `resources`\ndid not previously exist. Otherwise, responds with a `200 OK`.",
        "operationId": "upsert_data_subject_upsert_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_subject"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Resources",
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "message": "Upserted 3 data_subject(s)",
                  "inserted": 0,
                  "updated": 3
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "example": {
                  "message": "Upserted 3 data_subject(s)",
                  "inserted": 1,
                  "updated": 2
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/data_use/": {
      "get": {
        "tags": [
          "DataUse"
        ],
        "summary": "List",
        "description": "Get a list of all of the resources of this type.",
        "operationId": "List_data_use__get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_use"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Data Use  Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataUse"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "DataUse"
        ],
        "summary": "Update",
        "description": "Update a resource by its fides_key.",
        "operationId": "update_data_use__put",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_use"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataUse"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataUse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "DataUse"
        ],
        "summary": "Create",
        "description": "Create a resource.",
        "operationId": "create_data_use__post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_use"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataUse"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataUse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/data_use/{fides_key}": {
      "get": {
        "tags": [
          "DataUse"
        ],
        "summary": "Get",
        "description": "Get a resource by its fides_key.",
        "operationId": "get_data_use__fides_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_use"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataUse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DataUse"
        ],
        "summary": "Delete",
        "description": "Delete a resource by its fides_key.",
        "operationId": "delete_data_use__fides_key__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_use"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/data_use/upsert": {
      "post": {
        "tags": [
          "DataUse"
        ],
        "summary": "Upsert",
        "description": "For any resource in `resources` that already exists in the database,\nupdate the resource by its `fides_key`. Otherwise, create a new resource.\n\nResponds with a `201 Created` if even a single resource in `resources`\ndid not previously exist. Otherwise, responds with a `200 OK`.",
        "operationId": "upsert_data_use_upsert_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_use"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Resources",
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "message": "Upserted 3 data_use(s)",
                  "inserted": 0,
                  "updated": 3
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "example": {
                  "message": "Upserted 3 data_use(s)",
                  "inserted": 1,
                  "updated": 2
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/dataset/": {
      "get": {
        "tags": [
          "Dataset"
        ],
        "summary": "List",
        "description": "Get a list of all of the resources of this type.",
        "operationId": "List_dataset__get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "dataset"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Dataset  Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dataset"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Dataset"
        ],
        "summary": "Update",
        "description": "Update a resource by its fides_key.",
        "operationId": "update_dataset__put",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "dataset"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Dataset"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dataset"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Dataset"
        ],
        "summary": "Create",
        "description": "Create a resource.",
        "operationId": "create_dataset__post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "dataset"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Dataset"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dataset"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/dataset/{fides_key}": {
      "get": {
        "tags": [
          "Dataset"
        ],
        "summary": "Get",
        "description": "Get a resource by its fides_key.",
        "operationId": "get_dataset__fides_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "dataset"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dataset"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Dataset"
        ],
        "summary": "Delete",
        "description": "Delete a resource by its fides_key.",
        "operationId": "delete_dataset__fides_key__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "dataset"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/dataset/upsert": {
      "post": {
        "tags": [
          "Dataset"
        ],
        "summary": "Upsert",
        "description": "For any resource in `resources` that already exists in the database,\nupdate the resource by its `fides_key`. Otherwise, create a new resource.\n\nResponds with a `201 Created` if even a single resource in `resources`\ndid not previously exist. Otherwise, responds with a `200 OK`.",
        "operationId": "upsert_dataset_upsert_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "dataset"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Resources",
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "message": "Upserted 3 dataset(s)",
                  "inserted": 0,
                  "updated": 3
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "example": {
                  "message": "Upserted 3 dataset(s)",
                  "inserted": 1,
                  "updated": 2
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/organization/": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List",
        "description": "Get a list of all of the resources of this type.",
        "operationId": "List_organization__get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "organization"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Organization  Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Organization"
        ],
        "summary": "Update",
        "description": "Update a resource by its fides_key.",
        "operationId": "update_organization__put",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "organization"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Organization"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Create",
        "description": "Create a resource.",
        "operationId": "create_organization__post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "organization"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Organization"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/organization/{fides_key}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get",
        "description": "Get a resource by its fides_key.",
        "operationId": "get_organization__fides_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "organization"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "Delete",
        "description": "Delete a resource by its fides_key.",
        "operationId": "delete_organization__fides_key__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "organization"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/organization/upsert": {
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Upsert",
        "description": "For any resource in `resources` that already exists in the database,\nupdate the resource by its `fides_key`. Otherwise, create a new resource.\n\nResponds with a `201 Created` if even a single resource in `resources`\ndid not previously exist. Otherwise, responds with a `200 OK`.",
        "operationId": "upsert_organization_upsert_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "organization"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Resources",
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "message": "Upserted 3 organization(s)",
                  "inserted": 0,
                  "updated": 3
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "example": {
                  "message": "Upserted 3 organization(s)",
                  "inserted": 1,
                  "updated": 2
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/policy/": {
      "get": {
        "tags": [
          "Policy"
        ],
        "summary": "List",
        "description": "Get a list of all of the resources of this type.",
        "operationId": "List_policy__get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "policy"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Policy  Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Policy"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Policy"
        ],
        "summary": "Update",
        "description": "Update a resource by its fides_key.",
        "operationId": "update_policy__put",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "policy"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Policy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Policy"
        ],
        "summary": "Create",
        "description": "Create a resource.",
        "operationId": "create_policy__post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "policy"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Policy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/policy/{fides_key}": {
      "get": {
        "tags": [
          "Policy"
        ],
        "summary": "Get",
        "description": "Get a resource by its fides_key.",
        "operationId": "get_policy__fides_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "policy"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Policy"
        ],
        "summary": "Delete",
        "description": "Delete a resource by its fides_key.",
        "operationId": "delete_policy__fides_key__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "policy"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/policy/upsert": {
      "post": {
        "tags": [
          "Policy"
        ],
        "summary": "Upsert",
        "description": "For any resource in `resources` that already exists in the database,\nupdate the resource by its `fides_key`. Otherwise, create a new resource.\n\nResponds with a `201 Created` if even a single resource in `resources`\ndid not previously exist. Otherwise, responds with a `200 OK`.",
        "operationId": "upsert_policy_upsert_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "policy"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Resources",
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "message": "Upserted 3 policy(s)",
                  "inserted": 0,
                  "updated": 3
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "example": {
                  "message": "Upserted 3 policy(s)",
                  "inserted": 1,
                  "updated": 2
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/registry/": {
      "get": {
        "tags": [
          "Registry"
        ],
        "summary": "List",
        "description": "Get a list of all of the resources of this type.",
        "operationId": "List_registry__get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "registry"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Registry  Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Registry"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Registry"
        ],
        "summary": "Update",
        "description": "Update a resource by its fides_key.",
        "operationId": "update_registry__put",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "registry"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Registry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registry"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Registry"
        ],
        "summary": "Create",
        "description": "Create a resource.",
        "operationId": "create_registry__post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "registry"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Registry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registry"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/registry/{fides_key}": {
      "get": {
        "tags": [
          "Registry"
        ],
        "summary": "Get",
        "description": "Get a resource by its fides_key.",
        "operationId": "get_registry__fides_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "registry"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registry"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Registry"
        ],
        "summary": "Delete",
        "description": "Delete a resource by its fides_key.",
        "operationId": "delete_registry__fides_key__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "registry"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/registry/upsert": {
      "post": {
        "tags": [
          "Registry"
        ],
        "summary": "Upsert",
        "description": "For any resource in `resources` that already exists in the database,\nupdate the resource by its `fides_key`. Otherwise, create a new resource.\n\nResponds with a `201 Created` if even a single resource in `resources`\ndid not previously exist. Otherwise, responds with a `200 OK`.",
        "operationId": "upsert_registry_upsert_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "registry"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Resources",
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "message": "Upserted 3 registry(s)",
                  "inserted": 0,
                  "updated": 3
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "example": {
                  "message": "Upserted 3 registry(s)",
                  "inserted": 1,
                  "updated": 2
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/system/": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "List",
        "description": "Get a list of all of the resources of this type.",
        "operationId": "List_system__get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "system"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List System  Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/System"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "System"
        ],
        "summary": "Update",
        "description": "Update a resource by its fides_key.",
        "operationId": "update_system__put",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "system"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/System"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/System"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "System"
        ],
        "summary": "Create",
        "description": "Create a resource.",
        "operationId": "create_system__post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "system"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/System"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/System"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/system/{fides_key}": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get",
        "description": "Get a resource by its fides_key.",
        "operationId": "get_system__fides_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "system"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/System"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "System"
        ],
        "summary": "Delete",
        "description": "Delete a resource by its fides_key.",
        "operationId": "delete_system__fides_key__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "system"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/system/upsert": {
      "post": {
        "tags": [
          "System"
        ],
        "summary": "Upsert",
        "description": "For any resource in `resources` that already exists in the database,\nupdate the resource by its `fides_key`. Otherwise, create a new resource.\n\nResponds with a `201 Created` if even a single resource in `resources`\ndid not previously exist. Otherwise, responds with a `200 OK`.",
        "operationId": "upsert_system_upsert_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "system"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Resources",
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "message": "Upserted 3 system(s)",
                  "inserted": 0,
                  "updated": 3
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "example": {
                  "message": "Upserted 3 system(s)",
                  "inserted": 1,
                  "updated": 2
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/evaluation/": {
      "get": {
        "tags": [
          "Evaluation"
        ],
        "summary": "List",
        "description": "Get a list of all of the resources of this type.",
        "operationId": "List_evaluation__get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "evaluation"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Evaluation  Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Evaluation"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Evaluation"
        ],
        "summary": "Update",
        "description": "Update a resource by its fides_key.",
        "operationId": "update_evaluation__put",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "evaluation"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Evaluation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evaluation"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Evaluation"
        ],
        "summary": "Create",
        "description": "Create a resource.",
        "operationId": "create_evaluation__post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "evaluation"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Evaluation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evaluation"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/evaluation/{fides_key}": {
      "get": {
        "tags": [
          "Evaluation"
        ],
        "summary": "Get",
        "description": "Get a resource by its fides_key.",
        "operationId": "get_evaluation__fides_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "evaluation"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evaluation"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Evaluation"
        ],
        "summary": "Delete",
        "description": "Delete a resource by its fides_key.",
        "operationId": "delete_evaluation__fides_key__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "evaluation"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/evaluation/upsert": {
      "post": {
        "tags": [
          "Evaluation"
        ],
        "summary": "Upsert",
        "description": "For any resource in `resources` that already exists in the database,\nupdate the resource by its `fides_key`. Otherwise, create a new resource.\n\nResponds with a `201 Created` if even a single resource in `resources`\ndid not previously exist. Otherwise, responds with a `200 OK`.",
        "operationId": "upsert_evaluation_upsert_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "evaluation"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Resources",
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "message": "Upserted 3 evaluation(s)",
                  "inserted": 0,
                  "updated": 3
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "example": {
                  "message": "Upserted 3 evaluation(s)",
                  "inserted": 1,
                  "updated": 2
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/data_category/visualize/{figure_type}": {
      "get": {
        "tags": [
          "Visualize",
          "DataCategory"
        ],
        "summary": "Get Chart",
        "description": "    Visualize the hierarchy of a supported resource type.\nArgs:\n    figure_type: type of figure, by name, to generate\n    resource_type: hierarchy source. one of [\"data_category\", \"data_qualifier\", \"data_use\"]\nReturns:\n    Html for the requested figure. Response with status code 400 when invalid figure type is provided",
        "operationId": "get_chart_data_category_visualize__figure_type__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/FigureTypeEnum"
            },
            "name": "figure_type",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_category"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/data_qualifier/visualize/{figure_type}": {
      "get": {
        "tags": [
          "Visualize",
          "DataQualifier"
        ],
        "summary": "Get Chart",
        "description": "    Visualize the hierarchy of a supported resource type.\nArgs:\n    figure_type: type of figure, by name, to generate\n    resource_type: hierarchy source. one of [\"data_category\", \"data_qualifier\", \"data_use\"]\nReturns:\n    Html for the requested figure. Response with status code 400 when invalid figure type is provided",
        "operationId": "get_chart_data_qualifier_visualize__figure_type__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/FigureTypeEnum"
            },
            "name": "figure_type",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_qualifier"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/data_use/visualize/{figure_type}": {
      "get": {
        "tags": [
          "Visualize",
          "DataUse"
        ],
        "summary": "Get Chart",
        "description": "    Visualize the hierarchy of a supported resource type.\nArgs:\n    figure_type: type of figure, by name, to generate\n    resource_type: hierarchy source. one of [\"data_category\", \"data_qualifier\", \"data_use\"]\nReturns:\n    Html for the requested figure. Response with status code 400 when invalid figure type is provided",
        "operationId": "get_chart_data_use_visualize__figure_type__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/FigureTypeEnum"
            },
            "name": "figure_type",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_use"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/view/evaluations": {
      "get": {
        "tags": [
          "View"
        ],
        "summary": "Evaluation View",
        "description": "Returns an html document with a list of evaluations",
        "operationId": "evaluation_view_view_evaluations_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Health",
        "description": "Confirm that the API is running and healthy.",
        "operationId": "health_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Health Health Get",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "example": {
                  "status": "healthy",
                  "version": "1.0.0"
                }
              }
            }
          }
        }
      }
    },
    "/admin/db/{action}": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Db Action",
        "description": "Initiate one of the enumerated DBActions.",
        "operationId": "db_action_admin_db__action__post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DBActions"
            },
            "name": "action",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ContactDetails": {
        "title": "ContactDetails",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "An individual name used as part of publishing contact information. Encrypted at rest on the server.",
            "default": ""
          },
          "address": {
            "title": "Address",
            "type": "string",
            "description": "An individual address used as part of publishing contact information. Encrypted at rest on the server.",
            "default": ""
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "An individual email used as part of publishing contact information. Encrypted at rest on the server.",
            "default": ""
          },
          "phone": {
            "title": "Phone",
            "type": "string",
            "description": "An individual phone number used as part of publishing contact information. Encrypted at rest on the server.",
            "default": ""
          }
        },
        "description": "The contact details information model.\n\nUsed to capture contact information for controllers, used\nas part of exporting a data map / ROPA.\n\nThis model is nested under an Organization and\npotentially under a system/dataset."
      },
      "DBActions": {
        "title": "DBActions",
        "enum": [
          "init",
          "reset"
        ],
        "type": "string",
        "description": "The available path parameters for the `/admin/db/{action}` endpoint."
      },
      "DataCategory": {
        "title": "DataCategory",
        "required": [
          "fides_key"
        ],
        "type": "object",
        "properties": {
          "fides_key": {
            "title": "Fides Key",
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "A unique key used to identify this resource."
          },
          "organization_fides_key": {
            "title": "Organization Fides Key",
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "Defines the Organization that this resource belongs to.",
            "default": "default_organization"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Human-Readable name for this resource."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A detailed description of what this resource is."
          },
          "parent_key": {
            "title": "Parent Key",
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string"
          }
        },
        "description": "The DataCategory resource model."
      },
      "DataProtectionImpactAssessment": {
        "title": "DataProtectionImpactAssessment",
        "type": "object",
        "properties": {
          "is_required": {
            "title": "Is Required",
            "type": "boolean",
            "description": "A boolean value determining if a data protection impact assessment is required. Defaults to False.",
            "default": false
          },
          "progress": {
            "title": "Progress",
            "type": "string",
            "description": "The optional status of a Data Protection Impact Assessment. Returned on an exported data map or RoPA."
          },
          "link": {
            "title": "Link",
            "maxLength": 65536,
            "minLength": 1,
            "type": "string",
            "description": "The optional link to the Data Protection Impact Assessment. Returned on an exported data map or RoPA.",
            "format": "uri"
          }
        },
        "description": "The DataProtectionImpactAssessment (DPIA) resource model.\n\nContains information in regard to the data protection\nimpact assessment exported on a data map or Record of\nProcessing Activities (RoPA).\n\nA legal requirement under GDPR for any project that\nintroduces a high risk to personal information."
      },
      "DataQualifier": {
        "title": "DataQualifier",
        "required": [
          "fides_key"
        ],
        "type": "object",
        "properties": {
          "fides_key": {
            "title": "Fides Key",
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "A unique key used to identify this resource."
          },
          "organization_fides_key": {
            "title": "Organization Fides Key",
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "Defines the Organization that this resource belongs to.",
            "default": "default_organization"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Human-Readable name for this resource."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A detailed description of what this resource is."
          },
          "parent_key": {
            "title": "Parent Key",
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string"
          }
        },
        "description": "The DataQualifier resource model."
      },
      "DataResponsibilityTitle": {
        "title": "DataResponsibilityTitle",
        "enum": [
          "Controller",
          "Processor",
          "Sub-Processor"
        ],
        "type": "string",
        "description": "The model defining the responsibility or role over\nthe system that processes personal data.\n\nUsed to identify whether the organization is a\nController, Processor, or Sub-Processor of the data"
      },
      "DataSubject": {
        "title": "DataSubject",
        "required": [
          "fides_key"
        ],
        "type": "object",
        "properties": {
          "fides_key": {
            "title": "Fides Key",
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "A unique key used to identify this resource."
          },
          "organization_fides_key": {
            "title": "Organization Fides Key",
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "Defines the Organization that this resource belongs to.",
            "default": "default_organization"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Human-Readable name for this resource."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A detailed description of what this resource is."
          },
          "rights": {
            "title": "Rights",
            "allOf": [
              {
                "$ref": "#/components/schemas/DataSubjectRights"
              }
            ],
            "description": "\n    The DataSubjectRights resource model.\n\n    Includes a strategy and optionally a\n    list of data subject rights to apply\n    via the set strategy.\n    "
          },
          "automated_decisions_or_profiling": {
            "title": "Automated Decisions Or Profiling",
            "type": "boolean",
            "description": "A boolean value to annotate whether or not automated decisions/profiling exists for the data subject."
          }
        },
        "description": "The DataSubject resource model."
      },
      "DataSubjectRights": {
        "title": "DataSubjectRights",
        "required": [
          "strategy"
        ],
        "type": "object",
        "properties": {
          "strategy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IncludeExcludeEnum"
              }
            ],
            "description": "Defines the strategy used when mapping data rights to a data subject."
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSubjectRightsEnum"
            },
            "description": "A list of valid data subject rights to be used when applying data rights to a data subject via a strategy."
          }
        },
        "description": "The DataSubjectRights resource model.\n\nIncludes a strategy and optionally a\nlist of data subject rights to apply\nvia the set strategy."
      },
      "DataSubjectRightsEnum": {
        "title": "DataSubjectRightsEnum",
        "enum": [
          "Informed",
          "Access",
          "Rectification",
          "Erasure",
          "Portability",
          "Restrict Processing",
          "Withdraw Consent",
          "Object",
          "Object to Automated Processing"
        ],
        "type": "string",
        "description": "The model for data subject rights over\npersonal data.\n\nBased upon chapter 3 of the GDPR"
      },
      "DataUse": {
        "title": "DataUse",
        "required": [
          "fides_key"
        ],
        "type": "object",
        "properties": {
          "fides_key": {
            "title": "Fides Key",
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "A unique key used to identify this resource."
          },
          "organization_fides_key": {
            "title": "Organization Fides Key",
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "Defines the Organization that this resource belongs to.",
            "default": "default_organization"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Human-Readable name for this resource."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A detailed description of what this resource is."
          },
          "parent_key": {
            "title": "Parent Key",
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string"
          },
          "legal_basis": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LegalBasisEnum"
              }
            ],
            "description": "The legal basis category of which the data use falls under. This field is used as part of the creation of an exportable data map."
          },
          "special_category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SpecialCategoriesEnum"
              }
            ],
            "description": "The special category for processing of which the data use falls under. This field is used as part of the creation of an exportable data map."
          },
          "recipients": {
            "title": "Recipients",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of recipients when sharing personal data outside of your organization."
          },
          "legitimate_interest": {
            "title": "Legitimate Interest",
            "type": "boolean",
            "description": "A boolean representation of if the legal basis used is `Legitimate Interest`. Validated at run time and looks for a `legitimate_interest_impact_assessment` to exist if true.",
            "default": false
          },
          "legitimate_interest_impact_assessment": {
            "title": "Legitimate Interest Impact Assessment",
            "maxLength": 65536,
            "minLength": 1,
            "type": "string",
            "description": "A url pointing to the legitimate interest impact assessment. Required if the legal bases used is legitimate interest.",
            "format": "uri"
          }
        },
        "description": "The DataUse resource model."
      },
      "Dataset": {
        "title": "Dataset",
        "required": [
          "fides_key",
          "collections"
        ],
        "type": "object",
        "properties": {
          "fides_key": {
            "title": "Fides Key",
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "A unique key used to identify this resource."
          },
          "organization_fides_key": {
            "title": "Organization Fides Key",
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "Defines the Organization that this resource belongs to.",
            "default": "default_organization"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Human-Readable name for this resource."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A detailed description of what this resource is."
          },
          "meta": {
            "title": "Meta",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "An optional object that provides additional information about the Dataset. You can structure the object however you like. It can be a simple set of `key: value` properties or a deeply nested hierarchy of objects. How you use the object is up to you: Fides ignores it."
          },
          "data_categories": {
            "title": "Data Categories",
            "type": "array",
            "items": {
              "pattern": "^[a-zA-Z0-9_.-]+$",
              "type": "string"
            },
            "description": "Array of Data Category resources identified by `fides_key`, that apply to all collections in the Dataset."
          },
          "data_qualifier": {
            "title": "Data Qualifier",
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "Array of Data Qualifier resources identified by `fides_key`, that apply to all collections in the Dataset.",
            "default": "aggregated.anonymized.unlinked_pseudonymized.pseudonymized.identified"
          },
          "fidesctl_meta": {
            "title": "Fidesctl Meta",
            "allOf": [
              {
                "$ref": "#/components/schemas/DatasetMetadata"
              }
            ],
            "description": "\n    The DatasetMetadata resource model.\n\n    Object used to hold application specific metadata for a dataset\n    "
          },
          "joint_controller": {
            "title": "Joint Controller",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactDetails"
              }
            ],
            "description": "\n    The contact details information model.\n\n    Used to capture contact information for controllers, used\n    as part of exporting a data map / ROPA.\n\n    This model is nested under an Organization and\n    potentially under a system/dataset.\n    "
          },
          "retention": {
            "title": "Retention",
            "type": "string",
            "description": "An optional string to describe the retention policy for a dataset. This field can also be applied more granularly at either the Collection or field level of a Dataset.",
            "default": "No retention or erasure policy"
          },
          "third_country_transfers": {
            "title": "Third Country Transfers",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An optional array to identify any third countries where data is transited to. For consistency purposes, these fields are required to follow the Alpha-3 code set in [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3)."
          },
          "collections": {
            "title": "Collections",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatasetCollection"
            },
            "description": "An array of objects that describe the Dataset's collections."
          }
        },
        "description": "The Dataset resource model."
      },
      "DatasetCollection": {
        "title": "DatasetCollection",
        "required": [
          "name",
          "fields"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Human-Readable name for this resource."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A detailed description of what this resource is."
          },
          "data_categories": {
            "title": "Data Categories",
            "type": "array",
            "items": {
              "pattern": "^[a-zA-Z0-9_.-]+$",
              "type": "string"
            },
            "description": "Array of Data Category resources identified by `fides_key`, that apply to all fields in the collection."
          },
          "data_qualifier": {
            "title": "Data Qualifier",
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "Array of Data Qualifier resources identified by `fides_key`, that apply to all fields in the collection.",
            "default": "aggregated.anonymized.unlinked_pseudonymized.pseudonymized.identified"
          },
          "retention": {
            "title": "Retention",
            "type": "string",
            "description": "An optional string to describe the retention policy for a Dataset collection. This field can also be applied more granularly at the field level of a Dataset."
          },
          "fields": {
            "title": "Fields",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatasetField"
            },
            "description": "An array of objects that describe the collection's fields."
          }
        },
        "description": "The DatasetCollection resource model.\n\nThis resource is nested witin a Dataset."
      },
      "DatasetField": {
        "title": "DatasetField",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Human-Readable name for this resource."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A detailed description of what this resource is."
          },
          "data_categories": {
            "title": "Data Categories",
            "type": "array",
            "items": {
              "pattern": "^[a-zA-Z0-9_.-]+$",
              "type": "string"
            },
            "description": "Arrays of Data Categories, identified by `fides_key`, that applies to this field."
          },
          "data_qualifier": {
            "title": "Data Qualifier",
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "A Data Qualifier that applies to this field. Note that this field holds a single value, therefore, the property name is singular.",
            "default": "aggregated.anonymized.unlinked_pseudonymized.pseudonymized.identified"
          },
          "retention": {
            "title": "Retention",
            "type": "string",
            "description": "An optional string to describe the retention policy for a dataset. This field can also be applied more granularly at either the Collection or field level of a Dataset."
          },
          "fields": {
            "title": "Fields",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatasetField"
            },
            "description": "An optional array of objects that describe hierarchical/nested fields (typically found in NoSQL databases)."
          }
        },
        "description": "The DatasetField resource model.\n\nThis resource is nested within a DatasetCollection."
      },
      "DatasetMetadata": {
        "title": "DatasetMetadata",
        "type": "object",
        "properties": {
          "resource_id": {
            "title": "Resource Id",
            "type": "string"
          }
        },
        "description": "The DatasetMetadata resource model.\n\nObject used to hold application specific metadata for a dataset"
      },
      "Evaluation": {
        "title": "Evaluation",
        "required": [
          "fides_key",
          "status"
        ],
        "type": "object",
        "properties": {
          "fides_key": {
            "title": "Fides Key",
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "A uuid generated for each unique evaluation."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "description": "The model for possible evaluation results."
          },
          "violations": {
            "title": "Violations",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Violation"
            },
            "description": "The model for violations within an evaluation.",
            "default": []
          },
          "message": {
            "title": "Message",
            "type": "string",
            "description": "A human-readable string response for the evaluation.",
            "default": ""
          }
        },
        "description": "The Evaluation resource model.\n\nThis resource is created after an evaluation is executed."
      },
      "FigureTypeEnum": {
        "title": "FigureTypeEnum",
        "enum": [
          "graphs",
          "text"
        ],
        "type": "string",
        "description": "Figure Type Enum to capture the discrete possible values\nfor a valid figure type to be visualized"
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "IncludeExcludeEnum": {
        "title": "IncludeExcludeEnum",
        "enum": [
          "ALL",
          "EXCLUDE",
          "INCLUDE",
          "NONE"
        ],
        "type": "string",
        "description": "Determine whether or not defined rights are\nbeing included or excluded."
      },
      "LegalBasisEnum": {
        "title": "LegalBasisEnum",
        "enum": [
          "Consent",
          "Contract",
          "Legal Obligation",
          "Vital Interest",
          "Public Interest",
          "Legitimate Interests"
        ],
        "type": "string",
        "description": "The model for allowable legal basis categories\n\nBased upon article 6 of the GDPR"
      },
      "MatchesEnum": {
        "title": "MatchesEnum",
        "enum": [
          "ANY",
          "ALL",
          "NONE",
          "OTHER"
        ],
        "type": "string",
        "description": "The MatchesEnum resource model.\n\nDetermines how the listed resources are matched in the evaluation logic."
      },
      "Organization": {
        "title": "Organization",
        "required": [
          "fides_key"
        ],
        "type": "object",
        "properties": {
          "fides_key": {
            "title": "Fides Key",
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "A unique key used to identify this resource."
          },
          "organization_fides_key": {
            "title": "Organization Fides Key",
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "Defines the Organization that this resource belongs to.",
            "default": "default_organization"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Human-Readable name for this resource."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A detailed description of what this resource is."
          },
          "organization_parent_key": {
            "title": "Organization Parent Key",
            "type": "null",
            "description": "An inherited field from the FidesModel that is unused with an Organization."
          },
          "controller": {
            "title": "Controller",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactDetails"
              }
            ],
            "description": "\n    The contact details information model.\n\n    Used to capture contact information for controllers, used\n    as part of exporting a data map / ROPA.\n\n    This model is nested under an Organization and\n    potentially under a system/dataset.\n    "
          },
          "data_protection_officer": {
            "title": "Data Protection Officer",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactDetails"
              }
            ],
            "description": "\n    The contact details information model.\n\n    Used to capture contact information for controllers, used\n    as part of exporting a data map / ROPA.\n\n    This model is nested under an Organization and\n    potentially under a system/dataset.\n    "
          },
          "fidesctl_meta": {
            "title": "Fidesctl Meta",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrganizationMetadata"
              }
            ],
            "description": "\n    The OrganizationMetadata resource model.\n\n    Object used to hold application specific metadata for an organization\n    "
          },
          "representative": {
            "title": "Representative",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactDetails"
              }
            ],
            "description": "\n    The contact details information model.\n\n    Used to capture contact information for controllers, used\n    as part of exporting a data map / ROPA.\n\n    This model is nested under an Organization and\n    potentially under a system/dataset.\n    "
          },
          "security_policy": {
            "title": "Security Policy",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "description": "Am optional URL to the organization security policy.",
            "format": "uri"
          }
        },
        "description": "The Organization resource model.\n\nThis resource is used as a way to organize all other resources."
      },
      "OrganizationMetadata": {
        "title": "OrganizationMetadata",
        "type": "object",
        "properties": {
          "resource_filters": {
            "title": "Resource Filters",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceFilter"
            },
            "description": "A list of filters that can be used when generating or scanning systems."
          }
        },
        "description": "The OrganizationMetadata resource model.\n\nObject used to hold application specific metadata for an organization"
      },
      "Policy": {
        "title": "Policy",
        "required": [
          "fides_key",
          "rules"
        ],
        "type": "object",
        "properties": {
          "fides_key": {
            "title": "Fides Key",
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "A unique key used to identify this resource."
          },
          "organization_fides_key": {
            "title": "Organization Fides Key",
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "Defines the Organization that this resource belongs to.",
            "default": "default_organization"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Human-Readable name for this resource."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A detailed description of what this resource is."
          },
          "rules": {
            "title": "Rules",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyRule"
            },
            "description": "\n    The PolicyRule resource model.\n\n    Describes the allowed combination of the various privacy data types.\n    "
          }
        },
        "description": "The Policy resource model.\n\nAn object used to organize a list of PolicyRules."
      },
      "PolicyRule": {
        "title": "PolicyRule",
        "required": [
          "name",
          "data_categories",
          "data_uses",
          "data_subjects"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "data_categories": {
            "title": "Data Categories",
            "allOf": [
              {
                "$ref": "#/components/schemas/PrivacyRule"
              }
            ],
            "description": "\n    The PrivacyRule resource model.\n\n    A list of privacy data types and what match method to use.\n    "
          },
          "data_uses": {
            "title": "Data Uses",
            "allOf": [
              {
                "$ref": "#/components/schemas/PrivacyRule"
              }
            ],
            "description": "\n    The PrivacyRule resource model.\n\n    A list of privacy data types and what match method to use.\n    "
          },
          "data_subjects": {
            "title": "Data Subjects",
            "allOf": [
              {
                "$ref": "#/components/schemas/PrivacyRule"
              }
            ],
            "description": "\n    The PrivacyRule resource model.\n\n    A list of privacy data types and what match method to use.\n    "
          },
          "data_qualifier": {
            "title": "Data Qualifier",
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "The fides key of the data qualifier to be used in a privacy rule.",
            "default": "aggregated.anonymized.unlinked_pseudonymized.pseudonymized.identified"
          }
        },
        "description": "The PolicyRule resource model.\n\nDescribes the allowed combination of the various privacy data types."
      },
      "PrivacyDeclaration": {
        "title": "PrivacyDeclaration",
        "required": [
          "name",
          "data_categories",
          "data_use",
          "data_subjects"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the privacy declaration on the system."
          },
          "data_categories": {
            "title": "Data Categories",
            "type": "array",
            "items": {
              "pattern": "^[a-zA-Z0-9_.-]+$",
              "type": "string"
            },
            "description": "An array of data categories describing a system in a privacy declaration."
          },
          "data_use": {
            "title": "Data Use",
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "The Data Use describing a system in a privacy declaration."
          },
          "data_qualifier": {
            "title": "Data Qualifier",
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "The fides key of the data qualifier describing a system in a privacy declaration.",
            "default": "aggregated.anonymized.unlinked_pseudonymized.pseudonymized.identified"
          },
          "data_subjects": {
            "title": "Data Subjects",
            "type": "array",
            "items": {
              "pattern": "^[a-zA-Z0-9_.-]+$",
              "type": "string"
            },
            "description": "An array of data subjects describing a system in a privacy declaration."
          },
          "dataset_references": {
            "title": "Dataset References",
            "type": "array",
            "items": {
              "pattern": "^[a-zA-Z0-9_.-]+$",
              "type": "string"
            },
            "description": "Referenced Dataset fides keys used by the system."
          }
        },
        "description": "The PrivacyDeclaration resource model.\n\nStates a function of a system, and describes how it relates\nto the privacy data types."
      },
      "PrivacyRule": {
        "title": "PrivacyRule",
        "required": [
          "matches",
          "values"
        ],
        "type": "object",
        "properties": {
          "matches": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MatchesEnum"
              }
            ],
            "description": "\n    The MatchesEnum resource model.\n\n    Determines how the listed resources are matched in the evaluation logic.\n    "
          },
          "values": {
            "title": "Values",
            "type": "array",
            "items": {
              "pattern": "^[a-zA-Z0-9_.-]+$",
              "type": "string"
            },
            "description": "A list of fides keys to be used with the matching type in a privacy rule."
          }
        },
        "description": "The PrivacyRule resource model.\n\nA list of privacy data types and what match method to use."
      },
      "Registry": {
        "title": "Registry",
        "required": [
          "fides_key"
        ],
        "type": "object",
        "properties": {
          "fides_key": {
            "title": "Fides Key",
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "A unique key used to identify this resource."
          },
          "organization_fides_key": {
            "title": "Organization Fides Key",
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "Defines the Organization that this resource belongs to.",
            "default": "default_organization"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Human-Readable name for this resource."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A detailed description of what this resource is."
          }
        },
        "description": "The Registry resource model.\n\nSystems can be assigned to this resource, but it doesn't inherently\npoint to any other resources."
      },
      "ResourceFilter": {
        "title": "ResourceFilter",
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string",
            "description": "The type of filter to be used (i.e. ignore_resource_arn)"
          },
          "value": {
            "title": "Value",
            "type": "string",
            "description": "A string representation of resources to be filtered. Can include wildcards."
          }
        },
        "description": "The ResourceFilter resource model."
      },
      "SpecialCategoriesEnum": {
        "title": "SpecialCategoriesEnum",
        "enum": [
          "Consent",
          "Employment",
          "Vital Interests",
          "Non-profit Bodies",
          "Public by Data Subject",
          "Legal Claims",
          "Substantial Public Interest",
          "Medical",
          "Public Health Interest"
        ],
        "type": "string",
        "description": "The model for processing special categories\nof personal data.\n\nBased upon article 9 of the GDPR"
      },
      "StatusEnum": {
        "title": "StatusEnum",
        "enum": [
          "FAIL",
          "PASS"
        ],
        "type": "string",
        "description": "The model for possible evaluation results."
      },
      "System": {
        "title": "System",
        "required": [
          "fides_key",
          "system_type",
          "privacy_declarations"
        ],
        "type": "object",
        "properties": {
          "fides_key": {
            "title": "Fides Key",
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "A unique key used to identify this resource."
          },
          "organization_fides_key": {
            "title": "Organization Fides Key",
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "Defines the Organization that this resource belongs to.",
            "default": "default_organization"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Human-Readable name for this resource."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A detailed description of what this resource is."
          },
          "registry_id": {
            "title": "Registry Id",
            "type": "integer",
            "description": "The id of the system registry, if used."
          },
          "meta": {
            "title": "Meta",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "An optional property to store any extra information for a system. Not used by fidesctl."
          },
          "fidesctl_meta": {
            "title": "Fidesctl Meta",
            "allOf": [
              {
                "$ref": "#/components/schemas/SystemMetadata"
              }
            ],
            "description": "\n    The SystemMetadata resource model.\n\n    Object used to hold application specific metadata for a system\n    "
          },
          "system_type": {
            "title": "System Type",
            "type": "string",
            "description": "A required value to describe the type of system being modeled, examples include: Service, Application, Third Party, etc."
          },
          "data_responsibility_title": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DataResponsibilityTitle"
              }
            ],
            "description": "\n    The model defining the responsibility or role over\n    the system that processes personal data.\n\n    Used to identify whether the organization is a\n    Controller, Processor, or Sub-Processor of the data\n    ",
            "default": "Controller"
          },
          "privacy_declarations": {
            "title": "Privacy Declarations",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrivacyDeclaration"
            },
            "description": "\n    The PrivacyDeclaration resource model.\n\n    States a function of a system, and describes how it relates\n    to the privacy data types.\n    "
          },
          "system_dependencies": {
            "title": "System Dependencies",
            "type": "array",
            "items": {
              "pattern": "^[a-zA-Z0-9_.-]+$",
              "type": "string"
            },
            "description": "A list of fides keys to model dependencies."
          },
          "joint_controller": {
            "title": "Joint Controller",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactDetails"
              }
            ],
            "description": "\n    The contact details information model.\n\n    Used to capture contact information for controllers, used\n    as part of exporting a data map / ROPA.\n\n    This model is nested under an Organization and\n    potentially under a system/dataset.\n    "
          },
          "third_country_transfers": {
            "title": "Third Country Transfers",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An optional array to identify any third countries where data is transited to. For consistency purposes, these fields are required to follow the Alpha-3 code set in ISO 3166-1."
          },
          "administrating_department": {
            "title": "Administrating Department",
            "type": "string",
            "description": "An optional value to identify the owning department or group of the system within your organization",
            "default": "Not defined"
          },
          "data_protection_impact_assessment": {
            "title": "Data Protection Impact Assessment",
            "allOf": [
              {
                "$ref": "#/components/schemas/DataProtectionImpactAssessment"
              }
            ],
            "description": "\n    The DataProtectionImpactAssessment (DPIA) resource model.\n\n    Contains information in regard to the data protection\n    impact assessment exported on a data map or Record of\n    Processing Activities (RoPA).\n\n    A legal requirement under GDPR for any project that\n    introduces a high risk to personal information.\n    ",
            "default": {
              "is_required": false
            }
          }
        },
        "description": "The System resource model.\n\nDescribes an application and includes a list of PrivacyDeclaration resources."
      },
      "SystemMetadata": {
        "title": "SystemMetadata",
        "type": "object",
        "properties": {
          "resource_id": {
            "title": "Resource Id",
            "type": "string",
            "description": "The external resource id for the system being modeled."
          },
          "endpoint_address": {
            "title": "Endpoint Address",
            "type": "string",
            "description": "The host of the external resource for the system being modeled."
          },
          "endpoint_port": {
            "title": "Endpoint Port",
            "type": "string",
            "description": "The port of the external resource for the system being modeled."
          }
        },
        "description": "The SystemMetadata resource model.\n\nObject used to hold application specific metadata for a system"
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      },
      "Violation": {
        "title": "Violation",
        "required": [
          "violating_attributes",
          "detail"
        ],
        "type": "object",
        "properties": {
          "violating_attributes": {
            "title": "Violating Attributes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ViolationAttributes"
              }
            ],
            "description": "The model for attributes which led to an evaluation violation"
          },
          "detail": {
            "title": "Detail",
            "type": "string",
            "description": "A human-readable string detailing the evaluation violation."
          }
        },
        "description": "The model for violations within an evaluation."
      },
      "ViolationAttributes": {
        "title": "ViolationAttributes",
        "required": [
          "data_categories",
          "data_subjects",
          "data_uses",
          "data_qualifier"
        ],
        "type": "object",
        "properties": {
          "data_categories": {
            "title": "Data Categories",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of data categories which led to an evaluation violation."
          },
          "data_subjects": {
            "title": "Data Subjects",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of data subjects which led to an evaluation violation."
          },
          "data_uses": {
            "title": "Data Uses",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of data uses which led to an evaluation violation."
          },
          "data_qualifier": {
            "title": "Data Qualifier",
            "type": "string",
            "description": "The data qualifier which led to an evaluation violation."
          }
        },
        "description": "The model for attributes which led to an evaluation violation"
      }
    }
  }
}