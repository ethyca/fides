from typing import Dict

import pytest
from pydantic import ValidationError

from fidesops.graph.config import CollectionAddress, FieldAddress
from fidesops.schemas.saas.saas_config import SaaSConfig, SaaSRequest


@pytest.mark.unit_saas
def test_saas_configs(saas_example_config) -> None:
    """Simple test to verify that the example config can be deserialized into SaaSConfigs"""
    SaaSConfig(**saas_example_config)


@pytest.mark.unit_saas
def test_saas_request_without_method():
    with pytest.raises(ValidationError) as exc:
        SaaSRequest(path="/test")
    assert "field required" in str(exc.value)


@pytest.mark.unit_saas
def test_saas_config_to_dataset(saas_example_config: Dict[str, Dict]):
    """Verify dataset generated by SaaS config"""
    # convert endpoint references to dataset references to be able to hook SaaS connectors into the graph traversal
    saas_config = SaaSConfig(**saas_example_config)
    saas_dataset = saas_config.get_graph()

    messages_collection = saas_dataset.collections[0]
    member_collection = saas_dataset.collections[2]
    query_field = member_collection.fields[0]
    conversation_id_field = messages_collection.fields[0]
    conversations_reference = conversation_id_field.references[0]
    field_address, direction = conversations_reference

    assert messages_collection.name == "messages"
    assert conversation_id_field.name == "conversation_id"
    assert field_address == FieldAddress(saas_config.fides_key, "conversations", "id")
    assert direction == "from"

    assert query_field.name == "email"
    assert query_field.identity == "email"

    user_collection = saas_dataset.collections[5]
    assert user_collection.after == {
        CollectionAddress("saas_connector_example", "projects")
    }
    assert user_collection.grouped_inputs == {
        "organization_slug",
        "project_slug",
        "query",
    }

    org_slug_reference, direction = user_collection.fields[0].references[0]
    assert org_slug_reference == FieldAddress(
        saas_config.fides_key, "projects", "organization", "slug"
    )
    assert direction == "from"

    project_slug_reference, direction = user_collection.fields[1].references[0]
    assert project_slug_reference == FieldAddress(
        saas_config.fides_key, "projects", "slug"
    )
    assert direction == "from"


@pytest.mark.unit_saas
def test_saas_config_ignore_errors_param(saas_example_config: Dict[str, Dict]):
    """Verify saas config ignore errors"""
    # convert endpoint references to dataset references to be able to hook SaaS connectors into the graph traversal
    saas_config = SaaSConfig(**saas_example_config)

    collections_endpoint = next(
        end for end in saas_config.endpoints if end.name == "conversations"
    )
    # Specified on collections read endpoint
    assert collections_endpoint.requests["read"].ignore_errors

    member_endpoint = next(end for end in saas_config.endpoints if end.name == "member")
    # Not specified on member read endpoint - defaults to False
    assert not member_endpoint.requests["read"].ignore_errors
