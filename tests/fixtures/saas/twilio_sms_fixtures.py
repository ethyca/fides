import time
from typing import Any, Dict, Generator

import pydash
import pytest
import requests
from requests.auth import HTTPBasicAuth

from tests.ops.integration_tests.saas.connector_runner import (
    ConnectorRunner,
    generate_random_email,
)
from tests.ops.test_helpers.vault_client import get_secrets

secrets = get_secrets("twilio_sms")


@pytest.fixture(scope="session")
def twilio_sms_secrets(saas_config) -> Dict[str, Any]:
    return {
        "domain": pydash.get(saas_config, "twilio_sms.domain") or secrets["domain"],
        "twilio_account_sid": pydash.get(saas_config, "twilio_sms.twilio_account_sid")
        or secrets["twilio_account_sid"],
        "twilio_auth_token": pydash.get(saas_config, "twilio_sms.twilio_auth_token")
        or secrets["twilio_auth_token"],
        "twilio_from_phone": pydash.get(saas_config, "twilio_sms.twilio_from_phone")
        or secrets["twilio_from_phone"],
    }


@pytest.fixture(scope="session")
def twilio_sms_identity_phone_number(saas_config) -> str:
    return (
        pydash.get(saas_config, "twilio_sms.identity_phone_number")
        or secrets["identity_phone_number"]
    )


@pytest.fixture
def twilio_sms_erasure_identity_email() -> str:
    return generate_random_email()


@pytest.fixture
def twilio_sms_erasure_identity_phone_number(twilio_sms_identity_phone_number) -> str:
    # needs to be hardcoded as twilio restricts the use of phone numbers to valid and verified numbers - in this case this number is a virtual number generated by twilio NOTE this phone number could end up invalid depending on the status of our (connectors@ethyca.com) twilio account
    return twilio_sms_identity_phone_number


@pytest.fixture
def twilio_sms_add_data(
    twilio_sms_erasure_identity_phone_number: str,
    twilio_sms_secrets,
) -> Generator:
    """
    This fixture added so that there is at least one entry in the users collection before the access requests executes. It will also ensure that the delete also has something to action.
    """
    twilio_api_account = twilio_sms_secrets["twilio_account_sid"]
    twilio_api_token = twilio_sms_secrets["twilio_auth_token"]
    url = f'https://{twilio_sms_secrets["domain"]}/2010-04-01/Accounts/{twilio_sms_secrets["twilio_account_sid"]}/Messages.json'
    payload = f'From={twilio_sms_secrets["twilio_from_phone"]}&To={twilio_sms_erasure_identity_phone_number}&Body=madeup%20body%20for%20testing%20from%20identityphone'
    auth = HTTPBasicAuth(twilio_api_account, twilio_api_token)
    headers = {"Content-Type": "application/x-www-form-urlencoded"}

    response = requests.post(url, headers=headers, data=payload, auth=auth)
    assert response.ok

    # adding a sleep here as it takes 'some' time for a message to be actionable for erasure
    time.sleep(3)


@pytest.fixture
def twilio_sms_runner(
    db,
    cache,
    twilio_sms_secrets,
) -> ConnectorRunner:
    return ConnectorRunner(
        db,
        cache,
        "twilio_sms",
        twilio_sms_secrets,
    )
