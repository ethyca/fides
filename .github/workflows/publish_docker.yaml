name: Publish Docker Images

on:
  push:
    branches:
      - main
    tags:
      - "*"

env:
  DOCKER_USER: ethycaci
  DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

jobs:
  ParseTags:
    runs-on: ubuntu-latest
    outputs:
      prod_tag: ${{ steps.check-prod-tag.outputs.match }}
      rc_tag: ${{ steps.check-rc-tag.outputs.match }}
      alpha_tag: ${{ steps.check-alpha-tag.outputs.match }}
      beta_tag: ${{ steps.check-beta-tag.outputs.match }}
    steps:
      - name: Check Prod Tag
        id: check-prod-tag
        run: |
          if [[ ${{ github.event.ref }} =~ ^refs/tags/[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "match=true" >> $GITHUB_OUTPUT
          else
            echo "match=false" >> $GITHUB_OUTPUT
          fi

      - name: Check RC Tag
        id: check-rc-tag
        run: |
          if [[ ${{ github.event.ref }} =~ ^refs/tags/[0-9]+\.[0-9]+\.[0-9]+rc[0-9]+$ ]]; then
            echo "match=true" >> $GITHUB_OUTPUT
          else
            echo "match=false" >> $GITHUB_OUTPUT
          fi

      - name: Check alpha Tag
        id: check-alpha-tag
        run: |
          if [[ ${{ github.event.ref }} =~ ^refs/tags/[0-9]+\.[0-9]+\.[0-9]+a[0-9]+$ ]]; then
            echo "match=true" >> $GITHUB_OUTPUT
          else
            echo "match=false" >> $GITHUB_OUTPUT
          fi

      - name: Check beta Tag
        id: check-beta-tag
        run: |
          if [[ ${{ github.event.ref }} =~ ^refs/tags/[0-9]+\.[0-9]+\.[0-9]+b[0-9]+$ ]]; then
            echo "match=true" >> $GITHUB_OUTPUT
          else
            echo "match=false" >> $GITHUB_OUTPUT
          fi

  # the x86 platform execution is split out in order to trigger downstream dependencies
  # as soon as it completes. the ARM execution takes significantly longer and so it
  # runs _after_ we trigger downstream any downstream dependencies.
  PushX86:
    runs-on: ubuntu-latest
    needs: ParseTags
    strategy:
      # This matrix will effectively _try_ to run every permutation in parallel,
      # skipping all of the tasks that don't match. This leaves a ton of "skipped" jobs
      # but is the fastest way to get this working without overhauling the tag check logic.
      matrix:
        application: ["fides", "sample_app", "privacy_center"]
        platform: ["x86"]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # This is required to properly tag images

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USER }}
          password: ${{ env.DOCKER_TOKEN }}

      - name: Install Dev Requirements
        run: pip install -r dev-requirements.txt

      # if neither prod, rc, beta or alpha git tag, then push images with the ":dev" tag
      - name: Push Fides Dev Tag
        if: needs.ParseTags.outputs.prod_tag == 'false' && needs.ParseTags.outputs.rc_tag == 'false' && needs.ParseTags.outputs.beta_tag == 'false' && needs.ParseTags.outputs.alpha_tag == 'false'
        run: nox -s "push(${{ matrix.application }},dev,${{ matrix.platform }})"

      # if a prod git tag, then we run the prod job to publish images tagged with the version number and a constant ":latest" tag
      - name: Push Fides Prod Tags
        if: needs.ParseTags.outputs.prod_tag == 'true'
        run: nox -s "push(${{ matrix.application }},prod,${{ matrix.platform }})"

      # if an RC git tag, then we run the rc job to publish images with an ":rc" tag
      - name: Push Fides RC Tags
        if: needs.ParseTags.outputs.rc_tag == 'true'
        run: nox -s "push(${{ matrix.application }},rc,${{ matrix.platform }})"

      # if an alpha or beta git tag, then we run the prerelease job to publish images with an ":prerelease" tag
      - name: Push Fides prerelease Tags
        if: needs.ParseTags.outputs.alpha_tag == 'true' || needs.ParseTags.outputs.beta_tag == 'true'
        run: nox -s "push(${{ matrix.application }},prerelease,${{ matrix.platform }})"

      # if not a prod git tag, then we run the git-tag job to publish images with a git tag
      # if one exists on the current commit. the job is a no-op if the commit hasn't been tagged
      - name: Push Fides Commit Tags
        if: needs.ParseTags.outputs.prod_tag == 'false'
        run: nox -s "push(${{ matrix.application }},git-tag,${{ matrix.platform }})"

      ### trigger downstream dependencies ###

      # if an RC git tag, notify Fidesinfra to trigger a redeploy of rc env, to pick up our newly published images
      - name: Send Repository Dispatch Event (RC redeploy)
        if: steps.check-rc-tag.outputs.match == 'true'
        uses: peter-evans/repository-dispatch@v2
        with:
          event-type: trigger-fidesinfra-deploy-fides-rc
          repository: ethyca/fidesinfra
          token: ${{ secrets.DISPATCH_ACCESS_TOKEN }}

  PushARM:
    runs-on: ubuntu-latest
    needs: ParseTags
    strategy:
      # This matrix will effectively _try_ to run every permutation in parallel,
      # skipping all of the tasks that don't match. This leaves a ton of "skipped" jobs
      # but is the fastest way to get this working without overhauling the tag check logic.
      matrix:
        application: ["fides", "sample_app", "privacy_center"]
        platform: ["ARM"]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # This is required to properly tag images

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USER }}
          password: ${{ env.DOCKER_TOKEN }}

      - name: Install Dev Requirements
        run: pip install -r dev-requirements.txt

      # if neither prod, rc, beta or alpha git tag, then push images with the ":dev" tag
      - name: Push Fides Dev Tag
        if: needs.ParseTags.outputs.prod_tag == 'false' && needs.ParseTags.outputs.rc_tag == 'false' && needs.ParseTags.outputs.beta_tag == 'false' && needs.ParseTags.outputs.alpha_tag == 'false'
        run: nox -s "push(${{ matrix.application }},dev,${{ matrix.platform }})"

      # if a prod git tag, then we run the prod job to publish images tagged with the version number and a constant ":latest" tag
      - name: Push Fides Prod Tags
        if: needs.ParseTags.outputs.prod_tag == 'true'
        run: nox -s "push(${{ matrix.application }},prod,${{ matrix.platform }})"

      # if an RC git tag, then we run the rc job to publish images with an ":rc" tag
      - name: Push Fides RC Tags
        if: needs.ParseTags.outputs.rc_tag == 'true'
        run: nox -s "push(${{ matrix.application }},rc,${{ matrix.platform }})"

      # if an alpha or beta git tag, then we run the prerelease job to publish images with an ":prerelease" tag
      - name: Push Fides prerelease Tags
        if: needs.ParseTags.outputs.alpha_tag == 'true' || needs.ParseTags.outputs.beta_tag == 'true'
        run: nox -s "push(${{ matrix.application }},prerelease,${{ matrix.platform }})"

      # if not a prod git tag, then we run the git-tag job to publish images with a git tag
      # if one exists on the current commit. the job is a no-op if the commit hasn't been tagged
      - name: Push Fides Commit Tags
        if: needs.ParseTags.outputs.prod_tag == 'false'
        run: nox -s "push(${{ matrix.application }},git-tag,${{ matrix.platform }})"

      ### trigger downstream dependencies ###

      # intentionally left blank -- no downstream dependencies on ARM images!
