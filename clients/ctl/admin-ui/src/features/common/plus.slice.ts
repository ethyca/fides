import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

import { Dataset } from "~/types/api";

interface HealthResponse {
  core_fidesctl_version: string;
  status: "healthy";
}

/**
 * These interfaces will be replaced with the OpenAPI generated models when the backend is ready.
 */
interface ClassificationRequest {
  // Key of the dataset. Should this have "dataset_" prefix?
  fides_key: string;
}
interface ClassificationResponse {
  // Classifications probably have a UID not a key
  id: string;
  // Dataset key
  fides_key: string;
  // Probably will become an enum.
  status: "processing" | "review" | "classified";
  // Assuming it's just the fields generated by classify. What's a good name?
  // (This is blank while in the "processing" status.
  classification?: Pick<Dataset, "data_categories" | "collections">;
}

export const plusApi = createApi({
  reducerPath: "plusApi",
  baseQuery: fetchBaseQuery({
    baseUrl: `${process.env.NEXT_PUBLIC_FIDESCTL_API}/plus`,
  }),
  tagTypes: ["Plus"],
  endpoints: (build) => ({
    getHealth: build.query<HealthResponse, void>({
      query: () => "health",
    }),
    /**
     * Fidescls endpoints:
     */
    createClassification: build.mutation<
      ClassificationResponse,
      ClassificationRequest
    >({
      query: (body) => ({
        // Or is this "classify/"?
        url: `classification/`,
        method: "POST",
        body,
      }),
    }),
  }),
});

export const { useGetHealthQuery, useCreateClassificationMutation } = plusApi;
