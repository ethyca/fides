"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.EncodableFibonacciInteger=void 0;const FibonacciIntegerEncoder_js_1=require("./encoder/FibonacciIntegerEncoder.js"),AbstractEncodableBitStringDataType_js_1=require("./AbstractEncodableBitStringDataType.js"),EncodingError_js_1=require("../error/EncodingError.js"),DecodingError_js_1=require("../error/DecodingError.js"),SubstringError_js_1=require("./SubstringError.js"),index_js_1=require("../util/index.js");class EncodableFibonacciInteger extends AbstractEncodableBitStringDataType_js_1.AbstractEncodableBitStringDataType{constructor(r,e=!0){super(e),this.setValue(r)}encode(){try{return FibonacciIntegerEncoder_js_1.FibonacciIntegerEncoder.encode(this.value)}catch(r){throw new EncodingError_js_1.EncodingError(r)}}decode(r){try{this.value=FibonacciIntegerEncoder_js_1.FibonacciIntegerEncoder.decode(r)}catch(r){throw new DecodingError_js_1.DecodingError(r)}}substring(r,e){try{let n=r.indexOf("11",e);return n>0?index_js_1.StringUtil.substring(r,e,n+2):r}catch(r){throw new SubstringError_js_1.SubstringError(r)}}}exports.EncodableFibonacciInteger=EncodableFibonacciInteger;