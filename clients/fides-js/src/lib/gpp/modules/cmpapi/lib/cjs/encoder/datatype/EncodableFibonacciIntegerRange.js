"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.EncodableFibonacciIntegerRange=void 0;const FibonacciIntegerRangeEncoder_js_1=require("./encoder/FibonacciIntegerRangeEncoder.js"),FixedIntegerEncoder_js_1=require("./encoder/FixedIntegerEncoder.js"),AbstractEncodableBitStringDataType_js_1=require("./AbstractEncodableBitStringDataType.js"),EncodingError_js_1=require("../error/EncodingError.js"),DecodingError_js_1=require("../error/DecodingError.js"),SubstringError_js_1=require("./SubstringError.js"),index_js_1=require("../util/index.js");class EncodableFibonacciIntegerRange extends AbstractEncodableBitStringDataType_js_1.AbstractEncodableBitStringDataType{constructor(e,r=!0){super(r),this.setValue(e)}encode(){try{return FibonacciIntegerRangeEncoder_js_1.FibonacciIntegerRangeEncoder.encode(this.value)}catch(e){throw new EncodingError_js_1.EncodingError(e)}}decode(e){try{this.value=FibonacciIntegerRangeEncoder_js_1.FibonacciIntegerRangeEncoder.decode(e)}catch(e){throw new DecodingError_js_1.DecodingError(e)}}substring(e,r){try{let n=FixedIntegerEncoder_js_1.FixedIntegerEncoder.decode(index_js_1.StringUtil.substring(e,r,r+12)),t=r+12;for(let r=0;r<n;r++)t="1"===e.charAt(t)?e.indexOf("11",e.indexOf("11",t+1)+2)+2:e.indexOf("11",t+1)+2;return index_js_1.StringUtil.substring(e,r,t)}catch(e){throw new SubstringError_js_1.SubstringError(e)}}getValue(){return[...super.getValue()]}setValue(e){super.setValue(Array.from(new Set(e)).sort(((e,r)=>e-r)))}}exports.EncodableFibonacciIntegerRange=EncodableFibonacciIntegerRange;