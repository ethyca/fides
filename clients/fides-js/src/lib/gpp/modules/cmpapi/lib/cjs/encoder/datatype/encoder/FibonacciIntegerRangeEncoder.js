"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.FibonacciIntegerRangeEncoder=void 0;const FibonacciIntegerEncoder_js_1=require("./FibonacciIntegerEncoder.js"),BooleanEncoder_js_1=require("./BooleanEncoder.js"),FixedIntegerEncoder_js_1=require("./FixedIntegerEncoder.js"),DecodingError_js_1=require("../../error/DecodingError.js");class FibonacciIntegerRangeEncoder{static encode(e){e=e.sort(((e,n)=>e-n));let n=[],r=0,o=0;for(;o<e.length;){let r=o;for(;r<e.length-1&&e[r]+1===e[r+1];)r++;n.push(e.slice(o,r+1)),o=r+1}let c=FixedIntegerEncoder_js_1.FixedIntegerEncoder.encode(n.length,12);for(let e=0;e<n.length;e++)if(1==n[e].length){let o=n[e][0]-r;r=n[e][0],c+="0"+FibonacciIntegerEncoder_js_1.FibonacciIntegerEncoder.encode(o)}else{let o=n[e][0]-r;r=n[e][0];let t=n[e][n[e].length-1]-r;r=n[e][n[e].length-1],c+="1"+FibonacciIntegerEncoder_js_1.FibonacciIntegerEncoder.encode(o)+FibonacciIntegerEncoder_js_1.FibonacciIntegerEncoder.encode(t)}return c}static decode(e){if(!/^[0-1]*$/.test(e)||e.length<12)throw new DecodingError_js_1.DecodingError("Undecodable FibonacciIntegerRange '"+e+"'");let n=[],r=FixedIntegerEncoder_js_1.FixedIntegerEncoder.decode(e.substring(0,12)),o=0,c=12;for(let t=0;t<r;t++){let r=BooleanEncoder_js_1.BooleanEncoder.decode(e.substring(c,c+1));if(c++,!0===r){let r=e.indexOf("11",c),t=FibonacciIntegerEncoder_js_1.FibonacciIntegerEncoder.decode(e.substring(c,r+2))+o;o=t,c=r+2,r=e.indexOf("11",c);let i=FibonacciIntegerEncoder_js_1.FibonacciIntegerEncoder.decode(e.substring(c,r+2))+o;o=i,c=r+2;for(let e=t;e<=i;e++)n.push(e)}else{let r=e.indexOf("11",c),t=FibonacciIntegerEncoder_js_1.FibonacciIntegerEncoder.decode(e.substring(c,r+2))+o;o=t,n.push(t),c=r+2}}return n}}exports.FibonacciIntegerRangeEncoder=FibonacciIntegerRangeEncoder;