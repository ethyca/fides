"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.EncodableOptimizedFibonacciRange=void 0;const FibonacciIntegerRangeEncoder_js_1=require("./encoder/FibonacciIntegerRangeEncoder.js"),FixedBitfieldEncoder_js_1=require("./encoder/FixedBitfieldEncoder.js"),FixedIntegerEncoder_js_1=require("./encoder/FixedIntegerEncoder.js"),AbstractEncodableBitStringDataType_js_1=require("./AbstractEncodableBitStringDataType.js"),EncodableFibonacciIntegerRange_js_1=require("./EncodableFibonacciIntegerRange.js"),DecodingError_js_1=require("../error/DecodingError.js"),EncodingError_js_1=require("../error/EncodingError.js"),SubstringError_js_1=require("./SubstringError.js"),StringUtil_js_1=require("../util/StringUtil.js");class EncodableOptimizedFibonacciRange extends AbstractEncodableBitStringDataType_js_1.AbstractEncodableBitStringDataType{constructor(e,r=!0){super(r),this.setValue(e)}encode(){try{let e=this.value.length>0?this.value[this.value.length-1]:0,r=FibonacciIntegerRangeEncoder_js_1.FibonacciIntegerRangeEncoder.encode(this.value),n=r.length,i=e;if(n<=i)return FixedIntegerEncoder_js_1.FixedIntegerEncoder.encode(e,16)+"1"+r;{let r=[],n=0;for(let i=0;i<e;i++)i==this.value[n]-1?(r[i]=!0,n++):r[i]=!1;return FixedIntegerEncoder_js_1.FixedIntegerEncoder.encode(e,16)+"0"+FixedBitfieldEncoder_js_1.FixedBitfieldEncoder.encode(r,i)}}catch(e){throw new EncodingError_js_1.EncodingError(e)}}decode(e){try{if("1"===e.charAt(16))this.value=FibonacciIntegerRangeEncoder_js_1.FibonacciIntegerRangeEncoder.decode(e.substring(17));else{let r=[],n=FixedBitfieldEncoder_js_1.FixedBitfieldEncoder.decode(e.substring(17));for(let e=0;e<n.length;e++)!0===n[e]&&r.push(e+1);this.value=r}}catch(e){throw new DecodingError_js_1.DecodingError(e)}}substring(e,r){try{let n=FixedIntegerEncoder_js_1.FixedIntegerEncoder.decode(StringUtil_js_1.StringUtil.substring(e,r,r+16));return"1"===e.charAt(r+16)?StringUtil_js_1.StringUtil.substring(e,r,r+17)+new EncodableFibonacciIntegerRange_js_1.EncodableFibonacciIntegerRange([]).substring(e,r+17):StringUtil_js_1.StringUtil.substring(e,r,r+17+n)}catch(e){throw new SubstringError_js_1.SubstringError(e)}}getValue(){return[...super.getValue()]}setValue(e){super.setValue(Array.from(new Set(e)).sort(((e,r)=>e-r)))}}exports.EncodableOptimizedFibonacciRange=EncodableOptimizedFibonacciRange;