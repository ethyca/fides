[build-system]
requires = ["hatchling>=1.8.0"]
build-backend = "hatchling.build"

[project]
name = "ethyca-fides"
dynamic = ["version"]
description = "Open-source ecosystem for data privacy as code."
readme = "README.md"
license = "Apache-2.0"
requires-python = ">=3.8, <4"
authors = [
    { name = "Ethyca, Inc.", email = "fidesteam@ethyca.com" },
]
keywords = [
    "data privacy",
    "privacy as code",
    "data privacy compliance",
]
classifiers = [
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Topic :: Software Development :: Libraries",
]
dependencies = [
    "alembic==1.8.1",
    "APScheduler==3.9.1",
    "asyncpg==0.25.0",
    "celery[pytest]==5.2.7",
    "click==8.1.3",
    "colorama>=0.4.3",
    "cryptography~=3.4.8",
    "dask==2022.8.0",
    "deepdiff==5.8.0",
    "emails",
    "fastapi[all]==0.81.0",
    "fastapi-pagination[sqlalchemy]~= 0.9.3",
    "fideslang==1.3.0",
    "fideslib==3.1.1",
    "fideslog==1.2.3",
    "GitPython==3.1.27",
    "hvac==0.11.2",
    "loguru>=0.5,<0.6",
    "Jinja2==3.1.2",
    "multidimensional_urlencode==0.0.4",
    "openpyxl==3.0.9",
    "pandas==1.4.3",
    "passlib[bcrypt]==1.7.4",
    "plotly==5.4",
    "psycopg2-binary==2.9.3",
    "pydantic<1.10.0",
    "pydash==5.1.0",
    "python-jose[cryptography]==3.3.0",
    "PyJWT==2.4.0",
    "pyyaml>=5,<6",
    "sqlalchemy[asyncio]==1.4.27",
    "sqlalchemy-stubs==0.4",
    "SQLAlchemy-Utils==0.38.3",
    "toml>=0.10.1",
    "Unidecode==1.3.4",
]

[project.optional-dependencies]
dev = [
    "black==22.8.0",
    "Faker==14.1.0",
    "GitPython==3.1.27",
    "isort==5.10.1",
    "mypy==0.971",
    "nox==2022.8.7",
    "packaging==21.3",
    "pre-commit==2.20.0",
    "pylint==2.15.0",
    "pytest-asyncio==0.19.0",
    "pytest-cov==3.0.0",
    "pytest-env==0.6.2",
    "pytest==7.1.2",
    "requests-mock==1.9.3",
    "setuptools>=64.0.2",
    "sqlalchemy-stubs",
    "types-PyYAML==6.0.11",
    "types-redis==4.3.4",
    "types-requests",
    "types-toml==0.10.8",
    "types-ujson==5.4.0",
    "types-urllib3==1.26.23",
    "xenon==0.9.0",
    "build==0.8.0",
]
aws = [
    "boto3~=1.24.46",
]
bigquery = [
    "sqlalchemy-bigquery==1.4.4",
]
mongo = [
    "pymongo==3.12.0",
]
mssql = [
    "pyodbc==4.0.34",
]
mysql = [
    "PyMySQL==1.0.2",
]
okta = [
    "okta==2.5.0",
]
redis = [
    "redis==3.5.3",
    "fastapi-caching[redis]",
]
redshift = [
    "sqlalchemy-redshift==0.8.11",
]
snowflake = [
    "snowflake-sqlalchemy==1.4.1",
]
all = [
    "boto3~=1.24.46",
    "sqlalchemy-bigquery==1.4.4",
    "pymongo==3.12.0",
    "PyMySQL==1.0.2",
    "okta==2.5.0",
    "redis==3.5.3",
    "fastapi-caching[redis]",
    "sqlalchemy-redshift==0.8.11",
    "snowflake-sqlalchemy==1.4.1",
]

[project.urls]
Homepage = "https://github.com/ethyca/fides"

[tool.hatch.build.targets.sdist]
include = [
    "/src",
]

[tool.hatch.build.targets.wheel]
packages = [
    "/src/fides",
]

[tool.hatch.version]
path = "src/fides/__init__.py"

[project.scripts]
fides = "fides.cli:cli"

##########
## MyPy ##
##########
[tool.mypy]
check_untyped_defs = true
disallow_untyped_defs = true
files = ["src"]
exclude = ["migrations/"]
no_implicit_reexport = true
ignore_missing_imports = true
plugins = ["pydantic.mypy", "sqlmypy"]
pretty = true
show_error_codes = true
warn_redundant_casts = true
warn_unused_configs = true

[pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[[tool.mypy.overrides]]
module = [
  "alembic.*",
  "apscheduler.*",
  "boto3.*",
  "botocore.*",
  "bson.*",
  "celery.*",
  "dask.*",
  "fideslang.*",
  "fideslib.*",
  "fideslog.*",
  "firebase_admin.*",
  "jose.*",
  "jwt.*",
  "multidimensional_urlencode.*",
  "pandas.*",
  "pydash.*",
  "pymongo.*",
  "snowflake.*",
  "sqlalchemy_utils.*",
  "uvicorn.*"
]
ignore_missing_imports = true

###########
## Black ##
###########
[tool.black]
py39 = true
line-length = 88
include = '\.pyi?$'
exclude = '''
/(
    \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist

    # The following are specific to Black, you probably don't want those.
    | blib2to3
    | tests/data
)/
'''

###########
## isort ##
###########
[tool.isort]
profile = "black"
line_length = 88
src_paths = ["src", "tests", "noxfiles"]

############
## Pylint ##
############
[tool.pylint.messages_control]
disable=[
    "bad-option-value",
    "broad-except",
    "consider-using-f-string",
    "dangerous-default-value",
    "duplicate-code",
    "fixme",
    "import-error",
    "import-outside-toplevel",
    "invalid-name",
    "line-too-long",
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-module-docstring",
    "missing-timeout",
    "no-self-argument",
    "no-self-use",
    "raise-missing-from",
    "too-few-public-methods",
    "too-many-ancestors",
    "too-many-arguments",
    "unnecessary-comprehension",
    "unnecessary-lambda-assignment",
    "unsubscriptable-object", # Otherwise throws errors on certain Type annotations
    "unused-argument",
]

[tool.pylint.reports]
reports="no"
output-format="colorized"

[tool.pylint.format]
max-line-length="88"

[tool.pylint.basic]
good-names="_,i,setUp,tearDown,maxDiff,default_app_config"

[tool.pylint.ignore]
ignore="migrations,tests"

[tool.pylint.whitelist]
extension-pkg-whitelist = ["pydantic", "zlib"]

############
## Pytest ##
############
[tool.pytest.ini_options]
env = [
  "TESTING=True"
]
log_cli=false
filterwarnings = "ignore::DeprecationWarning:aiofiles.*:"
testpaths="tests"
log_level = "INFO"
addopts = ["--cov=fides.ctl.core",
            "--cov=fides.cli",
            "--cov=fides.api",
            "--cov-report=term-missing",
            "-vv",
            "--no-cov-on-fail",
            "--disable-pytest-warnings"]
markers = [
    "unit: only runs tests that don't require non-python dependencies (i.e. a database)",
    "integration: only runs tests that require application dependencies (i.e. a database)",
    "external: only runs tests that require access to non-docker, external services (i.e. Snowflake)",
    "postgres: only runs the integration tests for postgres",
    "mssql: only runs the integration tests for sqlserver/mssql",
    "mysql: only runs the integration tests for mysql",
    "integration",
    "integration_external",
    "integration_mysql",
    "integration_postgres",
    "integration_mongodb",
    "integration_mssql",
    "integration_redshift",
    "integration_snowflake",
    "integration_mariadb",
    "integration_bigquery",
    "integration_saas",
    "integration_saas_override",
    "integration_mailchimp",
    "integration_zendesk",
    "integration_sentry",
    "integration_stripe",
    "integration_hubspot",
    "integration_datadog",
    "integration_segment",
    "integration_sendgrid",
    "integration_auth0",
    "integration_shopify",
    "integration_square",
    "integration_outreach",
    "integration_salesforce",
    "integration_logi_id",
    "integration_adobe_campaign",
    "unit_saas"
]
asyncio_mode = "auto"