{
  "openapi": "3.0.2",
  "info": {
    "title": "fides",
    "version": "2.7.0.post0.dev74"
  },
  "paths": {
    "/api/v1/data_category": {
      "get": {
        "tags": [
          "DataCategory"
        ],
        "summary": "List",
        "description": "Get a list of all of the resources of this type.",
        "operationId": "List_api_v1_data_category_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_category"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Api V1 Data Category Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataCategory"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "DataCategory"
        ],
        "summary": "Update",
        "description": "Update a resource by its fides_key.\n\nThe `is_default` field cannot be updated and will respond\nwith a `403 Forbidden` if attempted.",
        "operationId": "update_api_v1_data_category_put",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_category"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataCategory"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataCategory"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "data_category",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:update"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "DataCategory"
        ],
        "summary": "Create",
        "description": "Create a resource.\n\nPayloads with an is_default field can only be set to False,\nwill return a `403 Forbidden`.",
        "operationId": "create_api_v1_data_category_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_category"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataCategory"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataCategory"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "data_category",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:create"
            ]
          }
        ]
      }
    },
    "/api/v1/data_category/{fides_key}": {
      "get": {
        "tags": [
          "DataCategory"
        ],
        "summary": "Get",
        "description": "Get a resource by its fides_key.",
        "operationId": "get_api_v1_data_category__fides_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_category"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataCategory"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "DataCategory"
        ],
        "summary": "Delete",
        "description": "Delete a resource by its fides_key.\n\nResources that have `is_default=True` cannot be deleted and will respond\nwith a `403 Forbidden`.",
        "operationId": "delete_api_v1_data_category__fides_key__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_category"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "data_category",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:delete"
            ]
          }
        ]
      }
    },
    "/api/v1/data_category/upsert": {
      "post": {
        "tags": [
          "DataCategory"
        ],
        "summary": "Upsert",
        "description": "For any resource in `resources` that already exists in the database,\nupdate the resource by its `fides_key`. Otherwise, create a new resource.\n\nResponds with a `201 Created` if even a single resource in `resources`\ndid not previously exist. Otherwise, responds with a `200 OK`.\n\nThe `is_default` field cannot be updated and will respond\nwith a `403 Forbidden` if attempted.",
        "operationId": "upsert_api_v1_data_category_upsert_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_category"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Resources",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DataCategory"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "message": "Upserted 3 data_category(s)",
                  "inserted": 0,
                  "updated": 3
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "example": {
                  "message": "Upserted 3 data_category(s)",
                  "inserted": 1,
                  "updated": 2
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "DataCategory",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:create",
              "cli-objects:update"
            ]
          }
        ]
      }
    },
    "/api/v1/data_qualifier": {
      "get": {
        "tags": [
          "DataQualifier"
        ],
        "summary": "List",
        "description": "Get a list of all of the resources of this type.",
        "operationId": "List_api_v1_data_qualifier_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_qualifier"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Api V1 Data Qualifier Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataQualifier"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "DataQualifier"
        ],
        "summary": "Update",
        "description": "Update a resource by its fides_key.\n\nThe `is_default` field cannot be updated and will respond\nwith a `403 Forbidden` if attempted.",
        "operationId": "update_api_v1_data_qualifier_put",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_qualifier"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataQualifier"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataQualifier"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "data_qualifier",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:update"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "DataQualifier"
        ],
        "summary": "Create",
        "description": "Create a resource.\n\nPayloads with an is_default field can only be set to False,\nwill return a `403 Forbidden`.",
        "operationId": "create_api_v1_data_qualifier_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_qualifier"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataQualifier"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataQualifier"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "data_qualifier",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:create"
            ]
          }
        ]
      }
    },
    "/api/v1/data_qualifier/{fides_key}": {
      "get": {
        "tags": [
          "DataQualifier"
        ],
        "summary": "Get",
        "description": "Get a resource by its fides_key.",
        "operationId": "get_api_v1_data_qualifier__fides_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_qualifier"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataQualifier"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "DataQualifier"
        ],
        "summary": "Delete",
        "description": "Delete a resource by its fides_key.\n\nResources that have `is_default=True` cannot be deleted and will respond\nwith a `403 Forbidden`.",
        "operationId": "delete_api_v1_data_qualifier__fides_key__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_qualifier"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "data_qualifier",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:delete"
            ]
          }
        ]
      }
    },
    "/api/v1/data_qualifier/upsert": {
      "post": {
        "tags": [
          "DataQualifier"
        ],
        "summary": "Upsert",
        "description": "For any resource in `resources` that already exists in the database,\nupdate the resource by its `fides_key`. Otherwise, create a new resource.\n\nResponds with a `201 Created` if even a single resource in `resources`\ndid not previously exist. Otherwise, responds with a `200 OK`.\n\nThe `is_default` field cannot be updated and will respond\nwith a `403 Forbidden` if attempted.",
        "operationId": "upsert_api_v1_data_qualifier_upsert_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_qualifier"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Resources",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DataQualifier"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "message": "Upserted 3 data_qualifier(s)",
                  "inserted": 0,
                  "updated": 3
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "example": {
                  "message": "Upserted 3 data_qualifier(s)",
                  "inserted": 1,
                  "updated": 2
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "DataCategory",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:create",
              "cli-objects:update"
            ]
          }
        ]
      }
    },
    "/api/v1/data_subject": {
      "get": {
        "tags": [
          "DataSubject"
        ],
        "summary": "List",
        "description": "Get a list of all of the resources of this type.",
        "operationId": "List_api_v1_data_subject_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_subject"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Api V1 Data Subject Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataSubject"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "DataSubject"
        ],
        "summary": "Update",
        "description": "Update a resource by its fides_key.\n\nThe `is_default` field cannot be updated and will respond\nwith a `403 Forbidden` if attempted.",
        "operationId": "update_api_v1_data_subject_put",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_subject"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSubject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSubject"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "data_subject",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:update"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "DataSubject"
        ],
        "summary": "Create",
        "description": "Create a resource.\n\nPayloads with an is_default field can only be set to False,\nwill return a `403 Forbidden`.",
        "operationId": "create_api_v1_data_subject_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_subject"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSubject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSubject"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "data_subject",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:create"
            ]
          }
        ]
      }
    },
    "/api/v1/data_subject/{fides_key}": {
      "get": {
        "tags": [
          "DataSubject"
        ],
        "summary": "Get",
        "description": "Get a resource by its fides_key.",
        "operationId": "get_api_v1_data_subject__fides_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_subject"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSubject"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "DataSubject"
        ],
        "summary": "Delete",
        "description": "Delete a resource by its fides_key.\n\nResources that have `is_default=True` cannot be deleted and will respond\nwith a `403 Forbidden`.",
        "operationId": "delete_api_v1_data_subject__fides_key__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_subject"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "data_subject",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:delete"
            ]
          }
        ]
      }
    },
    "/api/v1/data_subject/upsert": {
      "post": {
        "tags": [
          "DataSubject"
        ],
        "summary": "Upsert",
        "description": "For any resource in `resources` that already exists in the database,\nupdate the resource by its `fides_key`. Otherwise, create a new resource.\n\nResponds with a `201 Created` if even a single resource in `resources`\ndid not previously exist. Otherwise, responds with a `200 OK`.\n\nThe `is_default` field cannot be updated and will respond\nwith a `403 Forbidden` if attempted.",
        "operationId": "upsert_api_v1_data_subject_upsert_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_subject"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Resources",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DataSubject"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "message": "Upserted 3 data_subject(s)",
                  "inserted": 0,
                  "updated": 3
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "example": {
                  "message": "Upserted 3 data_subject(s)",
                  "inserted": 1,
                  "updated": 2
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "DataCategory",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:create",
              "cli-objects:update"
            ]
          }
        ]
      }
    },
    "/api/v1/data_use": {
      "get": {
        "tags": [
          "DataUse"
        ],
        "summary": "List",
        "description": "Get a list of all of the resources of this type.",
        "operationId": "List_api_v1_data_use_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_use"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Api V1 Data Use Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataUse"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "DataUse"
        ],
        "summary": "Update",
        "description": "Update a resource by its fides_key.\n\nThe `is_default` field cannot be updated and will respond\nwith a `403 Forbidden` if attempted.",
        "operationId": "update_api_v1_data_use_put",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_use"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataUse"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataUse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "data_use",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:update"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "DataUse"
        ],
        "summary": "Create",
        "description": "Create a resource.\n\nPayloads with an is_default field can only be set to False,\nwill return a `403 Forbidden`.",
        "operationId": "create_api_v1_data_use_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_use"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataUse"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataUse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "data_use",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:create"
            ]
          }
        ]
      }
    },
    "/api/v1/data_use/{fides_key}": {
      "get": {
        "tags": [
          "DataUse"
        ],
        "summary": "Get",
        "description": "Get a resource by its fides_key.",
        "operationId": "get_api_v1_data_use__fides_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_use"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataUse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "DataUse"
        ],
        "summary": "Delete",
        "description": "Delete a resource by its fides_key.\n\nResources that have `is_default=True` cannot be deleted and will respond\nwith a `403 Forbidden`.",
        "operationId": "delete_api_v1_data_use__fides_key__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_use"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "data_use",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:delete"
            ]
          }
        ]
      }
    },
    "/api/v1/data_use/upsert": {
      "post": {
        "tags": [
          "DataUse"
        ],
        "summary": "Upsert",
        "description": "For any resource in `resources` that already exists in the database,\nupdate the resource by its `fides_key`. Otherwise, create a new resource.\n\nResponds with a `201 Created` if even a single resource in `resources`\ndid not previously exist. Otherwise, responds with a `200 OK`.\n\nThe `is_default` field cannot be updated and will respond\nwith a `403 Forbidden` if attempted.",
        "operationId": "upsert_api_v1_data_use_upsert_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "data_use"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Resources",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DataUse"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "message": "Upserted 3 data_use(s)",
                  "inserted": 0,
                  "updated": 3
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "example": {
                  "message": "Upserted 3 data_use(s)",
                  "inserted": 1,
                  "updated": 2
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "DataCategory",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:create",
              "cli-objects:update"
            ]
          }
        ]
      }
    },
    "/api/v1/dataset": {
      "get": {
        "tags": [
          "Dataset"
        ],
        "summary": "List",
        "description": "Get a list of all of the resources of this type.",
        "operationId": "List_api_v1_dataset_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "dataset"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Api V1 Dataset Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dataset"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Dataset"
        ],
        "summary": "Update",
        "description": "Update a resource by its fides_key.\n\nThe `is_default` field cannot be updated and will respond\nwith a `403 Forbidden` if attempted.",
        "operationId": "update_api_v1_dataset_put",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "dataset"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Dataset"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dataset"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "dataset",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:update"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Dataset"
        ],
        "summary": "Create",
        "description": "Create a resource.\n\nPayloads with an is_default field can only be set to False,\nwill return a `403 Forbidden`.",
        "operationId": "create_api_v1_dataset_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "dataset"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Dataset"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dataset"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "dataset",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:create"
            ]
          }
        ]
      }
    },
    "/api/v1/dataset/{fides_key}": {
      "get": {
        "tags": [
          "Dataset"
        ],
        "summary": "Get",
        "description": "Get a resource by its fides_key.",
        "operationId": "get_api_v1_dataset__fides_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "dataset"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dataset"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Dataset"
        ],
        "summary": "Delete",
        "description": "Delete a resource by its fides_key.\n\nResources that have `is_default=True` cannot be deleted and will respond\nwith a `403 Forbidden`.",
        "operationId": "delete_api_v1_dataset__fides_key__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "dataset"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "dataset",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:delete"
            ]
          }
        ]
      }
    },
    "/api/v1/dataset/upsert": {
      "post": {
        "tags": [
          "Dataset"
        ],
        "summary": "Upsert",
        "description": "For any resource in `resources` that already exists in the database,\nupdate the resource by its `fides_key`. Otherwise, create a new resource.\n\nResponds with a `201 Created` if even a single resource in `resources`\ndid not previously exist. Otherwise, responds with a `200 OK`.\n\nThe `is_default` field cannot be updated and will respond\nwith a `403 Forbidden` if attempted.",
        "operationId": "upsert_api_v1_dataset_upsert_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "dataset"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Resources",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Dataset"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "message": "Upserted 3 dataset(s)",
                  "inserted": 0,
                  "updated": 3
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "example": {
                  "message": "Upserted 3 dataset(s)",
                  "inserted": 1,
                  "updated": 2
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "DataCategory",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:create",
              "cli-objects:update"
            ]
          }
        ]
      }
    },
    "/api/v1/organization": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List",
        "description": "Get a list of all of the resources of this type.",
        "operationId": "List_api_v1_organization_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "organization"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Api V1 Organization Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Organization"
        ],
        "summary": "Update",
        "description": "Update a resource by its fides_key.\n\nThe `is_default` field cannot be updated and will respond\nwith a `403 Forbidden` if attempted.",
        "operationId": "update_api_v1_organization_put",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "organization"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Organization"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "organization",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:update"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Create",
        "description": "Create a resource.\n\nPayloads with an is_default field can only be set to False,\nwill return a `403 Forbidden`.",
        "operationId": "create_api_v1_organization_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "organization"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Organization"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "organization",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:create"
            ]
          }
        ]
      }
    },
    "/api/v1/organization/{fides_key}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get",
        "description": "Get a resource by its fides_key.",
        "operationId": "get_api_v1_organization__fides_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "organization"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "Delete",
        "description": "Delete a resource by its fides_key.\n\nResources that have `is_default=True` cannot be deleted and will respond\nwith a `403 Forbidden`.",
        "operationId": "delete_api_v1_organization__fides_key__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "organization"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "organization",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:delete"
            ]
          }
        ]
      }
    },
    "/api/v1/organization/upsert": {
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Upsert",
        "description": "For any resource in `resources` that already exists in the database,\nupdate the resource by its `fides_key`. Otherwise, create a new resource.\n\nResponds with a `201 Created` if even a single resource in `resources`\ndid not previously exist. Otherwise, responds with a `200 OK`.\n\nThe `is_default` field cannot be updated and will respond\nwith a `403 Forbidden` if attempted.",
        "operationId": "upsert_api_v1_organization_upsert_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "organization"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Resources",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "message": "Upserted 3 organization(s)",
                  "inserted": 0,
                  "updated": 3
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "example": {
                  "message": "Upserted 3 organization(s)",
                  "inserted": 1,
                  "updated": 2
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "DataCategory",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:create",
              "cli-objects:update"
            ]
          }
        ]
      }
    },
    "/api/v1/policy": {
      "get": {
        "tags": [
          "Policy"
        ],
        "summary": "List",
        "description": "Get a list of all of the resources of this type.",
        "operationId": "List_api_v1_policy_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "policy"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Api V1 Policy Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fideslang__models__Policy"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Policy"
        ],
        "summary": "Update",
        "description": "Update a resource by its fides_key.\n\nThe `is_default` field cannot be updated and will respond\nwith a `403 Forbidden` if attempted.",
        "operationId": "update_api_v1_policy_put",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "policy"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/fideslang__models__Policy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fideslang__models__Policy"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "policy",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:update"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Policy"
        ],
        "summary": "Create",
        "description": "Create a resource.\n\nPayloads with an is_default field can only be set to False,\nwill return a `403 Forbidden`.",
        "operationId": "create_api_v1_policy_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "policy"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/fideslang__models__Policy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fideslang__models__Policy"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "policy",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:create"
            ]
          }
        ]
      }
    },
    "/api/v1/policy/{fides_key}": {
      "get": {
        "tags": [
          "Policy"
        ],
        "summary": "Get",
        "description": "Get a resource by its fides_key.",
        "operationId": "get_api_v1_policy__fides_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "policy"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fideslang__models__Policy"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Policy"
        ],
        "summary": "Delete",
        "description": "Delete a resource by its fides_key.\n\nResources that have `is_default=True` cannot be deleted and will respond\nwith a `403 Forbidden`.",
        "operationId": "delete_api_v1_policy__fides_key__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "policy"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "policy",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:delete"
            ]
          }
        ]
      }
    },
    "/api/v1/policy/upsert": {
      "post": {
        "tags": [
          "Policy"
        ],
        "summary": "Upsert",
        "description": "For any resource in `resources` that already exists in the database,\nupdate the resource by its `fides_key`. Otherwise, create a new resource.\n\nResponds with a `201 Created` if even a single resource in `resources`\ndid not previously exist. Otherwise, responds with a `200 OK`.\n\nThe `is_default` field cannot be updated and will respond\nwith a `403 Forbidden` if attempted.",
        "operationId": "upsert_api_v1_policy_upsert_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "policy"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Resources",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/fideslang__models__Policy"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "message": "Upserted 3 policy(s)",
                  "inserted": 0,
                  "updated": 3
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "example": {
                  "message": "Upserted 3 policy(s)",
                  "inserted": 1,
                  "updated": 2
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "DataCategory",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:create",
              "cli-objects:update"
            ]
          }
        ]
      }
    },
    "/api/v1/registry": {
      "get": {
        "tags": [
          "Registry"
        ],
        "summary": "List",
        "description": "Get a list of all of the resources of this type.",
        "operationId": "List_api_v1_registry_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "registry"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Api V1 Registry Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Registry"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Registry"
        ],
        "summary": "Update",
        "description": "Update a resource by its fides_key.\n\nThe `is_default` field cannot be updated and will respond\nwith a `403 Forbidden` if attempted.",
        "operationId": "update_api_v1_registry_put",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "registry"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Registry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registry"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "registry",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:update"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Registry"
        ],
        "summary": "Create",
        "description": "Create a resource.\n\nPayloads with an is_default field can only be set to False,\nwill return a `403 Forbidden`.",
        "operationId": "create_api_v1_registry_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "registry"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Registry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registry"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "registry",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:create"
            ]
          }
        ]
      }
    },
    "/api/v1/registry/{fides_key}": {
      "get": {
        "tags": [
          "Registry"
        ],
        "summary": "Get",
        "description": "Get a resource by its fides_key.",
        "operationId": "get_api_v1_registry__fides_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "registry"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registry"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Registry"
        ],
        "summary": "Delete",
        "description": "Delete a resource by its fides_key.\n\nResources that have `is_default=True` cannot be deleted and will respond\nwith a `403 Forbidden`.",
        "operationId": "delete_api_v1_registry__fides_key__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "registry"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "registry",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:delete"
            ]
          }
        ]
      }
    },
    "/api/v1/registry/upsert": {
      "post": {
        "tags": [
          "Registry"
        ],
        "summary": "Upsert",
        "description": "For any resource in `resources` that already exists in the database,\nupdate the resource by its `fides_key`. Otherwise, create a new resource.\n\nResponds with a `201 Created` if even a single resource in `resources`\ndid not previously exist. Otherwise, responds with a `200 OK`.\n\nThe `is_default` field cannot be updated and will respond\nwith a `403 Forbidden` if attempted.",
        "operationId": "upsert_api_v1_registry_upsert_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "registry"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Resources",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Registry"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "message": "Upserted 3 registry(s)",
                  "inserted": 0,
                  "updated": 3
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "example": {
                  "message": "Upserted 3 registry(s)",
                  "inserted": 1,
                  "updated": 2
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "DataCategory",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:create",
              "cli-objects:update"
            ]
          }
        ]
      }
    },
    "/api/v1/system": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "List",
        "description": "Get a list of all of the resources of this type.",
        "operationId": "List_api_v1_system_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "system"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Api V1 System Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/System"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "System"
        ],
        "summary": "Update",
        "description": "Update a resource by its fides_key.\n\nThe `is_default` field cannot be updated and will respond\nwith a `403 Forbidden` if attempted.",
        "operationId": "update_api_v1_system_put",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "system"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/System"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/System"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "system",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:update"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "System"
        ],
        "summary": "Create",
        "description": "Create a resource.\n\nPayloads with an is_default field can only be set to False,\nwill return a `403 Forbidden`.",
        "operationId": "create_api_v1_system_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "system"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/System"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/System"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "system",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:create"
            ]
          }
        ]
      }
    },
    "/api/v1/system/{fides_key}": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get",
        "description": "Get a resource by its fides_key.",
        "operationId": "get_api_v1_system__fides_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "system"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/System"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "System"
        ],
        "summary": "Delete",
        "description": "Delete a resource by its fides_key.\n\nResources that have `is_default=True` cannot be deleted and will respond\nwith a `403 Forbidden`.",
        "operationId": "delete_api_v1_system__fides_key__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "system"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "system",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:delete"
            ]
          }
        ]
      }
    },
    "/api/v1/system/upsert": {
      "post": {
        "tags": [
          "System"
        ],
        "summary": "Upsert",
        "description": "For any resource in `resources` that already exists in the database,\nupdate the resource by its `fides_key`. Otherwise, create a new resource.\n\nResponds with a `201 Created` if even a single resource in `resources`\ndid not previously exist. Otherwise, responds with a `200 OK`.\n\nThe `is_default` field cannot be updated and will respond\nwith a `403 Forbidden` if attempted.",
        "operationId": "upsert_api_v1_system_upsert_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "system"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Resources",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/System"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "message": "Upserted 3 system(s)",
                  "inserted": 0,
                  "updated": 3
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "example": {
                  "message": "Upserted 3 system(s)",
                  "inserted": 1,
                  "updated": 2
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "DataCategory",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:create",
              "cli-objects:update"
            ]
          }
        ]
      }
    },
    "/api/v1/evaluation": {
      "get": {
        "tags": [
          "Evaluation"
        ],
        "summary": "List",
        "description": "Get a list of all of the resources of this type.",
        "operationId": "List_api_v1_evaluation_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "evaluation"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Api V1 Evaluation Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Evaluation"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Evaluation"
        ],
        "summary": "Update",
        "description": "Update a resource by its fides_key.\n\nThe `is_default` field cannot be updated and will respond\nwith a `403 Forbidden` if attempted.",
        "operationId": "update_api_v1_evaluation_put",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "evaluation"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Evaluation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evaluation"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "evaluation",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:update"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Evaluation"
        ],
        "summary": "Create",
        "description": "Create a resource.\n\nPayloads with an is_default field can only be set to False,\nwill return a `403 Forbidden`.",
        "operationId": "create_api_v1_evaluation_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "evaluation"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Evaluation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evaluation"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "evaluation",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:create"
            ]
          }
        ]
      }
    },
    "/api/v1/evaluation/{fides_key}": {
      "get": {
        "tags": [
          "Evaluation"
        ],
        "summary": "Get",
        "description": "Get a resource by its fides_key.",
        "operationId": "get_api_v1_evaluation__fides_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "evaluation"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evaluation"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Evaluation"
        ],
        "summary": "Delete",
        "description": "Delete a resource by its fides_key.\n\nResources that have `is_default=True` cannot be deleted and will respond\nwith a `403 Forbidden`.",
        "operationId": "delete_api_v1_evaluation__fides_key__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "evaluation"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "evaluation",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:delete"
            ]
          }
        ]
      }
    },
    "/api/v1/evaluation/upsert": {
      "post": {
        "tags": [
          "Evaluation"
        ],
        "summary": "Upsert",
        "description": "For any resource in `resources` that already exists in the database,\nupdate the resource by its `fides_key`. Otherwise, create a new resource.\n\nResponds with a `201 Created` if even a single resource in `resources`\ndid not previously exist. Otherwise, responds with a `200 OK`.\n\nThe `is_default` field cannot be updated and will respond\nwith a `403 Forbidden` if attempted.",
        "operationId": "upsert_api_v1_evaluation_upsert_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string",
              "default": "evaluation"
            },
            "name": "resource_type",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Resources",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Evaluation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "message": "Upserted 3 evaluation(s)",
                  "inserted": 0,
                  "updated": 3
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "example": {
                  "message": "Upserted 3 evaluation(s)",
                  "inserted": 1,
                  "updated": 2
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "error": "user does not have permission to modify this resource",
                    "resource_type": "DataCategory",
                    "fides_key": "example.key"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:create",
              "cli-objects:update"
            ]
          }
        ]
      }
    },
    "/api/v1/admin/db/{action}": {
      "post": {
        "tags": [
          "Admin",
          "Admin"
        ],
        "summary": "Db Action",
        "description": "Initiate one of the enumerated DBActions.",
        "operationId": "db_action_api_v1_admin_db__action__post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DBActions"
            },
            "name": "action",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "database:reset"
            ]
          }
        ]
      }
    },
    "/api/v1/datamap/{organization_fides_key}": {
      "get": {
        "tags": [
          "Datamap"
        ],
        "summary": "Export Datamap",
        "description": "An endpoint to return the data map for a given Organization.\n\nThe Organization `fides_key` is the only url parameter required. In most cases,\nthis should be `default_organization`\n\nUses shared logic from the CLI, first gathering all resources from the server then\nformatting all attributes appropriately.\n\nReturns the expected datamap for a given organization fides key as a set of records.",
        "operationId": "export_datamap_api_v1_datamap__organization_fides_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Organization Fides Key",
              "type": "string"
            },
            "name": "organization_fides_key",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {},
                "example": [
                  {
                    "dataset.name": "Fides Dataset",
                    "system.name": "Fides System",
                    "system.administrating_department": "Department or Business Function",
                    "system.privacy_declaration.data_use.name": "Purpose of Processing",
                    "system.joint_controller": "Joint Controller",
                    "system.privacy_declaration.data_subjects.name": "Categories of Individuals",
                    "unioned_data_categories": "Categories of Personal Data (Fides Taxonomy)",
                    "system.privacy_declaration.data_use.recipients": "Categories of Recipients",
                    "system.link_to_processor_contract": "Link to Contract with Processor",
                    "third_country_combined": "Third Country Transfers",
                    "system.third_country_safeguards": "Safeguards for Exceptional Transfers of Personal Data",
                    "dataset.retention": "Retention Schedule",
                    "organization.link_to_security_policy": "General Description of Security Measures",
                    "system.data_responsibility_title": "Role or Responsibility",
                    "system.privacy_declaration.data_use.legal_basis": "Article 6 lawful basis for processing personal data",
                    "system.privacy_declaration.data_use.special_category": "Article 9 condition for processing special category data",
                    "system.privacy_declaration.data_use.legitimate_interest": "Legitimate interests for the processing (if applicable)",
                    "system.privacy_declaration.data_use.legitimate_interest_impact_assessment": "Link to record of legitimate interests assessment (if applicable)",
                    "system.privacy_declaration.data_subjects.rights_available": "Rights available to individuals",
                    "system.privacy_declaration.data_subjects.automated_decisions_or_profiling": "Existence of automated decision-making, including profiling (if applicable)",
                    "dataset.source_name": "The source of the personal data (if applicable)",
                    "system.data_protection_impact_assessment.is_required": "Data Protection Impact Assessment required?",
                    "system.data_protection_impact_assessment.progress": "Data Protection Impact Assessment progress",
                    "system.data_protection_impact_assessment.link": "Link to Data Protection Impact Assessment",
                    "system.fides_key": "System Fides Key",
                    "dataset.fides_key": "Dataset Fides Key (if applicable)",
                    "system.system_dependencies": "Related cross-system dependencies",
                    "system.description": "Description of the System",
                    "system.ingress": "Related Systems which receive data to this System",
                    "system.egress": "Related Systems which send data to this System"
                  },
                  {
                    "system.name": "Demo Analytics System",
                    "system.data_responsibility_title": "Controller",
                    "system.administrating_department": "Engineering",
                    "system.privacy_declaration.data_use.name": "System",
                    "system.privacy_declaration.data_use.legal_basis": "N/A",
                    "system.privacy_declaration.data_use.special_category": "N/A",
                    "system.privacy_declaration.data_use.recipients": "N/A",
                    "system.privacy_declaration.data_use.legitimate_interest": "N/A",
                    "system.privacy_declaration.data_use.legitimate_interest_impact_assessment": "N/A",
                    "system.privacy_declaration.data_subjects.name": "Customer",
                    "system.privacy_declaration.data_subjects.rights_available": "No data subject rights listed",
                    "system.privacy_declaration.data_subjects.automated_decisions_or_profiling": "N/A",
                    "system.data_protection_impact_assessment.is_required": "true",
                    "system.data_protection_impact_assessment.progress": "Complete",
                    "system.data_protection_impact_assessment.link": "https://example.org/analytics_system_data_protection_impact_assessment",
                    "dataset.source_name": "N/A",
                    "third_country_combined": "GBR, USA, CAN",
                    "unioned_data_categories": "user.contact",
                    "dataset.retention": "N/A",
                    "system.joint_controller": "",
                    "system.third_country_safeguards": "",
                    "system.link_to_processor_contract": "",
                    "organization.link_to_security_policy": "https://ethyca.com/privacy-policy/",
                    "system.fides_key": "",
                    "dataset.fides_key": "",
                    "system.system_dependencies": "",
                    "system.description": "",
                    "system.ingress": [],
                    "system.egress": []
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Unable to compile data map."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Resource not found."
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "datamap:read"
            ]
          }
        ]
      }
    },
    "/api/v1/generate": {
      "post": {
        "tags": [
          "Generate"
        ],
        "summary": "Generate",
        "description": "A multi-purpose endpoint to generate Fides resources based on existing\ninfrastructure\n\nCurrently generates Fides resources for the following:\n* AWS: Systems\n* Okta: Systems\n* DB: Datasets\n* BigQuery: Datasets\n\nIn the future, this will include options for other Systems & Datasets,\nexamples include:\n* Snowflake: Datasets\n\nAll production deployments should implement HTTPS for security purposes",
        "operationId": "generate_api_v1_generate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateRequestPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Unable to generate resources."
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "generate:exec"
            ]
          }
        ]
      }
    },
    "/health": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Health",
        "description": "Confirm that the API is running and healthy.",
        "operationId": "health_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CoreHealthCheck"
                },
                "example": {
                  "webserver": "healthy",
                  "version": "1.0.0",
                  "database": "healthy",
                  "cache": "healthy",
                  "workers_enabled": "True",
                  "workers": [
                    "celery@c606808353b5"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "webserver": "healthy",
                    "version": "1.0.0",
                    "database": "unhealthy",
                    "cache": "healthy",
                    "workers_enabled": "True",
                    "workers": [
                      "celery@c606808353b5"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/validate": {
      "post": {
        "tags": [
          "Validate"
        ],
        "summary": "Validate",
        "description": "Endpoint used to validate different resource targets.",
        "operationId": "validate_api_v1_validate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "validate:exec"
            ]
          }
        ]
      }
    },
    "/view/evaluations": {
      "get": {
        "tags": [
          "View"
        ],
        "summary": "Evaluation View",
        "description": "Returns an html document with a list of evaluations",
        "operationId": "evaluation_view_view_evaluations_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "cli-objects:read"
            ]
          }
        ]
      }
    },
    "/api/v1/system/{fides_key}/connection": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get System Connections",
        "description": "Return all the connection configs related to a system.",
        "operationId": "get_system_connections_api_v1_system__fides_key__connection_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Page",
              "minimum": 1.0,
              "type": "integer",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Size",
              "maximum": 100.0,
              "minimum": 1.0,
              "type": "integer",
              "default": 50
            },
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_ConnectionConfigurationResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "connection:read"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "System"
        ],
        "summary": "Patch Connections",
        "description": "Given a valid System fides key, a list of connection config data elements, optionally\ncontaining the secrets, create or update corresponding ConnectionConfig objects or report\nfailure.\n\nIf the key in the payload exists, it will be used to update an existing ConnectionConfiguration.\nOtherwise, a new ConnectionConfiguration will be created for you.",
        "operationId": "patch_connections_api_v1_system__fides_key__connection_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Configs",
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateConnectionConfigurationWithSecrets"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkPutConnectionConfiguration"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "connection:create_or_update"
            ]
          }
        ]
      }
    },
    "/api/v1/user": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Users",
        "description": "Returns a paginated list of all users",
        "operationId": "get_users_api_v1_user_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Username",
              "type": "string"
            },
            "name": "username",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Page",
              "minimum": 1.0,
              "type": "integer",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Size",
              "maximum": 100.0,
              "minimum": 1.0,
              "type": "integer",
              "default": 50
            },
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_UserResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "user:read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create User",
        "description": "Create a user given a username and password.\nIf `password` is sent as a base64 encoded string, it will automatically be decoded\nserver-side before being encrypted and persisted.\nIf `password` is sent as a plaintext string, it will be encrypted and persisted as is.",
        "operationId": "create_user_api_v1_user_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Config Path Override",
              "type": "string",
              "default": ""
            },
            "name": "config_path_override",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Verbose",
              "type": "boolean",
              "default": false
            },
            "name": "verbose",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "user:create"
            ]
          }
        ]
      }
    },
    "/api/v1/user/{user_id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User",
        "description": "Returns a User based on an Id",
        "operationId": "get_user_api_v1_user__user_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "string"
            },
            "name": "user_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "user:read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update User",
        "description": "Update a user given a `user_id`. By default this is limited to users\nupdating their own data.",
        "operationId": "update_user_api_v1_user__user_id__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "string"
            },
            "name": "user_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "user:update"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete User",
        "description": "Deletes the User and associated ClientDetail if applicable.",
        "operationId": "delete_user_api_v1_user__user_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "string"
            },
            "name": "user_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "user:delete"
            ]
          }
        ]
      }
    },
    "/api/v1/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "User Login",
        "description": "Login the user by creating a client if it doesn't exist, and have that client\ngenerate a token.",
        "operationId": "user_login_api_v1_login_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Config Path Override",
              "type": "string",
              "default": ""
            },
            "name": "config_path_override",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Verbose",
              "type": "boolean",
              "default": false
            },
            "name": "verbose",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLogin"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLoginResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/config": {
      "get": {
        "tags": [
          "Config"
        ],
        "summary": "Get Config",
        "description": "Returns the current API exposable Fides configuration.",
        "operationId": "get_config_api_v1_config_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Api Set",
              "type": "boolean",
              "default": false
            },
            "name": "api_set",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Config Api V1 Config Get",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "config:read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Config"
        ],
        "summary": "Reset Settings",
        "description": "Resets the global application settings record.\n\nOnly the \"api-set\" values are cleared, \"config-set\" values are\nnot updated via any API calls",
        "operationId": "reset_settings_api_v1_config_delete",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Reset Settings Api V1 Config Delete",
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "config:update"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Config"
        ],
        "summary": "Update Settings",
        "description": "Updates the global application settings record.\n\nOnly keys provided will be updated, others will be unaffected,\ni.e. true PATCH behavior.",
        "operationId": "update_settings_api_v1_config_patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationConfig"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "config:update"
            ]
          }
        ]
      }
    },
    "/api/v1/connection_type": {
      "get": {
        "tags": [
          "Connection Types"
        ],
        "summary": "Get All Connection Types",
        "description": "Returns a list of connection options in Fidesops - includes only database and saas options here.",
        "operationId": "get_all_connection_types_api_v1_connection_type_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Search",
              "type": "string"
            },
            "name": "search",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SystemType"
            },
            "name": "system_type",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Page",
              "minimum": 1.0,
              "type": "integer",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Size",
              "maximum": 100.0,
              "minimum": 1.0,
              "type": "integer",
              "default": 50
            },
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_ConnectionSystemTypeMap_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "connection_type:read"
            ]
          }
        ]
      }
    },
    "/api/v1/connection_type/{connection_type}/secret": {
      "get": {
        "tags": [
          "Connection Types"
        ],
        "summary": "Get Connection Type Secret Schema",
        "description": "Returns the secret fields that should be supplied to authenticate with a particular connection type\n\nNote that this endpoint should never return actual secrets, we return the *types* of secret fields needed\nto authenticate.",
        "operationId": "get_connection_type_secret_schema_api_v1_connection_type__connection_type__secret_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connection Type",
              "type": "string"
            },
            "name": "connection_type",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "connection_type:read"
            ]
          }
        ]
      }
    },
    "/api/v1/connection": {
      "get": {
        "tags": [
          "Connections"
        ],
        "summary": "Get Connections",
        "description": "Returns all connection configurations in the database.\nOptionally filter the key, name, and description with a search query param.\n\nCan also filter on disabled, connection_type, test_status, and system_type.\n\nConnection_type supports \"or\" filtering:\n?connection_type=postgres&connection_type=mongo will be translated\ninto an \"or\" query. This parameter can also be used to filter by specific\nSaaS connector types.",
        "operationId": "get_connections_api_v1_connection_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Search",
              "type": "string"
            },
            "name": "search",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Disabled",
              "type": "boolean"
            },
            "name": "disabled",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TestStatus"
            },
            "name": "test_status",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SystemType"
            },
            "name": "system_type",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Orphaned From System",
              "type": "boolean"
            },
            "name": "orphaned_from_system",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Connection Type",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "name": "connection_type",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Page",
              "minimum": 1.0,
              "type": "integer",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Size",
              "maximum": 100.0,
              "minimum": 1.0,
              "type": "integer",
              "default": 50
            },
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_ConnectionConfigurationResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "connection:read"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Connections"
        ],
        "summary": "Patch Connections",
        "description": "Given a list of connection config data elements, optionally containing the secrets,\ncreate or update corresponding ConnectionConfig objects or report failure\n\nIf the key in the payload exists, it will be used to update an existing ConnectionConfiguration.\nOtherwise, a new ConnectionConfiguration will be created for you.",
        "operationId": "patch_connections_api_v1_connection_patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Configs",
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateConnectionConfigurationWithSecrets"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkPutConnectionConfiguration"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "connection:create_or_update"
            ]
          }
        ]
      }
    },
    "/api/v1/connection/{connection_key}": {
      "get": {
        "tags": [
          "Connections"
        ],
        "summary": "Get Connection Detail",
        "description": "Returns connection configuration with matching key.",
        "operationId": "get_connection_detail_api_v1_connection__connection_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connection Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "connection_key",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionConfigurationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "connection:read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Connections"
        ],
        "summary": "Delete Connection",
        "description": "Removes the connection configuration with matching key.",
        "operationId": "delete_connection_api_v1_connection__connection_key__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connection Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "connection_key",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "connection:delete"
            ]
          }
        ]
      }
    },
    "/api/v1/connection/{connection_key}/secret": {
      "put": {
        "tags": [
          "Connections"
        ],
        "summary": "Put Connection Config Secrets",
        "description": "Update secrets that will be used to connect to a specified connection_type.\n\nThe specific secrets will be connection-dependent. For example, the components needed to connect to a Postgres DB\nwill differ from Dynamo DB.",
        "operationId": "put_connection_config_secrets_api_v1_connection__connection_key__secret_put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connection Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "connection_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Verify",
              "type": "boolean",
              "default": true
            },
            "name": "verify",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Unvalidated Secrets",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/MongoDBDocsSchema"
                  },
                  {
                    "$ref": "#/components/schemas/PostgreSQLDocsSchema"
                  },
                  {
                    "$ref": "#/components/schemas/MySQLDocsSchema"
                  },
                  {
                    "$ref": "#/components/schemas/RedshiftDocsSchema"
                  },
                  {
                    "$ref": "#/components/schemas/SnowflakeDocsSchema"
                  },
                  {
                    "$ref": "#/components/schemas/MSSQLDocsSchema"
                  },
                  {
                    "$ref": "#/components/schemas/MariaDBDocsSchema"
                  },
                  {
                    "$ref": "#/components/schemas/BigQueryDocsSchema"
                  },
                  {
                    "$ref": "#/components/schemas/SaaSSchema"
                  },
                  {
                    "$ref": "#/components/schemas/EmailDocsSchema"
                  },
                  {
                    "$ref": "#/components/schemas/ManualWebhookSchemaforDocs"
                  },
                  {
                    "$ref": "#/components/schemas/TimescaleDocsSchema"
                  },
                  {
                    "$ref": "#/components/schemas/FidesDocsSchema"
                  },
                  {
                    "$ref": "#/components/schemas/SovrnEmailDocsSchema"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestStatusMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "connection:create_or_update"
            ]
          }
        ]
      }
    },
    "/api/v1/connection/{connection_key}/test": {
      "get": {
        "tags": [
          "Connections"
        ],
        "summary": "Test Connection Config Secrets",
        "description": "Endpoint to test a connection at any time using the saved configuration secrets.",
        "operationId": "test_connection_config_secrets_api_v1_connection__connection_key__test_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connection Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "connection_key",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestStatusMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "connection:read"
            ]
          }
        ]
      }
    },
    "/api/v1/consent-request": {
      "post": {
        "tags": [
          "Consent"
        ],
        "summary": "Create Consent Request",
        "description": "Creates a verification code for the user to verify access to manage consent preferences.",
        "operationId": "create_consent_request_api_v1_consent_request_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Identity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsentRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/consent-request/{consent_request_id}/verify": {
      "post": {
        "tags": [
          "Consent"
        ],
        "summary": "Consent Request Verify",
        "description": "Verifies the verification code and returns the current consent preferences if successful.",
        "operationId": "consent_request_verify_api_v1_consent_request__consent_request_id__verify_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Consent Request Id",
              "type": "string"
            },
            "name": "consent_request_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerificationCode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsentPreferences"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/consent-request/{consent_request_id}/preferences": {
      "get": {
        "tags": [
          "Consent"
        ],
        "summary": "Get Consent Preferences No Id",
        "description": "Returns the current consent preferences if successful.",
        "operationId": "get_consent_preferences_no_id_api_v1_consent_request__consent_request_id__preferences_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Consent Request Id",
              "type": "string"
            },
            "name": "consent_request_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsentPreferences"
                }
              }
            },
            "consent": [
              {
                "data_use": "advertising",
                "data_use_description": "We may use some of your personal information for advertising performance analysis and audience modeling for ongoing advertising which may be interpreted as 'Data Sharing' under some regulations.",
                "opt_in": true,
                "highlight": false
              },
              {
                "data_use": "improve",
                "data_use_description": "We may use some of your personal information to collect analytics about how you use our products & services, in order to improve our service.",
                "opt_in": false
              }
            ]
          },
          "404": {
            "description": "Not Found",
            "detail": "Consent request not found"
          },
          "400": {
            "description": "Bad Request",
            "detail": "Retrieving consent preferences without identity verification is only supported with subject_identity_verification_required turned off."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Consent"
        ],
        "summary": "Set Consent Preferences",
        "description": "Verifies the verification code and saves the user's consent preferences if successful.",
        "operationId": "set_consent_preferences_api_v1_consent_request__consent_request_id__preferences_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Consent Request Id",
              "type": "string"
            },
            "name": "consent_request_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConsentPreferencesWithVerificationCode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsentPreferences"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/consent-request/preferences": {
      "post": {
        "tags": [
          "Consent"
        ],
        "summary": "Get Consent Preferences",
        "description": "Gets the consent preferences for the specified user.",
        "operationId": "get_consent_preferences_api_v1_consent_request_preferences_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Identity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsentPreferences"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "consent:read"
            ]
          }
        ]
      }
    },
    "/api/v1/connection/{connection_key}/validate_dataset": {
      "put": {
        "tags": [
          "Dataset Configs"
        ],
        "summary": "Validate Dataset",
        "description": "Run validations against a dataset without attempting to save it to the database.\n\nChecks that:\n- all required fields are present, all field values are valid types\n- all DataCategory values reference known keys\n- etc.\n\nAfter validating, also tests to see if the dataset is traversable. Note that\nit's possible for a dataset to be valid but not traversable; this happens\nwhen a dataset is dependent on references to other datasets.\n\nReturns a 200 OK for all valid datasets, and a traversal_details object with\ninformation about the traversal (or traversal errors).",
        "operationId": "validate_dataset_api_v1_connection__connection_key__validate_dataset_put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connection Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "connection_key",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Dataset"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateDatasetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "dataset:read"
            ]
          }
        ]
      }
    },
    "/api/v1/connection/{connection_key}/datasetconfig": {
      "get": {
        "tags": [
          "Dataset Configs"
        ],
        "summary": "Get Dataset Configs",
        "description": "Returns all Dataset Configs attached to current Connection Config.",
        "operationId": "get_dataset_configs_api_v1_connection__connection_key__datasetconfig_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connection Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "connection_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Page",
              "minimum": 1.0,
              "type": "integer",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Size",
              "maximum": 100.0,
              "minimum": 1.0,
              "type": "integer",
              "default": 50
            },
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_DatasetConfigSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "dataset:read"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Dataset Configs"
        ],
        "summary": "Patch Dataset Configs",
        "description": "Endpoint to create or update DatasetConfigs by passing in pairs of:\n1) A DatasetConfig fides_key\n2) The corresponding CtlDataset fides_key which stores the bulk of the actual dataset\n\nThe CtlDataset contents are retrieved for extra validation before linking this\nto the DatasetConfig.",
        "operationId": "patch_dataset_configs_api_v1_connection__connection_key__datasetconfig_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connection Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "connection_key",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Dataset Pairs",
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DatasetConfigCtlDataset"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkPutDataset"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "dataset:create_or_update"
            ]
          }
        ]
      }
    },
    "/api/v1/connection/{connection_key}/dataset": {
      "get": {
        "tags": [
          "Dataset Configs"
        ],
        "summary": "Get Datasets",
        "description": "Returns all CTL datasets attached to the ConnectionConfig via the Dataset Config.\n\nSoon to be deprecated.",
        "operationId": "get_datasets_api_v1_connection__connection_key__dataset_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connection Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "connection_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Page",
              "minimum": 1.0,
              "type": "integer",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Size",
              "maximum": 100.0,
              "minimum": 1.0,
              "type": "integer",
              "default": 50
            },
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_Dataset_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "dataset:read"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Dataset Configs"
        ],
        "summary": "Patch Datasets",
        "description": "Given a list of dataset elements, create or update corresponding Dataset objects\nor report failure\n\nThis endpoint upserts the DatasetConfig and associated CTL Dataset.  Will shortly be deprecated.\n\nIf the fides_key for a given DatasetConfig exists, it will be treated as an update.\nOtherwise, a new DatasetConfig will be created.",
        "operationId": "patch_datasets_api_v1_connection__connection_key__dataset_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connection Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "connection_key",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Datasets",
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Dataset"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkPutDataset"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "dataset:create_or_update"
            ]
          }
        ]
      }
    },
    "/api/v1/connection/{connection_key}/dataset/{fides_key}": {
      "get": {
        "tags": [
          "Dataset Configs"
        ],
        "summary": "Get Dataset",
        "description": "Returns a single ctl dataset linked to the given DatasetConfig.\n\nSoon to be deprecated",
        "operationId": "get_dataset_api_v1_connection__connection_key__dataset__fides_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Connection Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "connection_key",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dataset"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "dataset:read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Dataset Configs"
        ],
        "summary": "Delete Dataset",
        "description": "Removes the DatasetConfig based on the given key.",
        "operationId": "delete_dataset_api_v1_connection__connection_key__dataset__fides_key__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Connection Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "connection_key",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "dataset:delete"
            ]
          }
        ]
      }
    },
    "/api/v1/connection/{connection_key}/datasetconfig/{fides_key}": {
      "get": {
        "tags": [
          "Dataset Configs"
        ],
        "summary": "Get Dataset Config",
        "description": "Returns the specific Dataset Config linked to the Connection Config.",
        "operationId": "get_dataset_config_api_v1_connection__connection_key__datasetconfig__fides_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Fides Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "fides_key",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Connection Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "connection_key",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetConfigSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "dataset:read"
            ]
          }
        ]
      }
    },
    "/api/v1/drp/exercise": {
      "post": {
        "tags": [
          "DRP"
        ],
        "summary": "Create Drp Privacy Request",
        "description": "Given a drp privacy request body, create and execute\na corresponding Fidesops PrivacyRequest",
        "operationId": "create_drp_privacy_request_api_v1_drp_exercise_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DrpPrivacyRequestCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivacyRequestDRPStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/drp/status": {
      "get": {
        "tags": [
          "DRP"
        ],
        "summary": "Get Request Status Drp",
        "description": "Returns PrivacyRequest information where the respective privacy request is associated with\na policy that implements a Data Rights Protocol action.",
        "operationId": "get_request_status_drp_api_v1_drp_status_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Request Id",
              "type": "string"
            },
            "name": "request_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivacyRequestDRPStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "privacy-request:read"
            ]
          }
        ]
      }
    },
    "/api/v1/drp/data-rights": {
      "get": {
        "tags": [
          "DRP"
        ],
        "summary": "Get Drp Data Rights",
        "description": "Query all policies and determine the list of DRP actions that are attached to existing policies.",
        "operationId": "get_drp_data_rights_api_v1_drp_data_rights_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DrpDataRightsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "policy:read"
            ]
          }
        ]
      }
    },
    "/api/v1/drp/revoke": {
      "post": {
        "tags": [
          "DRP"
        ],
        "summary": "Revoke Request",
        "description": "Revoke a pending privacy request.",
        "operationId": "revoke_request_api_v1_drp_revoke_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DrpRevokeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivacyRequestDRPStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "privacy-request:review"
            ]
          }
        ]
      }
    },
    "/api/v1/cryptography/encryption/key": {
      "get": {
        "tags": [
          "Encryption"
        ],
        "summary": "Get Encryption Key",
        "operationId": "get_encryption_key_api_v1_cryptography_encryption_key_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Encryption Key Api V1 Cryptography Encryption Key Get",
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "encryption:exec"
            ]
          }
        ]
      }
    },
    "/api/v1/cryptography/encryption/aes/encrypt": {
      "put": {
        "tags": [
          "Encryption"
        ],
        "summary": "Aes Encrypt",
        "operationId": "aes_encrypt_api_v1_cryptography_encryption_aes_encrypt_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AesEncryptionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AesEncryptionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "encryption:exec"
            ]
          }
        ]
      }
    },
    "/api/v1/cryptography/encryption/aes/decrypt": {
      "put": {
        "tags": [
          "Encryption"
        ],
        "summary": "Aes Decrypt",
        "operationId": "aes_decrypt_api_v1_cryptography_encryption_aes_decrypt_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AesDecryptionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AesDecryptionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "encryption:exec"
            ]
          }
        ]
      }
    },
    "/api/v1/masking/mask": {
      "put": {
        "tags": [
          "Masking"
        ],
        "summary": "Mask Value",
        "description": "Masks the value(s) provided using the provided masking strategy",
        "operationId": "mask_value_api_v1_masking_mask_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MaskingAPIRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaskingAPIResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/masking/strategy": {
      "get": {
        "tags": [
          "Masking"
        ],
        "summary": "List Masking Strategies",
        "description": "Lists available masking strategies with instructions on how to use them",
        "operationId": "list_masking_strategies_api_v1_masking_strategy_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Masking Strategies Api V1 Masking Strategy Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MaskingStrategyDescription"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/oauth/token": {
      "post": {
        "tags": [
          "OAuth"
        ],
        "summary": "Acquire Access Token",
        "description": "Returns an access token if given credentials are correct, raises 401\nexception if not",
        "operationId": "acquire_access_token_api_v1_oauth_token_post",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_acquire_access_token_api_v1_oauth_token_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/oauth/client": {
      "post": {
        "tags": [
          "OAuth"
        ],
        "summary": "Create Client",
        "description": "Creates a new client and returns the credentials. Only direct scopes can be added to the client via this endpoint.",
        "operationId": "create_client_api_v1_oauth_client_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Scopes",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "default": []
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientCreatedResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "client:create"
            ]
          }
        ]
      }
    },
    "/api/v1/oauth/client/{client_id}": {
      "delete": {
        "tags": [
          "OAuth"
        ],
        "summary": "Delete Client",
        "description": "Deletes the client associated with the client_id. Does nothing if the client does\nnot exist",
        "operationId": "delete_client_api_v1_oauth_client__client_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Client Id",
              "type": "string"
            },
            "name": "client_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "client:delete"
            ]
          }
        ]
      }
    },
    "/api/v1/oauth/client/{client_id}/scope": {
      "get": {
        "tags": [
          "OAuth"
        ],
        "summary": "Get Client Scopes",
        "description": "Returns a list of the directly-assigned scopes associated with the client.\nDoes not return roles associated with the client.\nReturns an empty list if client does not exist.",
        "operationId": "get_client_scopes_api_v1_oauth_client__client_id__scope_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Client Id",
              "type": "string"
            },
            "name": "client_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Client Scopes Api V1 Oauth Client  Client Id  Scope Get",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "client:read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "OAuth"
        ],
        "summary": "Set Client Scopes",
        "description": "Overwrites the client's directly-assigned scopes with those provided.\nRoles cannot be edited via this endpoint.\nDoes nothing if the client doesn't exist",
        "operationId": "set_client_scopes_api_v1_oauth_client__client_id__scope_put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Client Id",
              "type": "string"
            },
            "name": "client_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Scopes",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "client:update"
            ]
          }
        ]
      }
    },
    "/api/v1/oauth/scope": {
      "get": {
        "tags": [
          "OAuth"
        ],
        "summary": "Read Scopes",
        "description": "Returns a list of all scopes available for assignment in the system",
        "operationId": "read_scopes_api_v1_oauth_scope_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Read Scopes Api V1 Oauth Scope Get",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "scope:read"
            ]
          }
        ]
      }
    },
    "/api/v1/oauth/role": {
      "get": {
        "tags": [
          "OAuth"
        ],
        "summary": "Read Roles To Scopes Mapping",
        "description": "Returns a list of all roles and associated scopes available for assignment in the system",
        "operationId": "read_roles_to_scopes_mapping_api_v1_oauth_role_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "scope:read"
            ]
          }
        ]
      }
    },
    "/api/v1/oauth/callback": {
      "get": {
        "tags": [
          "OAuth"
        ],
        "summary": "Oauth Callback",
        "description": "Uses the passed in code to generate the token access request\nfor the connection associated with the given state.",
        "operationId": "oauth_callback_api_v1_oauth_callback_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Code",
              "type": "string"
            },
            "name": "code",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "State",
              "type": "string"
            },
            "name": "state",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/dsr/policy": {
      "get": {
        "tags": [
          "DSR Policy"
        ],
        "summary": "Get Policy List",
        "description": "Return a paginated list of all Policy records in this system",
        "operationId": "get_policy_list_api_v1_dsr_policy_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Page",
              "minimum": 1.0,
              "type": "integer",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Size",
              "maximum": 100.0,
              "minimum": 1.0,
              "type": "integer",
              "default": 50
            },
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_PolicyResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "policy:read"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "DSR Policy"
        ],
        "summary": "Create Or Update Policies",
        "description": "Given a list of policy data elements, create or update corresponding Policy objects\nor report failure",
        "operationId": "create_or_update_policies_api_v1_dsr_policy_patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Data",
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/fides__api__ops__schemas__policy__Policy"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkPutPolicyResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "policy:create_or_update"
            ]
          }
        ]
      }
    },
    "/api/v1/dsr/policy/{policy_key}": {
      "get": {
        "tags": [
          "DSR Policy"
        ],
        "summary": "Get Policy",
        "description": "Return a single Policy",
        "operationId": "get_policy_api_v1_dsr_policy__policy_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Policy Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "policy_key",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "policy:read"
            ]
          }
        ]
      }
    },
    "/api/v1/dsr/policy/{policy_key}/rule": {
      "get": {
        "tags": [
          "DSR Policy"
        ],
        "summary": "Get Rule List",
        "description": "Return a paginated list of all `Rule` records associated with the given `Policy`.\nThrows a 404 if the given `Policy` can't be found.",
        "operationId": "get_rule_list_api_v1_dsr_policy__policy_key__rule_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Policy Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "policy_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Page",
              "minimum": 1.0,
              "type": "integer",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Size",
              "maximum": 100.0,
              "minimum": 1.0,
              "type": "integer",
              "default": 50
            },
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_RuleResponseWithTargets_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "rule:read"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "DSR Policy"
        ],
        "summary": "Create Or Update Rules",
        "description": "Given a list of Rule data elements, create or update corresponding Rule objects\nor report failure",
        "operationId": "create_or_update_rules_api_v1_dsr_policy__policy_key__rule_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Policy Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "policy_key",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Input Data",
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RuleCreate"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkPutRuleResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "rule:create_or_update"
            ]
          }
        ]
      }
    },
    "/api/v1/dsr/policy/{policy_key}/rule/{rule_key}": {
      "get": {
        "tags": [
          "DSR Policy"
        ],
        "summary": "Get Rule",
        "description": "Return a single `Rule` with the given key, associated with the given `Policy`",
        "operationId": "get_rule_api_v1_dsr_policy__policy_key__rule__rule_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Policy Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "policy_key",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Rule Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "rule_key",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleResponseWithTargets"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "rule:read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "DSR Policy"
        ],
        "summary": "Delete Rule",
        "description": "Delete a policy rule.",
        "operationId": "delete_rule_api_v1_dsr_policy__policy_key__rule__rule_key__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Policy Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "policy_key",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Rule Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "rule_key",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "rule:delete"
            ]
          }
        ]
      }
    },
    "/api/v1/dsr/policy/{policy_key}/rule/{rule_key}/target": {
      "get": {
        "tags": [
          "DSR Policy"
        ],
        "summary": "Get Rule Target List",
        "description": "Return a paginated list of all `Rule Target` records associated with the given `Rule`\nThrows a 404 if the given `Rule` or `Policy` can't be found.",
        "operationId": "get_rule_target_list_api_v1_dsr_policy__policy_key__rule__rule_key__target_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Policy Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "policy_key",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Rule Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "rule_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Page",
              "minimum": 1.0,
              "type": "integer",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Size",
              "maximum": 100.0,
              "minimum": 1.0,
              "type": "integer",
              "default": 50
            },
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_RuleTarget_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "rule:read"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "DSR Policy"
        ],
        "summary": "Create Or Update Rule Targets",
        "description": "Given a list of Rule data elements, create corresponding Rule objects\nor report failure",
        "operationId": "create_or_update_rule_targets_api_v1_dsr_policy__policy_key__rule__rule_key__target_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Policy Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "policy_key",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Rule Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "rule_key",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Input Data",
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RuleTarget"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkPutRuleTargetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "rule:create_or_update"
            ]
          }
        ]
      }
    },
    "/api/v1/dsr/policy/{policy_key}/rule/{rule_key}/target/{rule_target_key}": {
      "get": {
        "tags": [
          "DSR Policy"
        ],
        "summary": "Get Rule Target",
        "description": "Return a single `Rule Target` associated with the given `Rule` and `Policy`",
        "operationId": "get_rule_target_api_v1_dsr_policy__policy_key__rule__rule_key__target__rule_target_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Policy Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "policy_key",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Rule Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "rule_key",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Rule Target Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "rule_target_key",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleTarget"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "rule:read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "DSR Policy"
        ],
        "summary": "Delete Rule Target",
        "description": "Delete the rule target.",
        "operationId": "delete_rule_target_api_v1_dsr_policy__policy_key__rule__rule_key__target__rule_target_key__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Policy Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "policy_key",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Rule Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "rule_key",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Rule Target Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "rule_target_key",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "rule:delete"
            ]
          }
        ]
      }
    },
    "/api/v1/dsr/policy/{policy_key}/webhook/pre_execution": {
      "get": {
        "tags": [
          "DSR Policy Webhooks"
        ],
        "summary": "Get Policy Pre Execution Webhooks",
        "description": "Return a paginated list of all Pre-Execution Webhooks that will\nrun in order for the Policy **before** a Privacy Request is executed.",
        "operationId": "get_policy_pre_execution_webhooks_api_v1_dsr_policy__policy_key__webhook_pre_execution_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Policy Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "policy_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Page",
              "minimum": 1.0,
              "type": "integer",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Size",
              "maximum": 100.0,
              "minimum": 1.0,
              "type": "integer",
              "default": 50
            },
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_PolicyWebhookResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "webhook:read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "DSR Policy Webhooks"
        ],
        "summary": "Create Or Update Pre Execution Webhooks",
        "description": "Create or update the list of Policy Pre-Execution Webhooks that run **before** query execution.\n\nAll webhooks must be included in the request in the desired order. Any missing webhooks\nfrom the request body will be removed.",
        "operationId": "create_or_update_pre_execution_webhooks_api_v1_dsr_policy__policy_key__webhook_pre_execution_put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Policy Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "policy_key",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Webhooks",
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyWebhookCreate"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Create Or Update Pre Execution Webhooks Api V1 Dsr Policy  Policy Key  Webhook Pre Execution Put",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyWebhookResponse"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "webhook:create_or_update"
            ]
          }
        ]
      }
    },
    "/api/v1/dsr/policy/{policy_key}/webhook/post_execution": {
      "get": {
        "tags": [
          "DSR Policy Webhooks"
        ],
        "summary": "Get Policy Post Execution Webhooks",
        "description": "Return a paginated list of all Post-Execution Webhooks that will run in order for the Policy **after** a\nPrivacy Request is executed.",
        "operationId": "get_policy_post_execution_webhooks_api_v1_dsr_policy__policy_key__webhook_post_execution_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Policy Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "policy_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Page",
              "minimum": 1.0,
              "type": "integer",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Size",
              "maximum": 100.0,
              "minimum": 1.0,
              "type": "integer",
              "default": 50
            },
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_PolicyWebhookResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "webhook:read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "DSR Policy Webhooks"
        ],
        "summary": "Create Or Update Post Execution Webhooks",
        "description": "Create or update the list of Policy Post-Execution Webhooks that run **after** query execution.\n\nAll webhooks must be included in the request in the desired order. Any missing webhooks\nfrom the request body will be removed.",
        "operationId": "create_or_update_post_execution_webhooks_api_v1_dsr_policy__policy_key__webhook_post_execution_put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Policy Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "policy_key",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Webhooks",
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyWebhookCreate"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Create Or Update Post Execution Webhooks Api V1 Dsr Policy  Policy Key  Webhook Post Execution Put",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyWebhookResponse"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "webhook:create_or_update"
            ]
          }
        ]
      }
    },
    "/api/v1/dsr/policy/{policy_key}/webhook/pre_execution/{pre_webhook_key}": {
      "get": {
        "tags": [
          "DSR Policy Webhooks"
        ],
        "summary": "Get Policy Pre Execution Webhook",
        "description": "Loads the given Pre-Execution Webhook on the Policy",
        "operationId": "get_policy_pre_execution_webhook_api_v1_dsr_policy__policy_key__webhook_pre_execution__pre_webhook_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Policy Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "policy_key",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Pre Webhook Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "pre_webhook_key",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyWebhookResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "webhook:read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "DSR Policy Webhooks"
        ],
        "summary": "Delete Pre Execution Webhook",
        "description": "Delete the Pre-Execution Webhook from the Policy and reorder remaining webhooks as necessary.",
        "operationId": "delete_pre_execution_webhook_api_v1_dsr_policy__policy_key__webhook_pre_execution__pre_webhook_key__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Policy Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "policy_key",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Pre Webhook Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "pre_webhook_key",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyWebhookDeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "webhook:delete"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "DSR Policy Webhooks"
        ],
        "summary": "Update Pre Execution Webhook",
        "description": "PATCH a single Policy Pre-Execution Webhook that runs **prior** to executing the Privacy Request.\n\nNote that updates to the webhook's \"order\" can affect the order of the other pre-execution webhooks.",
        "operationId": "update_pre_execution_webhook_api_v1_dsr_policy__policy_key__webhook_pre_execution__pre_webhook_key__patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Policy Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "policy_key",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Pre Webhook Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "pre_webhook_key",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyWebhookUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyWebhookUpdateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "webhook:create_or_update"
            ]
          }
        ]
      }
    },
    "/api/v1/dsr/policy/{policy_key}/webhook/post_execution/{post_webhook_key}": {
      "get": {
        "tags": [
          "DSR Policy Webhooks"
        ],
        "summary": "Get Policy Post Execution Webhook",
        "description": "Loads the given Post-Execution Webhook on the Policy",
        "operationId": "get_policy_post_execution_webhook_api_v1_dsr_policy__policy_key__webhook_post_execution__post_webhook_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Policy Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "policy_key",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Post Webhook Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "post_webhook_key",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyWebhookResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "webhook:read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "DSR Policy Webhooks"
        ],
        "summary": "Delete Post Execution Webhook",
        "description": "Delete the Post-Execution Webhook from the Policy and reorder remaining webhooks as necessary.",
        "operationId": "delete_post_execution_webhook_api_v1_dsr_policy__policy_key__webhook_post_execution__post_webhook_key__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Policy Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "policy_key",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Post Webhook Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "post_webhook_key",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyWebhookDeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "webhook:delete"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "DSR Policy Webhooks"
        ],
        "summary": "Update Post Execution Webhook",
        "description": "PATCH a single Policy Post-Execution Webhook that runs **after** executing the Privacy Request.\n\nNote that updates to the webhook's \"order\" can affect the order of the other post-execution webhooks.",
        "operationId": "update_post_execution_webhook_api_v1_dsr_policy__policy_key__webhook_post_execution__post_webhook_key__patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Policy Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "policy_key",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Post Webhook Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "post_webhook_key",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyWebhookUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyWebhookUpdateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "webhook:create_or_update"
            ]
          }
        ]
      }
    },
    "/api/v1/privacy-request": {
      "get": {
        "tags": [
          "Privacy Requests"
        ],
        "summary": "Get Request Status",
        "description": "Returns PrivacyRequest information. Supports a variety of optional query params.\n\nTo fetch a single privacy request, use the request_id query param `?request_id=`.\nTo see individual execution logs, use the verbose query param `?verbose=True`.",
        "operationId": "get_request_status_api_v1_privacy_request_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Request Id",
              "type": "string"
            },
            "name": "request_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Identity",
              "type": "string"
            },
            "name": "identity",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PrivacyRequestStatus"
              }
            },
            "name": "status",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Created Lt",
              "type": "string",
              "format": "date-time"
            },
            "name": "created_lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Created Gt",
              "type": "string",
              "format": "date-time"
            },
            "name": "created_gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Started Lt",
              "type": "string",
              "format": "date-time"
            },
            "name": "started_lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Started Gt",
              "type": "string",
              "format": "date-time"
            },
            "name": "started_gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Completed Lt",
              "type": "string",
              "format": "date-time"
            },
            "name": "completed_lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Completed Gt",
              "type": "string",
              "format": "date-time"
            },
            "name": "completed_gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Errored Lt",
              "type": "string",
              "format": "date-time"
            },
            "name": "errored_lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Errored Gt",
              "type": "string",
              "format": "date-time"
            },
            "name": "errored_gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "External Id",
              "type": "string"
            },
            "name": "external_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Verbose",
              "type": "boolean",
              "default": false
            },
            "name": "verbose",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Include Identities",
              "type": "boolean",
              "default": false
            },
            "name": "include_identities",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Download Csv",
              "type": "boolean",
              "default": false
            },
            "name": "download_csv",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Sort Field",
              "type": "string",
              "default": "created_at"
            },
            "name": "sort_field",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ColumnSort"
                }
              ],
              "default": "desc"
            },
            "name": "sort_direction",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Page",
              "minimum": 1.0,
              "type": "integer",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Size",
              "maximum": 100.0,
              "minimum": 1.0,
              "type": "integer",
              "default": 50
            },
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_Union_PrivacyRequestVerboseResponse__PrivacyRequestResponse__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "privacy-request:read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Privacy Requests"
        ],
        "summary": "Create Privacy Request",
        "description": "Given a list of privacy request data elements, create corresponding PrivacyRequest objects\nor report failure and execute them within the Fidesops system.\nYou cannot update privacy requests after they've been created.",
        "operationId": "create_privacy_request_api_v1_privacy_request_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Data",
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PrivacyRequestCreate"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkPostPrivacyRequests"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/privacy-request/authenticated": {
      "post": {
        "tags": [
          "Privacy Requests"
        ],
        "summary": "Create Privacy Request Authenticated",
        "description": "Given a list of privacy request data elements, create corresponding PrivacyRequest objects\nor report failure and execute them within the Fidesops system.\nYou cannot update privacy requests after they've been created.\nThis route requires authentication instead of using verification codes.",
        "operationId": "create_privacy_request_authenticated_api_v1_privacy_request_authenticated_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Data",
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PrivacyRequestCreate"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkPostPrivacyRequests"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "privacy-request:create"
            ]
          }
        ]
      }
    },
    "/api/v1/privacy-request/{privacy_request_id}/log": {
      "get": {
        "tags": [
          "Privacy Requests"
        ],
        "summary": "Get Request Status Logs",
        "description": "Returns all the execution logs associated with a given privacy request ordered by updated asc.",
        "operationId": "get_request_status_logs_api_v1_privacy_request__privacy_request_id__log_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Privacy Request Id",
              "type": "string"
            },
            "name": "privacy_request_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Page",
              "minimum": 1.0,
              "type": "integer",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Size",
              "maximum": 100.0,
              "minimum": 1.0,
              "type": "integer",
              "default": 50
            },
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_ExecutionLogDetailResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "privacy-request:read"
            ]
          }
        ]
      }
    },
    "/api/v1/privacy-request/notification": {
      "get": {
        "tags": [
          "Privacy Requests"
        ],
        "summary": "Get Privacy Request Notification Info",
        "description": "Retrieve privacy request notification email addresses and number of failures to trigger notifications.",
        "operationId": "get_privacy_request_notification_info_api_v1_privacy_request_notification_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivacyRequestNotificationInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "privacy-request-notifications:read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Privacy Requests"
        ],
        "summary": "Create Or Update Privacy Request Notifications",
        "description": "Create or update list of email addresses and number of failures for privacy request notifications.",
        "operationId": "create_or_update_privacy_request_notifications_api_v1_privacy_request_notification_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrivacyRequestNotificationInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivacyRequestNotificationInfo"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "privacy-request-notifications:create_or_update"
            ]
          }
        ]
      }
    },
    "/api/v1/privacy-request/preview": {
      "put": {
        "tags": [
          "Privacy Requests"
        ],
        "summary": "Get Request Preview Queries",
        "description": "Returns dry run queries given a list of dataset ids.  If a dataset references another dataset, both dataset\nkeys must be in the request body.",
        "operationId": "get_request_preview_queries_api_v1_privacy_request_preview_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Dataset Keys",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Request Preview Queries Api V1 Privacy Request Preview Put",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DryRunDatasetResponse"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "privacy-request:read"
            ]
          }
        ]
      }
    },
    "/api/v1/privacy-request/{privacy_request_id}/resume": {
      "post": {
        "tags": [
          "Privacy Requests"
        ],
        "summary": "Resume Privacy Request",
        "description": "Resume running a privacy request after it was paused by a Pre-Execution webhook",
        "operationId": "resume_privacy_request_api_v1_privacy_request__privacy_request_id__resume_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Privacy Request Id",
              "type": "string"
            },
            "name": "privacy_request_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrivacyRequestResumeFormat"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivacyRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "privacy-request:resume"
            ]
          }
        ]
      }
    },
    "/api/v1/privacy-request/{privacy_request_id}/manual_input": {
      "post": {
        "tags": [
          "Privacy Requests"
        ],
        "summary": "Resume With Manual Input",
        "description": "Resume a privacy request by passing in manual input for the paused collection.\n\nIf there's no manual data to submit, pass in an empty list to resume the privacy request.",
        "operationId": "resume_with_manual_input_api_v1_privacy_request__privacy_request_id__manual_input_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Privacy Request Id",
              "type": "string"
            },
            "name": "privacy_request_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Manual Rows",
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivacyRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "privacy-request:resume"
            ]
          }
        ]
      }
    },
    "/api/v1/privacy-request/{privacy_request_id}/erasure_confirm": {
      "post": {
        "tags": [
          "Privacy Requests"
        ],
        "summary": "Resume With Erasure Confirmation",
        "description": "Resume the erasure portion of privacy request by passing in the number of rows that were manually masked.\n\nIf no rows were masked, pass in a 0 to resume the privacy request.",
        "operationId": "resume_with_erasure_confirmation_api_v1_privacy_request__privacy_request_id__erasure_confirm_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Privacy Request Id",
              "type": "string"
            },
            "name": "privacy_request_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RowCountRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivacyRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "privacy-request:resume"
            ]
          }
        ]
      }
    },
    "/api/v1/privacy-request/bulk/retry": {
      "post": {
        "tags": [
          "Privacy Requests"
        ],
        "summary": "Bulk Restart Privacy Request From Failure",
        "description": "Bulk restart a of privacy request from failure.",
        "operationId": "bulk_restart_privacy_request_from_failure_api_v1_privacy_request_bulk_retry_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Privacy Request Ids",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkPostPrivacyRequests"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "privacy-request:resume"
            ]
          }
        ]
      }
    },
    "/api/v1/privacy-request/{privacy_request_id}/retry": {
      "post": {
        "tags": [
          "Privacy Requests"
        ],
        "summary": "Restart Privacy Request From Failure",
        "description": "Restart a privacy request from failure",
        "operationId": "restart_privacy_request_from_failure_api_v1_privacy_request__privacy_request_id__retry_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Privacy Request Id",
              "type": "string"
            },
            "name": "privacy_request_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivacyRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "privacy-request:resume"
            ]
          }
        ]
      }
    },
    "/api/v1/privacy-request/{privacy_request_id}/verify": {
      "post": {
        "tags": [
          "Privacy Requests"
        ],
        "summary": "Verify Identification Code",
        "description": "Verify the supplied identity verification code.\n\nIf successful, and we don't need separate manual request approval, queue the privacy request\nfor execution.",
        "operationId": "verify_identification_code_api_v1_privacy_request__privacy_request_id__verify_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Privacy Request Id",
              "type": "string"
            },
            "name": "privacy_request_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerificationCode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivacyRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/privacy-request/administrate/approve": {
      "patch": {
        "tags": [
          "Privacy Requests"
        ],
        "summary": "Approve Privacy Request",
        "description": "Approve and dispatch a list of privacy requests and/or report failure",
        "operationId": "approve_privacy_request_api_v1_privacy_request_administrate_approve_patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewPrivacyRequestIds"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkReviewResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "privacy-request:review"
            ]
          }
        ]
      }
    },
    "/api/v1/privacy-request/administrate/deny": {
      "patch": {
        "tags": [
          "Privacy Requests"
        ],
        "summary": "Deny Privacy Request",
        "description": "Deny a list of privacy requests and/or report failure",
        "operationId": "deny_privacy_request_api_v1_privacy_request_administrate_deny_patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DenyPrivacyRequests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkReviewResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "privacy-request:review"
            ]
          }
        ]
      }
    },
    "/api/v1/privacy-request/{privacy_request_id}/access_manual_webhook/{connection_key}": {
      "get": {
        "tags": [
          "Privacy Requests"
        ],
        "summary": "View Uploaded Manual Webhook Data",
        "description": "View uploaded data for this privacy request for the given access manual webhook\n\nIf no data exists for this webhook, we just return all fields as None.\nIf we have missing or extra fields saved, we'll just return the overlap between what is saved and what is defined on the webhook.\n\nIf checked=False, data must be reviewed before submission. The privacy request should not be submitted as-is.",
        "operationId": "view_uploaded_manual_webhook_data_api_v1_privacy_request__privacy_request_id__access_manual_webhook__connection_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Privacy Request Id",
              "type": "string"
            },
            "name": "privacy_request_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Connection Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "connection_key",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManualWebhookData"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "privacy-request:view_data"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Privacy Requests"
        ],
        "summary": "Upload Manual Webhook Data",
        "description": "Upload manual input for the privacy request for the fields defined on the access manual webhook.\nThe data collected here is not included in the graph but uploaded directly to the user at the end\nof privacy request execution.\n\nBecause a 'manual_webhook' ConnectionConfig has one AccessManualWebhook associated with it,\nwe are using the ConnectionConfig key as the AccessManualWebhook identifier here.",
        "operationId": "upload_manual_webhook_data_api_v1_privacy_request__privacy_request_id__access_manual_webhook__connection_key__patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Privacy Request Id",
              "type": "string"
            },
            "name": "privacy_request_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Connection Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "connection_key",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Input Data",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "privacy-request:upload_data"
            ]
          }
        ]
      }
    },
    "/api/v1/privacy-request/transfer/{privacy_request_id}/{rule_key}": {
      "get": {
        "tags": [
          "Privacy Requests"
        ],
        "summary": "Privacy Request Data Transfer",
        "description": "Transfer access request iinformation to the parent server.",
        "operationId": "privacy_request_data_transfer_api_v1_privacy_request_transfer__privacy_request_id___rule_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Privacy Request Id",
              "type": "string"
            },
            "name": "privacy_request_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Rule Key",
              "type": "string"
            },
            "name": "rule_key",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Privacy Request Data Transfer Api V1 Privacy Request Transfer  Privacy Request Id   Rule Key  Get",
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "privacy-request:transfer"
            ]
          }
        ]
      }
    },
    "/api/v1/privacy-request/{privacy_request_id}/resume_from_requires_input": {
      "post": {
        "tags": [
          "Privacy Requests"
        ],
        "summary": "Resume Privacy Request From Requires Input",
        "description": "Resume a privacy request from 'requires_input' status.",
        "operationId": "resume_privacy_request_from_requires_input_api_v1_privacy_request__privacy_request_id__resume_from_requires_input_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Privacy Request Id",
              "type": "string"
            },
            "name": "privacy_request_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivacyRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "privacy-request:resume"
            ]
          }
        ]
      }
    },
    "/api/v1/id-verification/config": {
      "get": {
        "tags": [
          "Identity Verification"
        ],
        "summary": "Get Id Verification Config",
        "description": "Returns id verification config.",
        "operationId": "get_id_verification_config_api_v1_id_verification_config_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityVerificationConfigResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/storage/{request_id}": {
      "post": {
        "tags": [
          "Storage"
        ],
        "summary": "Upload Data",
        "description": "Uploads data from an access request to specified storage destination.\nReturns location of data.",
        "operationId": "upload_data_api_v1_storage__request_id__post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Request Id",
              "type": "string"
            },
            "name": "request_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_data_api_v1_storage__request_id__post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataUpload"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "storage:create_or_update"
            ]
          }
        ]
      }
    },
    "/api/v1/storage/config": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "Get Configs",
        "description": "Retrieves configs for storage.",
        "operationId": "get_configs_api_v1_storage_config_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Page",
              "minimum": 1.0,
              "type": "integer",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Size",
              "maximum": 100.0,
              "minimum": 1.0,
              "type": "integer",
              "default": 50
            },
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_StorageDestinationResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "storage:read"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Storage"
        ],
        "summary": "Patch Config",
        "description": "Given a list of storage destination elements, create or update corresponding StorageConfig objects\nor report failure.",
        "operationId": "patch_config_api_v1_storage_config_patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Storage Configs",
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StorageDestination"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkPutStorageConfigResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "storage:create_or_update"
            ]
          }
        ]
      }
    },
    "/api/v1/storage/config/{config_key}/secret": {
      "put": {
        "tags": [
          "Storage"
        ],
        "summary": "Put Config Secrets",
        "description": "Add or update secrets for storage config.",
        "operationId": "put_config_secrets_api_v1_storage_config__config_key__secret_put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Config Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "config_key",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Verify",
              "type": "boolean",
              "default": true
            },
            "name": "verify",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorageSecretsS3Docs"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestStatusMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "storage:create_or_update"
            ]
          }
        ]
      }
    },
    "/api/v1/storage/config/{config_key}": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "Get Config By Key",
        "description": "Retrieves configs for storage by key.",
        "operationId": "get_config_by_key_api_v1_storage_config__config_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Config Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "config_key",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageDestinationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "storage:read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Storage"
        ],
        "summary": "Delete Config By Key",
        "description": "Deletes configs by key.",
        "operationId": "delete_config_by_key_api_v1_storage_config__config_key__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Config Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "config_key",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "storage:delete"
            ]
          }
        ]
      }
    },
    "/api/v1/storage/default/active": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "Get Active Default Config",
        "description": "Retrieves the active default storage config.",
        "operationId": "get_active_default_config_api_v1_storage_default_active_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageDestinationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "storage:read"
            ]
          }
        ]
      }
    },
    "/api/v1/storage/default/status": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "Get Storage Status",
        "description": "Determines the status of the active default storage config.\n\nIn order to be considered fully configured, the active default storage\nconfig MUST be an s3 storage config.",
        "operationId": "get_storage_status_api_v1_storage_default_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageConfigStatusMessage"
                },
                "example": {
                  "config_status": "configured",
                  "detail": "Active default storage location of type s3 is fully configured"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "storage:read"
            ]
          }
        ]
      }
    },
    "/api/v1/storage/default": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "Get Default Configs",
        "description": "Retrieves default configs for each storage types.",
        "operationId": "get_default_configs_api_v1_storage_default_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Page",
              "minimum": 1.0,
              "type": "integer",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Size",
              "maximum": 100.0,
              "minimum": 1.0,
              "type": "integer",
              "default": 50
            },
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_StorageDestinationResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "storage:read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Storage"
        ],
        "summary": "Put Default Config",
        "description": "Create or update the default storage configuration for the given storage type",
        "operationId": "put_default_config_api_v1_storage_default_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorageDestinationBase"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageDestinationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "storage:create_or_update"
            ]
          }
        ]
      }
    },
    "/api/v1/storage/default/{storage_type}/secret": {
      "put": {
        "tags": [
          "Storage"
        ],
        "summary": "Put Default Config Secrets",
        "description": "Add or update secrets for the default storage config of the given type",
        "operationId": "put_default_config_secrets_api_v1_storage_default__storage_type__secret_put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/StorageType"
            },
            "name": "storage_type",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Verify",
              "type": "boolean",
              "default": true
            },
            "name": "verify",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorageSecretsS3Docs"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestStatusMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "storage:create_or_update"
            ]
          }
        ]
      }
    },
    "/api/v1/storage/default/{storage_type}": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "Get Default Config By Type",
        "description": "Retrieves default config for given storage type.",
        "operationId": "get_default_config_by_type_api_v1_storage_default__storage_type__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/StorageType"
            },
            "name": "storage_type",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageDestinationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "storage:read"
            ]
          }
        ]
      }
    },
    "/api/v1/messaging/config": {
      "get": {
        "tags": [
          "messaging"
        ],
        "summary": "Get Configs",
        "description": "Retrieves configs for messaging.",
        "operationId": "get_configs_api_v1_messaging_config_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Page",
              "minimum": 1.0,
              "type": "integer",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Size",
              "maximum": 100.0,
              "minimum": 1.0,
              "type": "integer",
              "default": 50
            },
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_MessagingConfigResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "messaging:read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "messaging"
        ],
        "summary": "Post Config",
        "description": "Given a messaging config, create corresponding MessagingConfig object, provided no config already exists",
        "operationId": "post_config_api_v1_messaging_config_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessagingConfigRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagingConfigResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "messaging:create_or_update"
            ]
          }
        ]
      }
    },
    "/api/v1/messaging/config/{config_key}": {
      "get": {
        "tags": [
          "messaging"
        ],
        "summary": "Get Config By Key",
        "description": "Retrieves configs for messaging service by key.",
        "operationId": "get_config_by_key_api_v1_messaging_config__config_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Config Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "config_key",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagingConfigResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "messaging:read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "messaging"
        ],
        "summary": "Delete Config By Key",
        "description": "Deletes messaging configs by key.",
        "operationId": "delete_config_by_key_api_v1_messaging_config__config_key__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Config Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "config_key",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "messaging:delete"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "messaging"
        ],
        "summary": "Patch Config By Key",
        "description": "Updates config for messaging by key, provided config with key can be found.",
        "operationId": "patch_config_by_key_api_v1_messaging_config__config_key__patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Config Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "config_key",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessagingConfigRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagingConfigResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "messaging:create_or_update"
            ]
          }
        ]
      }
    },
    "/api/v1/messaging/default/active": {
      "get": {
        "tags": [
          "messaging"
        ],
        "summary": "Get Active Default Config",
        "description": "Retrieves the active default messaging config.",
        "operationId": "get_active_default_config_api_v1_messaging_default_active_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagingConfigResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "messaging:read"
            ]
          }
        ]
      }
    },
    "/api/v1/messaging/default/status": {
      "get": {
        "tags": [
          "messaging"
        ],
        "summary": "Get Messaging Status",
        "description": "Determines the status of the active default messaging config",
        "operationId": "get_messaging_status_api_v1_messaging_default_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagingConfigStatusMessage"
                },
                "example": {
                  "config_status": "configured",
                  "detail": "Active default messaging service of type MAILGUN is fully configured"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "messaging:read"
            ]
          }
        ]
      }
    },
    "/api/v1/messaging/default": {
      "put": {
        "tags": [
          "messaging"
        ],
        "summary": "Put Default Config",
        "description": "Updates default messaging config for given service type.",
        "operationId": "put_default_config_api_v1_messaging_default_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessagingConfigRequestBase"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagingConfigResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "messaging:create_or_update"
            ]
          }
        ]
      }
    },
    "/api/v1/messaging/default/{service_type}/secret": {
      "put": {
        "tags": [
          "messaging"
        ],
        "summary": "Put Default Config Secrets",
        "operationId": "put_default_config_secrets_api_v1_messaging_default__service_type__secret_put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MessagingServiceType"
            },
            "name": "service_type",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Unvalidated Messaging Secrets",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/MessagingSecretsMailgunDocs"
                  },
                  {
                    "$ref": "#/components/schemas/MessagingSecretsTwilioSMSDocs"
                  },
                  {
                    "$ref": "#/components/schemas/MessagingSecretsTwilioEmailDocs"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestMessagingStatusMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "messaging:create_or_update"
            ]
          }
        ]
      }
    },
    "/api/v1/messaging/config/{config_key}/secret": {
      "put": {
        "tags": [
          "messaging"
        ],
        "summary": "Put Config Secrets",
        "description": "Add or update secrets for messaging config.",
        "operationId": "put_config_secrets_api_v1_messaging_config__config_key__secret_put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Config Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "config_key",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Unvalidated Messaging Secrets",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/MessagingSecretsMailgunDocs"
                  },
                  {
                    "$ref": "#/components/schemas/MessagingSecretsTwilioSMSDocs"
                  },
                  {
                    "$ref": "#/components/schemas/MessagingSecretsTwilioEmailDocs"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestMessagingStatusMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "messaging:create_or_update"
            ]
          }
        ]
      }
    },
    "/api/v1/messaging/default/{service_type}": {
      "get": {
        "tags": [
          "messaging"
        ],
        "summary": "Get Default Config By Type",
        "description": "Retrieves default config for messaging service by type.",
        "operationId": "get_default_config_by_type_api_v1_messaging_default__service_type__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MessagingServiceType"
            },
            "name": "service_type",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagingConfigResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "messaging:read"
            ]
          }
        ]
      }
    },
    "/api/v1/messaging/config/test": {
      "post": {
        "tags": [
          "messaging"
        ],
        "summary": "Send Test Message",
        "description": "Sends a test message.",
        "operationId": "send_test_message_api_v1_messaging_config_test_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Identity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Send Test Message Api V1 Messaging Config Test Post",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "example": {
                  "details": "Test message successfully sent"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "messaging:create_or_update"
            ]
          }
        ]
      }
    },
    "/api/v1/connection/{connection_key}/validate_saas_config": {
      "put": {
        "tags": [
          "SaaS Configs"
        ],
        "summary": "Validate Saas Config",
        "description": "Uses the SaaSConfig Pydantic model to validate the SaaS config\nwithout attempting to save it to the database.\n\nChecks that:\n- all required fields are present, all field values are valid types\n- each connector_param only has one of references or identity, not both",
        "operationId": "validate_saas_config_api_v1_connection__connection_key__validate_saas_config_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaaSConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateSaaSConfigResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "saas_config:read"
            ]
          }
        ]
      }
    },
    "/api/v1/connection/{connection_key}/saas_config": {
      "get": {
        "tags": [
          "SaaS Configs"
        ],
        "summary": "Get Saas Config",
        "description": "Returns the SaaS config for the given connection config.",
        "operationId": "get_saas_config_api_v1_connection__connection_key__saas_config_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connection Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "connection_key",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaaSConfig"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "saas_config:read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "SaaS Configs"
        ],
        "summary": "Delete Saas Config",
        "description": "Removes the SaaS config for the given connection config.\nThe corresponding dataset and secrets must be deleted before deleting the SaaS config",
        "operationId": "delete_saas_config_api_v1_connection__connection_key__saas_config_delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connection Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "connection_key",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "saas_config:delete"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "SaaS Configs"
        ],
        "summary": "Patch Saas Config",
        "description": "Given a SaaS config element, update the corresponding ConnectionConfig object\nor report failure",
        "operationId": "patch_saas_config_api_v1_connection__connection_key__saas_config_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connection Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "connection_key",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaaSConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaaSConfig"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "saas_config:create_or_update"
            ]
          }
        ]
      }
    },
    "/api/v1/connection/{connection_key}/authorize": {
      "get": {
        "tags": [
          "SaaS Configs"
        ],
        "summary": "Authorize Connection",
        "description": "Returns the authorization URL for the SaaS Connector (if available)",
        "operationId": "authorize_connection_api_v1_connection__connection_key__authorize_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connection Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "connection_key",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Authorize Connection Api V1 Connection  Connection Key  Authorize Get",
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "connection:authorize"
            ]
          }
        ]
      }
    },
    "/api/v1/connection/instantiate/{saas_connector_type}": {
      "post": {
        "tags": [
          "SaaS Configs"
        ],
        "summary": "Instantiate Connection From Template",
        "description": "Creates a SaaS Connector and a SaaS Dataset from a template.\n\nLooks up the connector type in the SaaS connector registry and, if all required\nfields are provided, persists the associated connection config and dataset to the database.",
        "operationId": "instantiate_connection_from_template_api_v1_connection_instantiate__saas_connector_type__post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Saas Connector Type",
              "type": "string"
            },
            "name": "saas_connector_type",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaasConnectionTemplateValues"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaasConnectionTemplateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "connection:instantiate"
            ]
          }
        ]
      }
    },
    "/api/v1/user/{user_id}/reset-password": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Update User Password",
        "description": "Update a user's password given a `user_id`. By default this is limited to users\nupdating their own data.",
        "operationId": "update_user_password_api_v1_user__user_id__reset_password_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "string"
            },
            "name": "user_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPasswordReset"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": []
          }
        ]
      }
    },
    "/api/v1/user/{user_id}/force-reset-password": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Force Update Password",
        "description": "Update any user's password given a `user_id` without needing to know the user's\nprevious password.",
        "operationId": "force_update_password_api_v1_user__user_id__force_reset_password_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "string"
            },
            "name": "user_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserForcePasswordReset"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "user:password-reset"
            ]
          }
        ]
      }
    },
    "/api/v1/logout": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "User Logout",
        "description": "Logout the user by deleting its client where applicable",
        "operationId": "user_logout_api_v1_logout_post",
        "responses": {
          "204": {
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": []
          }
        ]
      }
    },
    "/api/v1/user/{user_id}/permission": {
      "get": {
        "tags": [
          "User Permissions"
        ],
        "summary": "Get User Permissions",
        "operationId": "get_user_permissions_api_v1_user__user_id__permission_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "string"
            },
            "name": "user_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPermissionsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "User Permissions"
        ],
        "summary": "Update User Permissions",
        "description": "Update either a user's role(s) and/or scope(s).\n\nTypically we'll assign roles to a user and they'll inherit the associated scopes,\nbut we're still supporting assigning scopes directly as well.",
        "operationId": "update_user_permissions_api_v1_user__user_id__permission_put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "string"
            },
            "name": "user_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPermissionsEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPermissionsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "user-permission:update"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "User Permissions"
        ],
        "summary": "Create User Permissions",
        "description": "Create user permissions with big picture roles and/or scopes.",
        "operationId": "create_user_permissions_api_v1_user__user_id__permission_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "string"
            },
            "name": "user_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPermissionsCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPermissionsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "user-permission:create"
            ]
          }
        ]
      }
    },
    "/api/v1/connection/{connection_key}/access_manual_webhook": {
      "get": {
        "tags": [
          "Manual Webhooks"
        ],
        "summary": "Get Access Manual Webhook",
        "description": "Gets the Access Manual Webhook associated with this ConnectionConfig.",
        "operationId": "get_access_manual_webhook_api_v1_connection__connection_key__access_manual_webhook_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connection Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "connection_key",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessManualWebhookResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "webhook:read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Manual Webhooks"
        ],
        "summary": "Create Access Manual Webhook",
        "description": "Create an Access Manual Webhook to describe the fields that should be manually uploaded and passed directly to the user",
        "operationId": "create_access_manual_webhook_api_v1_connection__connection_key__access_manual_webhook_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connection Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "connection_key",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessManualWebhooks"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessManualWebhookResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "webhook:create_or_update"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Manual Webhooks"
        ],
        "summary": "Delete Access Manual Webhook",
        "description": "Deletes the AccessManualWebhook associated with this ConnectionConfig if it exists.",
        "operationId": "delete_access_manual_webhook_api_v1_connection__connection_key__access_manual_webhook_delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connection Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "connection_key",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "webhook:delete"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Manual Webhooks"
        ],
        "summary": "Patch Access Manual Webhook",
        "description": "Updates the AccessManualWebhook associated with this ConnectionConfig",
        "operationId": "patch_access_manual_webhook_api_v1_connection__connection_key__access_manual_webhook_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Connection Key",
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "name": "connection_key",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessManualWebhooks"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessManualWebhookResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "webhook:create_or_update"
            ]
          }
        ]
      }
    },
    "/api/v1/access_manual_webhook": {
      "get": {
        "tags": [
          "Manual Webhooks"
        ],
        "summary": "Get Access Manual Webhooks",
        "description": "Get all enabled Access Manual Webhooks",
        "operationId": "get_access_manual_webhooks_api_v1_access_manual_webhook_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Access Manual Webhooks Api V1 Access Manual Webhook Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessManualWebhookResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2ClientCredentialsBearer": [
              "webhook:read"
            ]
          }
        ]
      }
    },
    "/api/v1/registration": {
      "get": {
        "tags": [
          "Registration"
        ],
        "summary": "Get Registration Status",
        "description": "Return the registration status of this Fides deployment.",
        "operationId": "get_registration_status_api_v1_registration_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRegistrationStatusResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Registration"
        ],
        "summary": "Update Registration Status",
        "description": "Return the registration status of this Fides deployment.",
        "operationId": "update_registration_status_api_v1_registration_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Registration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registration"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "tags": [
          "Default"
        ],
        "summary": "Read Index",
        "description": "Return an index.html at the root path",
        "operationId": "read_index__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/{catchall}": {
      "get": {
        "tags": [
          "Default"
        ],
        "summary": "Read Other Paths",
        "description": "Return related frontend files. Adapted from https://github.com/tiangolo/fastapi/issues/130",
        "operationId": "read_other_paths__catchall__get",
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AWSConfig": {
        "title": "AWSConfig",
        "required": [
          "region_name",
          "aws_secret_access_key",
          "aws_access_key_id"
        ],
        "type": "object",
        "properties": {
          "region_name": {
            "title": "Region Name",
            "type": "string"
          },
          "aws_secret_access_key": {
            "title": "Aws Secret Access Key",
            "type": "string"
          },
          "aws_access_key_id": {
            "title": "Aws Access Key Id",
            "type": "string"
          }
        },
        "description": "The model for the connection config for AWS"
      },
      "AccessLevel": {
        "title": "AccessLevel",
        "enum": [
          "read",
          "write"
        ],
        "description": "Perms given to the ConnectionConfig.  For example, with \"read\" permissions, fidesops promises\nto not modify the data on a connected application database in any way.\n\n\"Write\" perms mean we can update/delete items in the connected database."
      },
      "AccessManualWebhookResponse": {
        "title": "AccessManualWebhookResponse",
        "required": [
          "fields",
          "connection_config",
          "id"
        ],
        "type": "object",
        "properties": {
          "fields": {
            "title": "Fields",
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ManualWebhookField"
            }
          },
          "connection_config": {
            "$ref": "#/components/schemas/ConnectionConfigurationResponse"
          },
          "id": {
            "title": "Id",
            "type": "string"
          }
        },
        "description": "Expected response for accessing Access Manual Webhooks"
      },
      "AccessManualWebhooks": {
        "title": "AccessManualWebhooks",
        "required": [
          "fields"
        ],
        "type": "object",
        "properties": {
          "fields": {
            "title": "Fields",
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ManualWebhookField"
            }
          }
        },
        "description": "Expected request body for creating Access Manual Webhooks"
      },
      "AccessToken": {
        "title": "AccessToken",
        "required": [
          "access_token"
        ],
        "type": "object",
        "properties": {
          "access_token": {
            "title": "Access Token",
            "type": "string"
          }
        },
        "description": "A wrapper for the access_code returned upon successful authentication"
      },
      "ActionType": {
        "title": "ActionType",
        "enum": [
          "access",
          "consent",
          "erasure",
          "update"
        ],
        "type": "string",
        "description": "The purpose of a particular privacy request"
      },
      "AdvancedSettingsWithExtendedIdentityTypes": {
        "title": "AdvancedSettingsWithExtendedIdentityTypes",
        "required": [
          "identity_types"
        ],
        "type": "object",
        "properties": {
          "identity_types": {
            "$ref": "#/components/schemas/ExtendedIdentityTypes"
          }
        },
        "description": "Overrides base AdvancedSettings to have extended IdentityTypes"
      },
      "AesDecryptionRequest": {
        "title": "AesDecryptionRequest",
        "required": [
          "value",
          "key",
          "nonce"
        ],
        "type": "object",
        "properties": {
          "value": {
            "title": "Value",
            "type": "string"
          },
          "key": {
            "title": "Key",
            "type": "string"
          },
          "nonce": {
            "title": "Nonce",
            "type": "string"
          }
        },
        "description": "Specifies fields provided to the AES Decryption endpoint"
      },
      "AesDecryptionResponse": {
        "title": "AesDecryptionResponse",
        "required": [
          "decrypted_value"
        ],
        "type": "object",
        "properties": {
          "decrypted_value": {
            "title": "Decrypted Value",
            "type": "string"
          }
        },
        "description": "Specified fields returned from the AES Decryption endpoint"
      },
      "AesEncryptionRequest": {
        "title": "AesEncryptionRequest",
        "required": [
          "value",
          "key"
        ],
        "type": "object",
        "properties": {
          "value": {
            "title": "Value",
            "type": "string"
          },
          "key": {
            "title": "Key",
            "type": "string"
          }
        },
        "description": "Specifies fields provided to the AES Encryption endpoint"
      },
      "AesEncryptionResponse": {
        "title": "AesEncryptionResponse",
        "required": [
          "encrypted_value",
          "nonce"
        ],
        "type": "object",
        "properties": {
          "encrypted_value": {
            "title": "Encrypted Value",
            "type": "string"
          },
          "nonce": {
            "title": "Nonce",
            "type": "string"
          }
        },
        "description": "Specifies fields returned from the AES Encryption endpoint"
      },
      "ApplicationConfig": {
        "title": "ApplicationConfig",
        "type": "object",
        "properties": {
          "storage": {
            "$ref": "#/components/schemas/StorageApplicationConfig"
          },
          "notifications": {
            "$ref": "#/components/schemas/NotificationApplicationConfig"
          },
          "execution": {
            "$ref": "#/components/schemas/ExecutionApplicationConfig"
          }
        },
        "additionalProperties": false,
        "description": "Application config settings update body is an arbitrary dict (JSON object)\nWe describe it in a schema to enforce some restrictions on the keys passed.\n\nTODO: Eventually this should be driven by a more formal validation schema for this\nthe application config that is properly hooked up to the global pydantic config module."
      },
      "AuditLogAction": {
        "title": "AuditLogAction",
        "enum": [
          "approved",
          "denied",
          "email_sent",
          "finished"
        ],
        "type": "string",
        "description": "Enum for audit log actions, reflecting what a user did."
      },
      "BigQueryConfig": {
        "title": "BigQueryConfig",
        "required": [
          "keyfile_creds"
        ],
        "type": "object",
        "properties": {
          "dataset": {
            "title": "Dataset",
            "type": "string"
          },
          "keyfile_creds": {
            "$ref": "#/components/schemas/fides__connectors__models__KeyfileCreds"
          }
        },
        "description": "The model for the connection config for BigQuery"
      },
      "BigQueryDocsSchema": {
        "title": "BigQueryDocsSchema",
        "required": [
          "keyfile_creds"
        ],
        "type": "object",
        "properties": {
          "url": {
            "title": "Url",
            "type": "string"
          },
          "dataset": {
            "title": "Dataset",
            "type": "string"
          },
          "keyfile_creds": {
            "$ref": "#/components/schemas/fides__api__ops__schemas__connection_configuration__connection_secrets_bigquery__KeyfileCreds"
          }
        },
        "additionalProperties": false,
        "description": "BigQuery Secrets Schema for API Docs"
      },
      "Body_acquire_access_token_api_v1_oauth_token_post": {
        "title": "Body_acquire_access_token_api_v1_oauth_token_post",
        "type": "object",
        "properties": {
          "grant_type": {
            "title": "Grant Type",
            "pattern": "client_credentials",
            "type": "string"
          },
          "scope": {
            "title": "Scope",
            "type": "string",
            "default": ""
          },
          "client_id": {
            "title": "Client Id",
            "type": "string"
          },
          "client_secret": {
            "title": "Client Secret",
            "type": "string"
          }
        }
      },
      "Body_upload_data_api_v1_storage__request_id__post": {
        "title": "Body_upload_data_api_v1_storage__request_id__post",
        "required": [
          "data",
          "storage_key"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "object"
          },
          "storage_key": {
            "title": "Storage Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string"
          }
        }
      },
      "BulkPostPrivacyRequests": {
        "title": "BulkPostPrivacyRequests",
        "required": [
          "succeeded",
          "failed"
        ],
        "type": "object",
        "properties": {
          "succeeded": {
            "title": "Succeeded",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrivacyRequestResponse"
            }
          },
          "failed": {
            "title": "Failed",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkUpdateFailed"
            }
          }
        },
        "description": "Schema with mixed success/failure responses for Bulk Create of PrivacyRequest responses."
      },
      "BulkPutConnectionConfiguration": {
        "title": "BulkPutConnectionConfiguration",
        "required": [
          "succeeded",
          "failed"
        ],
        "type": "object",
        "properties": {
          "succeeded": {
            "title": "Succeeded",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectionConfigurationResponse"
            }
          },
          "failed": {
            "title": "Failed",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkUpdateFailed"
            }
          }
        },
        "description": "Schema with mixed success/failure responses for Bulk Create/Update of ConnectionConfiguration responses."
      },
      "BulkPutDataset": {
        "title": "BulkPutDataset",
        "required": [
          "succeeded",
          "failed"
        ],
        "type": "object",
        "properties": {
          "succeeded": {
            "title": "Succeeded",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Dataset"
            }
          },
          "failed": {
            "title": "Failed",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkUpdateFailed"
            }
          }
        },
        "description": "Schema with mixed success/failure responses for Bulk Create/Update of Datasets."
      },
      "BulkPutPolicyResponse": {
        "title": "BulkPutPolicyResponse",
        "required": [
          "succeeded",
          "failed"
        ],
        "type": "object",
        "properties": {
          "succeeded": {
            "title": "Succeeded",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyResponse"
            }
          },
          "failed": {
            "title": "Failed",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkUpdateFailed"
            }
          }
        },
        "description": "Schema with mixed success/failure responses for Bulk Create/Update of Policy responses."
      },
      "BulkPutRuleResponse": {
        "title": "BulkPutRuleResponse",
        "required": [
          "succeeded",
          "failed"
        ],
        "type": "object",
        "properties": {
          "succeeded": {
            "title": "Succeeded",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleResponse"
            }
          },
          "failed": {
            "title": "Failed",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkUpdateFailed"
            }
          }
        },
        "description": "Schema with mixed success/failure responses for Bulk Create/Update of Rule responses."
      },
      "BulkPutRuleTargetResponse": {
        "title": "BulkPutRuleTargetResponse",
        "required": [
          "succeeded",
          "failed"
        ],
        "type": "object",
        "properties": {
          "succeeded": {
            "title": "Succeeded",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleTarget"
            }
          },
          "failed": {
            "title": "Failed",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkUpdateFailed"
            }
          }
        },
        "description": "Schema with mixed success/failure responses for Bulk Create/Update of RuleTarget responses."
      },
      "BulkPutStorageConfigResponse": {
        "title": "BulkPutStorageConfigResponse",
        "required": [
          "succeeded",
          "failed"
        ],
        "type": "object",
        "properties": {
          "succeeded": {
            "title": "Succeeded",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StorageDestinationResponse"
            }
          },
          "failed": {
            "title": "Failed",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkUpdateFailed"
            }
          }
        },
        "description": "Schema with mixed success/failure responses for Bulk Create/Update of StorageConfig."
      },
      "BulkReviewResponse": {
        "title": "BulkReviewResponse",
        "required": [
          "succeeded",
          "failed"
        ],
        "type": "object",
        "properties": {
          "succeeded": {
            "title": "Succeeded",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrivacyRequestResponse"
            }
          },
          "failed": {
            "title": "Failed",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkUpdateFailed"
            }
          }
        },
        "description": "Schema with mixed success/failure responses for Bulk Approve/Deny of PrivacyRequest responses."
      },
      "BulkUpdateFailed": {
        "title": "BulkUpdateFailed",
        "required": [
          "message",
          "data"
        ],
        "type": "object",
        "properties": {
          "message": {
            "title": "Message",
            "type": "string"
          },
          "data": {
            "title": "Data",
            "type": "object"
          }
        },
        "description": "Schema for use when Bulk Create/Update fails."
      },
      "CheckpointActionRequiredDetails": {
        "title": "CheckpointActionRequiredDetails",
        "required": [
          "step"
        ],
        "type": "object",
        "properties": {
          "step": {
            "$ref": "#/components/schemas/CurrentStep"
          },
          "collection": {
            "title": "Collection",
            "type": "string"
          },
          "action_needed": {
            "title": "Action Needed",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ManualAction"
            }
          }
        },
        "description": "Describes actions needed on a particular checkpoint.\n\nExamples are a paused collection that needs manual input, a failed collection that\nneeds to be restarted, or a collection where instructions need to be emailed to a third\nparty to complete the request."
      },
      "ClientConfig": {
        "title": "ClientConfig",
        "required": [
          "protocol",
          "host"
        ],
        "type": "object",
        "properties": {
          "protocol": {
            "title": "Protocol",
            "type": "string"
          },
          "host": {
            "title": "Host",
            "type": "string"
          },
          "authentication": {
            "$ref": "#/components/schemas/Strategy"
          }
        },
        "description": "Definition for an authenticated base HTTP client"
      },
      "ClientCreatedResponse": {
        "title": "ClientCreatedResponse",
        "required": [
          "client_id",
          "client_secret"
        ],
        "type": "object",
        "properties": {
          "client_id": {
            "title": "Client Id",
            "type": "string"
          },
          "client_secret": {
            "title": "Client Secret",
            "type": "string"
          }
        },
        "description": "Response schema for client creation"
      },
      "CollectionAddressResponse": {
        "title": "CollectionAddressResponse",
        "type": "object",
        "properties": {
          "dataset": {
            "title": "Dataset",
            "type": "string"
          },
          "collection": {
            "title": "Collection",
            "type": "string"
          }
        },
        "description": "Schema for the representation of a collection in the graph"
      },
      "CollectionMeta": {
        "title": "CollectionMeta",
        "type": "object",
        "properties": {
          "after": {
            "title": "After",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Collection-level specific annotations used for query traversal"
      },
      "ColumnSort": {
        "title": "ColumnSort",
        "enum": [
          "desc",
          "asc"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "ConnectionConfigurationResponse": {
        "title": "ConnectionConfigurationResponse",
        "required": [
          "name",
          "key",
          "connection_type",
          "access",
          "created_at"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "key": {
            "title": "Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "connection_type": {
            "$ref": "#/components/schemas/ConnectionType"
          },
          "access": {
            "$ref": "#/components/schemas/AccessLevel"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "format": "date-time"
          },
          "disabled": {
            "title": "Disabled",
            "type": "boolean",
            "default": false
          },
          "last_test_timestamp": {
            "title": "Last Test Timestamp",
            "type": "string",
            "format": "date-time"
          },
          "last_test_succeeded": {
            "title": "Last Test Succeeded",
            "type": "boolean"
          },
          "saas_config": {
            "$ref": "#/components/schemas/SaaSConfigBase"
          }
        },
        "description": "Describes the returned schema for a ConnectionConfiguration.\n\nDo *NOT* add \"secrets\" to this schema."
      },
      "ConnectionSystemTypeMap": {
        "title": "ConnectionSystemTypeMap",
        "required": [
          "identifier",
          "type",
          "human_readable"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "title": "Identifier",
            "anyOf": [
              {
                "$ref": "#/components/schemas/ConnectionType"
              },
              {
                "type": "string"
              }
            ]
          },
          "type": {
            "$ref": "#/components/schemas/SystemType"
          },
          "human_readable": {
            "title": "Human Readable",
            "type": "string"
          },
          "encoded_icon": {
            "title": "Encoded Icon",
            "type": "string"
          }
        },
        "description": "Describes the returned schema for connection types"
      },
      "ConnectionTestStatus": {
        "title": "ConnectionTestStatus",
        "enum": [
          "succeeded",
          "failed",
          "skipped"
        ],
        "description": "Enum for supplying statuses of validating credentials for a Connection Config to the user"
      },
      "ConnectionType": {
        "title": "ConnectionType",
        "enum": [
          "postgres",
          "mongodb",
          "mysql",
          "https",
          "saas",
          "redshift",
          "snowflake",
          "mssql",
          "mariadb",
          "bigquery",
          "manual",
          "email",
          "sovrn",
          "manual_webhook",
          "timescale",
          "fides"
        ],
        "description": "Supported types to which we can connect fidesops."
      },
      "ConnectorParam": {
        "title": "ConnectorParam",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "label": {
            "title": "Label",
            "type": "string"
          },
          "options": {
            "title": "Options",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "default_value": {
            "title": "Default Value",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "multiselect": {
            "title": "Multiselect",
            "type": "boolean",
            "default": false
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        },
        "description": "Used to define the required parameters for the connector (user and constants)"
      },
      "Consent": {
        "title": "Consent",
        "required": [
          "data_use",
          "opt_in"
        ],
        "type": "object",
        "properties": {
          "data_use": {
            "title": "Data Use",
            "type": "string"
          },
          "data_use_description": {
            "title": "Data Use Description",
            "type": "string"
          },
          "opt_in": {
            "title": "Opt In",
            "type": "boolean"
          },
          "has_gpc_flag": {
            "title": "Has Gpc Flag",
            "type": "boolean",
            "default": false
          },
          "conflicts_with_gpc": {
            "title": "Conflicts With Gpc",
            "type": "boolean",
            "default": false
          }
        },
        "description": "Schema for consent."
      },
      "ConsentPreferences": {
        "title": "ConsentPreferences",
        "type": "object",
        "properties": {
          "consent": {
            "title": "Consent",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Consent"
            }
          }
        },
        "description": "Schema for consent preferences."
      },
      "ConsentPreferencesWithVerificationCode": {
        "title": "ConsentPreferencesWithVerificationCode",
        "required": [
          "consent"
        ],
        "type": "object",
        "properties": {
          "code": {
            "title": "Code",
            "type": "string"
          },
          "consent": {
            "title": "Consent",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Consent"
            }
          },
          "policy_key": {
            "title": "Policy Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string"
          },
          "executable_options": {
            "title": "Executable Options",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConsentWithExecutableStatus"
            }
          },
          "browser_identity": {
            "$ref": "#/components/schemas/Identity"
          }
        },
        "description": "Schema for consent preferences including the verification code."
      },
      "ConsentRequestMap": {
        "title": "ConsentRequestMap",
        "type": "object",
        "properties": {
          "opt_in": {
            "title": "Opt In",
            "anyOf": [
              {
                "$ref": "#/components/schemas/SaaSRequest"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SaaSRequest"
                }
              }
            ],
            "default": []
          },
          "opt_out": {
            "title": "Opt Out",
            "anyOf": [
              {
                "$ref": "#/components/schemas/SaaSRequest"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SaaSRequest"
                }
              }
            ],
            "default": []
          }
        },
        "description": "A map of actions to Consent requests"
      },
      "ConsentRequestResponse": {
        "title": "ConsentRequestResponse",
        "required": [
          "consent_request_id"
        ],
        "type": "object",
        "properties": {
          "consent_request_id": {
            "title": "Consent Request Id",
            "type": "string"
          }
        },
        "description": "Schema for consent request response."
      },
      "ConsentWithExecutableStatus": {
        "title": "ConsentWithExecutableStatus",
        "required": [
          "data_use",
          "executable"
        ],
        "type": "object",
        "properties": {
          "data_use": {
            "title": "Data Use",
            "type": "string"
          },
          "executable": {
            "title": "Executable",
            "type": "boolean"
          }
        },
        "description": "Schema for executable consents"
      },
      "ContactDetails": {
        "title": "ContactDetails",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "An individual name used as part of publishing contact information. Encrypted at rest on the server.",
            "default": ""
          },
          "address": {
            "title": "Address",
            "type": "string",
            "description": "An individual address used as part of publishing contact information. Encrypted at rest on the server.",
            "default": ""
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "An individual email used as part of publishing contact information. Encrypted at rest on the server.",
            "default": ""
          },
          "phone": {
            "title": "Phone",
            "type": "string",
            "description": "An individual phone number used as part of publishing contact information. Encrypted at rest on the server.",
            "default": ""
          }
        },
        "description": "The contact details information model.\n\nUsed to capture contact information for controllers, used\nas part of exporting a data map / ROPA.\n\nThis model is nested under an Organization and\npotentially under a system/dataset."
      },
      "CoreHealthCheck": {
        "title": "CoreHealthCheck",
        "required": [
          "webserver",
          "version",
          "database",
          "cache",
          "workers_enabled",
          "workers"
        ],
        "type": "object",
        "properties": {
          "webserver": {
            "title": "Webserver",
            "type": "string"
          },
          "version": {
            "title": "Version",
            "type": "string"
          },
          "database": {
            "title": "Database",
            "enum": [
              "healthy",
              "unhealthy",
              "needs migration"
            ],
            "type": "string"
          },
          "cache": {
            "title": "Cache",
            "enum": [
              "healthy",
              "unhealthy",
              "no cache configured"
            ],
            "type": "string"
          },
          "workers_enabled": {
            "title": "Workers Enabled",
            "type": "boolean"
          },
          "workers": {
            "title": "Workers",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Healthcheck schema"
      },
      "CreateConnectionConfigurationWithSecrets": {
        "title": "CreateConnectionConfigurationWithSecrets",
        "required": [
          "name",
          "connection_type",
          "access"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "key": {
            "title": "Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string"
          },
          "connection_type": {
            "$ref": "#/components/schemas/ConnectionType"
          },
          "access": {
            "$ref": "#/components/schemas/AccessLevel"
          },
          "disabled": {
            "title": "Disabled",
            "type": "boolean",
            "default": false
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "secrets": {
            "title": "Secrets",
            "anyOf": [
              {
                "$ref": "#/components/schemas/MongoDBDocsSchema"
              },
              {
                "$ref": "#/components/schemas/PostgreSQLDocsSchema"
              },
              {
                "$ref": "#/components/schemas/MySQLDocsSchema"
              },
              {
                "$ref": "#/components/schemas/RedshiftDocsSchema"
              },
              {
                "$ref": "#/components/schemas/SnowflakeDocsSchema"
              },
              {
                "$ref": "#/components/schemas/MSSQLDocsSchema"
              },
              {
                "$ref": "#/components/schemas/MariaDBDocsSchema"
              },
              {
                "$ref": "#/components/schemas/BigQueryDocsSchema"
              },
              {
                "$ref": "#/components/schemas/SaaSSchema"
              },
              {
                "$ref": "#/components/schemas/EmailDocsSchema"
              },
              {
                "$ref": "#/components/schemas/ManualWebhookSchemaforDocs"
              },
              {
                "$ref": "#/components/schemas/TimescaleDocsSchema"
              },
              {
                "$ref": "#/components/schemas/FidesDocsSchema"
              },
              {
                "$ref": "#/components/schemas/SovrnEmailDocsSchema"
              }
            ]
          },
          "saas_connector_type": {
            "title": "Saas Connector Type",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "Schema for creating a connection configuration including secrets."
      },
      "CurrentStep": {
        "title": "CurrentStep",
        "enum": [
          "pre_webhooks",
          "access",
          "erasure",
          "consent",
          "erasure_email_post_send",
          "consent_email_post_send",
          "post_webhooks"
        ],
        "description": "An enumeration."
      },
      "DBActions": {
        "title": "DBActions",
        "enum": [
          "init",
          "reset"
        ],
        "type": "string",
        "description": "The available path parameters for the `/admin/db/{action}` endpoint."
      },
      "DataCategory": {
        "title": "DataCategory",
        "required": [
          "fides_key"
        ],
        "type": "object",
        "properties": {
          "fides_key": {
            "title": "Fides Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string",
            "description": "A unique key used to identify this resource."
          },
          "organization_fides_key": {
            "title": "Organization Fides Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string",
            "description": "Defines the Organization that this resource belongs to.",
            "default": "default_organization"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Human-Readable name for this resource."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A detailed description of what this resource is."
          },
          "parent_key": {
            "title": "Parent Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string"
          },
          "is_default": {
            "title": "Is Default",
            "type": "boolean",
            "description": "Denotes whether the resource is part of the default taxonomy or not.",
            "default": false
          }
        },
        "description": "The DataCategory resource model."
      },
      "DataFlow": {
        "title": "DataFlow",
        "required": [
          "fides_key",
          "type"
        ],
        "type": "object",
        "properties": {
          "fides_key": {
            "title": "Fides Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string",
            "description": "Identifies the System or Dataset resource with which the communication occurs. May also be 'user', to represent communication with the user(s) of a System."
          },
          "type": {
            "title": "Type",
            "type": "string",
            "description": "Specifies the resource model class for which the `fides_key` applies. May be any of dataset, system, user."
          },
          "data_categories": {
            "title": "Data Categories",
            "type": "array",
            "items": {
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "description": "An array of data categories describing the data in transit."
          }
        },
        "description": "The DataFlow resource model.\n\nDescribes a resource model with which a given System resource communicates."
      },
      "DataProtectionImpactAssessment": {
        "title": "DataProtectionImpactAssessment",
        "type": "object",
        "properties": {
          "is_required": {
            "title": "Is Required",
            "type": "boolean",
            "description": "A boolean value determining if a data protection impact assessment is required. Defaults to False.",
            "default": false
          },
          "progress": {
            "title": "Progress",
            "type": "string",
            "description": "The optional status of a Data Protection Impact Assessment. Returned on an exported data map or RoPA."
          },
          "link": {
            "title": "Link",
            "maxLength": 65536,
            "minLength": 1,
            "type": "string",
            "description": "The optional link to the Data Protection Impact Assessment. Returned on an exported data map or RoPA.",
            "format": "uri"
          }
        },
        "description": "The DataProtectionImpactAssessment (DPIA) resource model.\n\nContains information in regard to the data protection\nimpact assessment exported on a data map or Record of\nProcessing Activities (RoPA).\n\nA legal requirement under GDPR for any project that\nintroduces a high risk to personal information."
      },
      "DataQualifier": {
        "title": "DataQualifier",
        "required": [
          "fides_key"
        ],
        "type": "object",
        "properties": {
          "fides_key": {
            "title": "Fides Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string",
            "description": "A unique key used to identify this resource."
          },
          "organization_fides_key": {
            "title": "Organization Fides Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string",
            "description": "Defines the Organization that this resource belongs to.",
            "default": "default_organization"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Human-Readable name for this resource."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A detailed description of what this resource is."
          },
          "parent_key": {
            "title": "Parent Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string"
          },
          "is_default": {
            "title": "Is Default",
            "type": "boolean",
            "description": "Denotes whether the resource is part of the default taxonomy or not.",
            "default": false
          }
        },
        "description": "The DataQualifier resource model."
      },
      "DataResponsibilityTitle": {
        "title": "DataResponsibilityTitle",
        "enum": [
          "Controller",
          "Processor",
          "Sub-Processor"
        ],
        "type": "string",
        "description": "The model defining the responsibility or role over\nthe system that processes personal data.\n\nUsed to identify whether the organization is a\nController, Processor, or Sub-Processor of the data"
      },
      "DataSubject": {
        "title": "DataSubject",
        "required": [
          "fides_key"
        ],
        "type": "object",
        "properties": {
          "fides_key": {
            "title": "Fides Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string",
            "description": "A unique key used to identify this resource."
          },
          "organization_fides_key": {
            "title": "Organization Fides Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string",
            "description": "Defines the Organization that this resource belongs to.",
            "default": "default_organization"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Human-Readable name for this resource."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A detailed description of what this resource is."
          },
          "rights": {
            "title": "Rights",
            "allOf": [
              {
                "$ref": "#/components/schemas/DataSubjectRights"
              }
            ],
            "description": "\n    The DataSubjectRights resource model.\n\n    Includes a strategy and optionally a\n    list of data subject rights to apply\n    via the set strategy.\n    "
          },
          "automated_decisions_or_profiling": {
            "title": "Automated Decisions Or Profiling",
            "type": "boolean",
            "description": "A boolean value to annotate whether or not automated decisions/profiling exists for the data subject."
          },
          "is_default": {
            "title": "Is Default",
            "type": "boolean",
            "description": "Denotes whether the resource is part of the default taxonomy or not.",
            "default": false
          }
        },
        "description": "The DataSubject resource model."
      },
      "DataSubjectRights": {
        "title": "DataSubjectRights",
        "required": [
          "strategy"
        ],
        "type": "object",
        "properties": {
          "strategy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IncludeExcludeEnum"
              }
            ],
            "description": "Defines the strategy used when mapping data rights to a data subject."
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSubjectRightsEnum"
            },
            "description": "A list of valid data subject rights to be used when applying data rights to a data subject via a strategy."
          }
        },
        "description": "The DataSubjectRights resource model.\n\nIncludes a strategy and optionally a\nlist of data subject rights to apply\nvia the set strategy."
      },
      "DataSubjectRightsEnum": {
        "title": "DataSubjectRightsEnum",
        "enum": [
          "Informed",
          "Access",
          "Rectification",
          "Erasure",
          "Portability",
          "Restrict Processing",
          "Withdraw Consent",
          "Object",
          "Object to Automated Processing"
        ],
        "type": "string",
        "description": "The model for data subject rights over\npersonal data.\n\nBased upon chapter 3 of the GDPR"
      },
      "DataUpload": {
        "title": "DataUpload",
        "required": [
          "location"
        ],
        "type": "object",
        "properties": {
          "location": {
            "title": "Location",
            "type": "string"
          }
        },
        "description": "A wrapper for the data upload location returned upon successful upload"
      },
      "DataUse": {
        "title": "DataUse",
        "required": [
          "fides_key"
        ],
        "type": "object",
        "properties": {
          "fides_key": {
            "title": "Fides Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string",
            "description": "A unique key used to identify this resource."
          },
          "organization_fides_key": {
            "title": "Organization Fides Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string",
            "description": "Defines the Organization that this resource belongs to.",
            "default": "default_organization"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Human-Readable name for this resource."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A detailed description of what this resource is."
          },
          "parent_key": {
            "title": "Parent Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string"
          },
          "legal_basis": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LegalBasisEnum"
              }
            ],
            "description": "The legal basis category of which the data use falls under. This field is used as part of the creation of an exportable data map."
          },
          "special_category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SpecialCategoriesEnum"
              }
            ],
            "description": "The special category for processing of which the data use falls under. This field is used as part of the creation of an exportable data map."
          },
          "recipients": {
            "title": "Recipients",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of recipients when sharing personal data outside of your organization."
          },
          "legitimate_interest": {
            "title": "Legitimate Interest",
            "type": "boolean",
            "description": "A boolean representation of if the legal basis used is `Legitimate Interest`. Validated at run time and looks for a `legitimate_interest_impact_assessment` to exist if true.",
            "default": false
          },
          "legitimate_interest_impact_assessment": {
            "title": "Legitimate Interest Impact Assessment",
            "maxLength": 65536,
            "minLength": 1,
            "type": "string",
            "description": "A url pointing to the legitimate interest impact assessment. Required if the legal bases used is legitimate interest.",
            "format": "uri"
          },
          "is_default": {
            "title": "Is Default",
            "type": "boolean",
            "description": "Denotes whether the resource is part of the default taxonomy or not.",
            "default": false
          }
        },
        "description": "The DataUse resource model."
      },
      "DatabaseConfig": {
        "title": "DatabaseConfig",
        "required": [
          "connection_string"
        ],
        "type": "object",
        "properties": {
          "connection_string": {
            "title": "Connection String",
            "type": "string"
          }
        },
        "description": "The model for the connection config for databases"
      },
      "Dataset": {
        "title": "Dataset",
        "required": [
          "fides_key",
          "collections"
        ],
        "type": "object",
        "properties": {
          "fides_key": {
            "title": "Fides Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string",
            "description": "A unique key used to identify this resource."
          },
          "organization_fides_key": {
            "title": "Organization Fides Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string",
            "description": "Defines the Organization that this resource belongs to.",
            "default": "default_organization"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Human-Readable name for this resource."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A detailed description of what this resource is."
          },
          "meta": {
            "title": "Meta",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "An optional object that provides additional information about the Dataset. You can structure the object however you like. It can be a simple set of `key: value` properties or a deeply nested hierarchy of objects. How you use the object is up to you: Fides ignores it."
          },
          "data_categories": {
            "title": "Data Categories",
            "type": "array",
            "items": {
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "description": "Array of Data Category resources identified by `fides_key`, that apply to all collections in the Dataset."
          },
          "data_qualifier": {
            "title": "Data Qualifier",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string",
            "description": "Array of Data Qualifier resources identified by `fides_key`, that apply to all collections in the Dataset.",
            "default": "aggregated.anonymized.unlinked_pseudonymized.pseudonymized.identified"
          },
          "fides_meta": {
            "title": "Fides Meta",
            "allOf": [
              {
                "$ref": "#/components/schemas/DatasetMetadata"
              }
            ],
            "description": "\n    The DatasetMetadata resource model.\n\n    Object used to hold application specific metadata for a dataset\n    "
          },
          "joint_controller": {
            "title": "Joint Controller",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactDetails"
              }
            ],
            "description": "\n    The contact details information model.\n\n    Used to capture contact information for controllers, used\n    as part of exporting a data map / ROPA.\n\n    This model is nested under an Organization and\n    potentially under a system/dataset.\n    "
          },
          "retention": {
            "title": "Retention",
            "type": "string",
            "description": "An optional string to describe the retention policy for a dataset. This field can also be applied more granularly at either the Collection or field level of a Dataset.",
            "default": "No retention or erasure policy"
          },
          "third_country_transfers": {
            "title": "Third Country Transfers",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An optional array to identify any third countries where data is transited to. For consistency purposes, these fields are required to follow the Alpha-3 code set in [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3)."
          },
          "collections": {
            "title": "Collections",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatasetCollection"
            },
            "description": "An array of objects that describe the Dataset's collections."
          }
        },
        "description": "The Dataset resource model."
      },
      "DatasetCollection": {
        "title": "DatasetCollection",
        "required": [
          "name",
          "fields"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Human-Readable name for this resource."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A detailed description of what this resource is."
          },
          "data_categories": {
            "title": "Data Categories",
            "type": "array",
            "items": {
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "description": "Array of Data Category resources identified by `fides_key`, that apply to all fields in the collection."
          },
          "data_qualifier": {
            "title": "Data Qualifier",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string",
            "description": "Array of Data Qualifier resources identified by `fides_key`, that apply to all fields in the collection.",
            "default": "aggregated.anonymized.unlinked_pseudonymized.pseudonymized.identified"
          },
          "retention": {
            "title": "Retention",
            "type": "string",
            "description": "An optional string to describe the retention policy for a Dataset collection. This field can also be applied more granularly at the field level of a Dataset."
          },
          "fields": {
            "title": "Fields",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatasetField"
            },
            "description": "An array of objects that describe the collection's fields."
          },
          "fides_meta": {
            "$ref": "#/components/schemas/CollectionMeta"
          }
        },
        "description": "The DatasetCollection resource model.\n\nThis resource is nested within a Dataset."
      },
      "DatasetConfigCtlDataset": {
        "title": "DatasetConfigCtlDataset",
        "required": [
          "fides_key",
          "ctl_dataset_fides_key"
        ],
        "type": "object",
        "properties": {
          "fides_key": {
            "title": "Fides Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string"
          },
          "ctl_dataset_fides_key": {
            "title": "Ctl Dataset Fides Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string"
          }
        },
        "description": "A base template for all other Fidesops Schemas to inherit from."
      },
      "DatasetConfigSchema": {
        "title": "DatasetConfigSchema",
        "required": [
          "fides_key",
          "ctl_dataset"
        ],
        "type": "object",
        "properties": {
          "fides_key": {
            "title": "Fides Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string"
          },
          "ctl_dataset": {
            "$ref": "#/components/schemas/Dataset"
          }
        },
        "description": "Returns the DatasetConfig fides key and the linked Ctl Dataset"
      },
      "DatasetField": {
        "title": "DatasetField",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Human-Readable name for this resource."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A detailed description of what this resource is."
          },
          "data_categories": {
            "title": "Data Categories",
            "type": "array",
            "items": {
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "description": "Arrays of Data Categories, identified by `fides_key`, that applies to this field."
          },
          "data_qualifier": {
            "title": "Data Qualifier",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string",
            "description": "A Data Qualifier that applies to this field. Note that this field holds a single value, therefore, the property name is singular.",
            "default": "aggregated.anonymized.unlinked_pseudonymized.pseudonymized.identified"
          },
          "retention": {
            "title": "Retention",
            "type": "string",
            "description": "An optional string to describe the retention policy for a dataset. This field can also be applied more granularly at either the Collection or field level of a Dataset."
          },
          "fides_meta": {
            "$ref": "#/components/schemas/FidesMeta"
          },
          "fields": {
            "title": "Fields",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatasetField"
            },
            "description": "An optional array of objects that describe hierarchical/nested fields (typically found in NoSQL databases)."
          }
        },
        "description": "The DatasetField resource model.\n\nThis resource is nested within a DatasetCollection."
      },
      "DatasetMetadata": {
        "title": "DatasetMetadata",
        "type": "object",
        "properties": {
          "resource_id": {
            "title": "Resource Id",
            "type": "string"
          },
          "after": {
            "title": "After",
            "type": "array",
            "items": {
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            }
          }
        },
        "description": "The DatasetMetadata resource model.\n\nObject used to hold application specific metadata for a dataset"
      },
      "DatasetTraversalDetails": {
        "title": "DatasetTraversalDetails",
        "required": [
          "is_traversable"
        ],
        "type": "object",
        "properties": {
          "is_traversable": {
            "title": "Is Traversable",
            "type": "boolean"
          },
          "msg": {
            "title": "Msg",
            "type": "string"
          }
        },
        "description": "Describes whether or not the parent dataset is traversable; if not, includes\nan error message describing the traversal issues."
      },
      "DenyPrivacyRequests": {
        "title": "DenyPrivacyRequests",
        "required": [
          "request_ids"
        ],
        "type": "object",
        "properties": {
          "request_ids": {
            "title": "Request Ids",
            "maxItems": 50,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reason": {
            "title": "Reason",
            "type": "string"
          }
        },
        "description": "Pass in a list of privacy request ids and rejection reason"
      },
      "DrpAction": {
        "title": "DrpAction",
        "enum": [
          "access",
          "deletion",
          "sale:opt_out",
          "sale:opt_in",
          "access:categories",
          "access:specific"
        ],
        "description": "Enum to hold valid DRP actions. For more details, see:\nhttps://github.com/consumer-reports-digital-lab/data-rights-protocol#301-supported-rights-actions"
      },
      "DrpDataRightsResponse": {
        "title": "DrpDataRightsResponse",
        "required": [
          "version",
          "actions"
        ],
        "type": "object",
        "properties": {
          "version": {
            "title": "Version",
            "type": "string"
          },
          "api_base": {
            "title": "Api Base",
            "type": "string"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DrpAction"
            }
          },
          "user_relationships": {
            "title": "User Relationships",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Drp data rights response"
      },
      "DrpMeta": {
        "title": "DrpMeta",
        "required": [
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "title": "Version",
            "type": "string"
          }
        },
        "description": "Enum to hold Drp metadata. Only version is supported at this time"
      },
      "DrpPrivacyRequestCreate": {
        "title": "DrpPrivacyRequestCreate",
        "required": [
          "meta",
          "exercise",
          "identity"
        ],
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/DrpMeta"
          },
          "regime": {
            "$ref": "#/components/schemas/DrpRegime"
          },
          "exercise": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DrpAction"
            }
          },
          "relationships": {
            "title": "Relationships",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "identity": {
            "title": "Identity",
            "type": "string"
          },
          "status_callback": {
            "title": "Status Callback",
            "type": "string"
          }
        },
        "description": "Data required to create a DRP PrivacyRequest"
      },
      "DrpRegime": {
        "title": "DrpRegime",
        "enum": [
          "ccpa"
        ],
        "description": "Enum to hold Drp Regime. Only ccpa supported at this time"
      },
      "DrpRevokeRequest": {
        "title": "DrpRevokeRequest",
        "required": [
          "request_id"
        ],
        "type": "object",
        "properties": {
          "request_id": {
            "title": "Request Id",
            "type": "string"
          },
          "reason": {
            "title": "Reason",
            "type": "string"
          }
        },
        "description": "DRP Data Rights Revoke Request Body"
      },
      "DryRunDatasetResponse": {
        "title": "DryRunDatasetResponse",
        "required": [
          "collectionAddress"
        ],
        "type": "object",
        "properties": {
          "collectionAddress": {
            "$ref": "#/components/schemas/CollectionAddressResponse"
          },
          "query": {
            "title": "Query"
          }
        },
        "description": "Response model for dataset dry run"
      },
      "EmailDocsSchema": {
        "title": "EmailDocsSchema",
        "required": [
          "to_email"
        ],
        "type": "object",
        "properties": {
          "url": {
            "title": "Url",
            "type": "string"
          },
          "to_email": {
            "title": "To Email",
            "type": "string"
          },
          "test_email": {
            "title": "Test Email",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "EmailDocsSchema Secrets Schema for API Docs"
      },
      "Endpoint": {
        "title": "Endpoint",
        "required": [
          "name",
          "requests"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "requests": {
            "$ref": "#/components/schemas/SaaSRequestMap"
          },
          "after": {
            "title": "After",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "erase_after": {
            "title": "Erase After",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          }
        },
        "description": "A collection of read/update/delete requests which corresponds to a FidesDataset collection (by name)"
      },
      "Evaluation": {
        "title": "Evaluation",
        "required": [
          "fides_key",
          "status"
        ],
        "type": "object",
        "properties": {
          "fides_key": {
            "title": "Fides Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string",
            "description": "A uuid generated for each unique evaluation."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "description": "The model for possible evaluation results."
          },
          "violations": {
            "title": "Violations",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Violation"
            },
            "description": "The model for violations within an evaluation.",
            "default": []
          },
          "message": {
            "title": "Message",
            "type": "string",
            "description": "A human-readable string response for the evaluation.",
            "default": ""
          }
        },
        "description": "The Evaluation resource model.\n\nThis resource is created after an evaluation is executed."
      },
      "ExecutionAndAuditLogResponse": {
        "title": "ExecutionAndAuditLogResponse",
        "type": "object",
        "properties": {
          "connection_key": {
            "title": "Connection Key",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "fields_affected": {
            "title": "Fields Affected",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldsAffectedResponse"
            }
          },
          "message": {
            "title": "Message",
            "type": "string"
          },
          "action_type": {
            "$ref": "#/components/schemas/ActionType"
          },
          "status": {
            "title": "Status",
            "anyOf": [
              {
                "$ref": "#/components/schemas/ExecutionLogStatus"
              },
              {
                "$ref": "#/components/schemas/AuditLogAction"
              }
            ]
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "title": "User Id",
            "type": "string"
          }
        },
        "description": "Schema for the combined ExecutionLogs and Audit Logs\nassociated with a PrivacyRequest"
      },
      "ExecutionApplicationConfig": {
        "title": "ExecutionApplicationConfig",
        "type": "object",
        "properties": {
          "subject_identity_verification_required": {
            "title": "Subject Identity Verification Required",
            "type": "boolean"
          },
          "require_manual_request_approval": {
            "title": "Require Manual Request Approval",
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "description": "A base template for all other Fides Schemas to inherit from."
      },
      "ExecutionLogDetailResponse": {
        "title": "ExecutionLogDetailResponse",
        "required": [
          "action_type",
          "status"
        ],
        "type": "object",
        "properties": {
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "fields_affected": {
            "title": "Fields Affected",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldsAffectedResponse"
            }
          },
          "message": {
            "title": "Message",
            "type": "string"
          },
          "action_type": {
            "$ref": "#/components/schemas/ActionType"
          },
          "status": {
            "$ref": "#/components/schemas/ExecutionLogStatus"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "format": "date-time"
          },
          "connection_key": {
            "title": "Connection Key",
            "type": "string"
          },
          "dataset_name": {
            "title": "Dataset Name",
            "type": "string"
          }
        },
        "description": "Schema for the detailed ExecutionLogs when accessed directly"
      },
      "ExecutionLogStatus": {
        "title": "ExecutionLogStatus",
        "enum": [
          "in_processing",
          "pending",
          "complete",
          "error",
          "paused",
          "retrying",
          "skipped"
        ],
        "description": "Enum for execution log statuses, reflecting where they are in their workflow"
      },
      "ExtendedIdentityTypes": {
        "title": "ExtendedIdentityTypes",
        "required": [
          "email",
          "phone_number"
        ],
        "type": "object",
        "properties": {
          "email": {
            "title": "Email",
            "type": "boolean"
          },
          "phone_number": {
            "title": "Phone Number",
            "type": "boolean"
          },
          "cookie_ids": {
            "title": "Cookie Ids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          }
        },
        "description": "Overrides basic IdentityTypes to add cookie_ids"
      },
      "ExternalDatasetReference": {
        "title": "ExternalDatasetReference",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "label": {
            "title": "Label",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "FidesDataCategory": {
        "title": "FidesDataCategory",
        "enum": [
          "user.payment",
          "user.payment.financial_account_number",
          "system",
          "system.authentication",
          "system.operations",
          "user",
          "user.biometric",
          "user.biometric_health",
          "user.browsing_history",
          "user.demographic",
          "user.contact",
          "user.contact.address",
          "user.device",
          "user.device.cookie_id",
          "user.device.device_id",
          "user.device.ip_address",
          "user.gender",
          "user.location",
          "user.media_consumption",
          "user.non_specific_age",
          "user.observed",
          "user.profiling",
          "user.race",
          "user.religious_belief",
          "user.search_history",
          "user.sexual_orientation",
          "user.social",
          "user.telemetry",
          "user.unique_id",
          "user.user_sensor",
          "user.organization",
          "user.workplace",
          "user.sensor",
          "user.childrens",
          "user.contact.address.city",
          "user.contact.address.country",
          "user.contact.email",
          "user.contact.phone_number",
          "user.contact.address.postal_code",
          "user.contact.address.state",
          "user.contact.address.street",
          "user.credentials",
          "user.credentials.biometric_credentials",
          "user.credentials.password",
          "user.date_of_birth",
          "user.financial",
          "user.financial.account_number",
          "user.genetic",
          "user.government_id",
          "user.government_id.drivers_license_number",
          "user.government_id.national_identification_number",
          "user.government_id.passport_number",
          "user.health_and_medical",
          "user.job_title",
          "user.name",
          "user.political_opinion"
        ],
        "description": "An enumeration."
      },
      "FidesDatasetReference": {
        "title": "FidesDatasetReference",
        "required": [
          "dataset",
          "field"
        ],
        "type": "object",
        "properties": {
          "dataset": {
            "title": "Dataset",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string"
          },
          "field": {
            "title": "Field",
            "type": "string"
          },
          "direction": {
            "title": "Direction",
            "enum": [
              "from",
              "to"
            ],
            "type": "string"
          }
        },
        "description": "Reference to a field from another Collection"
      },
      "FidesDocsSchema": {
        "title": "FidesDocsSchema",
        "required": [
          "uri",
          "username",
          "password"
        ],
        "type": "object",
        "properties": {
          "url": {
            "title": "Url",
            "type": "string"
          },
          "uri": {
            "title": "Uri",
            "type": "string"
          },
          "username": {
            "title": "Username",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "polling_timeout": {
            "title": "Polling Timeout",
            "type": "integer"
          },
          "polling_interval": {
            "title": "Polling Interval",
            "type": "integer"
          }
        },
        "additionalProperties": false,
        "description": "Fides Child Secrets Schema for API docs"
      },
      "FidesMeta": {
        "title": "FidesMeta",
        "type": "object",
        "properties": {
          "references": {
            "title": "References",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FidesDatasetReference"
            },
            "description": "Fields that current field references or is referenced by. Used for drawing the edges of a DSR graph."
          },
          "identity": {
            "title": "Identity",
            "type": "string",
            "description": "The type of the identity data that should be used to query this collection for a DSR."
          },
          "primary_key": {
            "title": "Primary Key",
            "type": "boolean",
            "description": "Whether the current field can be considered a primary key of the current collection"
          },
          "data_type": {
            "title": "Data Type",
            "type": "string",
            "description": "Optionally specify the data type. Fides will attempt to cast values to this type when querying."
          },
          "length": {
            "title": "Length",
            "exclusiveMinimum": 0.0,
            "type": "integer",
            "description": "Optionally specify the allowable field length. Fides will not generate values that exceed this size."
          },
          "return_all_elements": {
            "title": "Return All Elements",
            "type": "boolean",
            "description": "Optionally specify to query for the entire array if the array is an entrypoint into the node. Default is False."
          },
          "read_only": {
            "title": "Read Only",
            "type": "boolean",
            "description": "Optionally specify if a field is read-only, meaning it can't be updated or deleted."
          }
        },
        "description": "Supplementary metadata used by the Fides application for additional features."
      },
      "FieldsAffectedResponse": {
        "title": "FieldsAffectedResponse",
        "type": "object",
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "field_name": {
            "title": "Field Name",
            "type": "string"
          },
          "data_categories": {
            "title": "Data Categories",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Schema detailing the individual fields affected by a particular query detailed in the ExecutionLog"
      },
      "Generate": {
        "title": "Generate",
        "required": [
          "config",
          "target",
          "type"
        ],
        "type": "object",
        "properties": {
          "config": {
            "title": "Config",
            "anyOf": [
              {
                "$ref": "#/components/schemas/AWSConfig"
              },
              {
                "$ref": "#/components/schemas/OktaConfig"
              },
              {
                "$ref": "#/components/schemas/DatabaseConfig"
              },
              {
                "$ref": "#/components/schemas/BigQueryConfig"
              }
            ]
          },
          "target": {
            "$ref": "#/components/schemas/ValidTargets"
          },
          "type": {
            "$ref": "#/components/schemas/GenerateTypes"
          }
        },
        "description": "Defines attributes for generating resources included in a request."
      },
      "GenerateRequestPayload": {
        "title": "GenerateRequestPayload",
        "required": [
          "organization_key",
          "generate"
        ],
        "type": "object",
        "properties": {
          "organization_key": {
            "title": "Organization Key",
            "type": "string"
          },
          "generate": {
            "$ref": "#/components/schemas/Generate"
          }
        },
        "description": "The model for the request body housing generate information."
      },
      "GenerateResponse": {
        "title": "GenerateResponse",
        "type": "object",
        "properties": {
          "generate_results": {
            "title": "Generate Results",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Dataset"
                },
                {
                  "$ref": "#/components/schemas/System"
                }
              ]
            }
          }
        },
        "description": "The model to house the response for generated infrastructure."
      },
      "GenerateTypes": {
        "title": "GenerateTypes",
        "enum": [
          "systems",
          "datasets"
        ],
        "type": "string",
        "description": "Generate Type Enum to capture the discrete possible values\nfor a valid type of resource to generate."
      },
      "GetRegistrationStatusResponse": {
        "title": "GetRegistrationStatusResponse",
        "type": "object",
        "properties": {
          "opt_in": {
            "title": "Opt In",
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "Reflects the registration status of a Fides deployment."
      },
      "HTTPMethod": {
        "title": "HTTPMethod",
        "enum": [
          "GET",
          "POST",
          "PATCH",
          "PUT",
          "DELETE",
          "OPTIONS",
          "HEAD"
        ],
        "description": "Enum to represent HTTP Methods"
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "Header": {
        "title": "Header",
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "value": {
            "title": "Value",
            "type": "string"
          }
        }
      },
      "Identity": {
        "title": "Identity",
        "type": "object",
        "properties": {
          "phone_number": {
            "title": "Phone Number",
            "type": "string"
          },
          "email": {
            "title": "Email",
            "type": "string"
          },
          "ga_client_id": {
            "title": "Ga Client Id",
            "type": "string"
          },
          "ljt_readerID": {
            "title": "Ljt Readerid",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "Some PII grouping pertaining to a human"
      },
      "IdentityVerificationConfigResponse": {
        "title": "IdentityVerificationConfigResponse",
        "required": [
          "identity_verification_required",
          "valid_email_config_exists"
        ],
        "type": "object",
        "properties": {
          "identity_verification_required": {
            "title": "Identity Verification Required",
            "type": "boolean"
          },
          "valid_email_config_exists": {
            "title": "Valid Email Config Exists",
            "type": "boolean"
          }
        },
        "description": "Response for identity verification config info"
      },
      "IncludeExcludeEnum": {
        "title": "IncludeExcludeEnum",
        "enum": [
          "ALL",
          "EXCLUDE",
          "INCLUDE",
          "NONE"
        ],
        "type": "string",
        "description": "Determine whether or not defined rights are\nbeing included or excluded."
      },
      "LegalBasisEnum": {
        "title": "LegalBasisEnum",
        "enum": [
          "Consent",
          "Contract",
          "Legal Obligation",
          "Vital Interest",
          "Public Interest",
          "Legitimate Interests"
        ],
        "type": "string",
        "description": "The model for allowable legal basis categories\n\nBased upon article 6 of the GDPR"
      },
      "MSSQLDocsSchema": {
        "title": "MSSQLDocsSchema",
        "type": "object",
        "properties": {
          "url": {
            "title": "Url",
            "type": "string"
          },
          "username": {
            "title": "Username",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "host": {
            "title": "Host",
            "type": "string"
          },
          "port": {
            "title": "Port",
            "type": "integer"
          },
          "dbname": {
            "title": "Dbname",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "MS SQL Secrets Schema for API Docs"
      },
      "ManualAction": {
        "title": "ManualAction",
        "required": [
          "locators"
        ],
        "type": "object",
        "properties": {
          "locators": {
            "title": "Locators",
            "type": "object"
          },
          "get": {
            "title": "Get",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "update": {
            "title": "Update",
            "type": "object"
          }
        },
        "description": "Surface how to retrieve or mask data in a database-agnostic way\n\n\"locators\" are similar to the SQL \"WHERE\" information.\n\"get\" contains a list of fields that should be retrieved from the source\n\"update\" is a dictionary of fields and the replacement value/masking strategy"
      },
      "ManualWebhookData": {
        "title": "ManualWebhookData",
        "required": [
          "checked",
          "fields"
        ],
        "type": "object",
        "properties": {
          "checked": {
            "title": "Checked",
            "type": "boolean"
          },
          "fields": {
            "title": "Fields",
            "type": "object"
          }
        },
        "description": "A base template for all other Fidesops Schemas to inherit from."
      },
      "ManualWebhookField": {
        "title": "ManualWebhookField",
        "required": [
          "pii_field"
        ],
        "type": "object",
        "properties": {
          "pii_field": {
            "title": "Pii Field",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "dsr_package_label": {
            "title": "Dsr Package Label",
            "maxLength": 200,
            "type": "string"
          }
        },
        "description": "Schema to describe the attributes on a manual webhook field"
      },
      "ManualWebhookSchemaforDocs": {
        "title": "ManualWebhookSchemaforDocs",
        "type": "object",
        "properties": {},
        "description": "Manual Webhooks Secrets Schema for API Docs"
      },
      "MariaDBDocsSchema": {
        "title": "MariaDBDocsSchema",
        "type": "object",
        "properties": {
          "url": {
            "title": "Url",
            "type": "string"
          },
          "username": {
            "title": "Username",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "dbname": {
            "title": "Dbname",
            "type": "string"
          },
          "host": {
            "title": "Host",
            "type": "string"
          },
          "port": {
            "title": "Port",
            "type": "integer"
          }
        },
        "additionalProperties": false,
        "description": "MariaDB Secrets Schema for API Docs"
      },
      "MaskingAPIRequest": {
        "title": "MaskingAPIRequest",
        "required": [
          "values",
          "masking_strategy"
        ],
        "type": "object",
        "properties": {
          "values": {
            "title": "Values",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "masking_strategy": {
            "title": "Masking Strategy",
            "anyOf": [
              {
                "$ref": "#/components/schemas/PolicyMaskingSpec"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyMaskingSpec"
                }
              }
            ]
          },
          "masking_strategies": {
            "title": "Masking Strategies",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyMaskingSpec"
            },
            "default": []
          }
        },
        "description": "The API Request for masking operations"
      },
      "MaskingAPIResponse": {
        "title": "MaskingAPIResponse",
        "required": [
          "plain",
          "masked_values"
        ],
        "type": "object",
        "properties": {
          "plain": {
            "title": "Plain",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "masked_values": {
            "title": "Masked Values",
            "type": "array",
            "items": {}
          }
        },
        "description": "The API Response returned upon masking completion"
      },
      "MaskingStrategyConfigurationDescription": {
        "title": "MaskingStrategyConfigurationDescription",
        "required": [
          "key",
          "description"
        ],
        "type": "object",
        "properties": {
          "key": {
            "title": "Key",
            "type": "string"
          },
          "optional": {
            "title": "Optional",
            "type": "boolean",
            "default": true
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        },
        "description": "The description model for a specific configuration in a masking strategy"
      },
      "MaskingStrategyDescription": {
        "title": "MaskingStrategyDescription",
        "required": [
          "name",
          "description",
          "configurations"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "configurations": {
            "title": "Configurations",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MaskingStrategyConfigurationDescription"
            }
          }
        },
        "description": "The description model for a masking strategy"
      },
      "MatchesEnum": {
        "title": "MatchesEnum",
        "enum": [
          "ANY",
          "ALL",
          "NONE",
          "OTHER"
        ],
        "type": "string",
        "description": "The MatchesEnum resource model.\n\nDetermines how the listed resources are matched in the evaluation logic."
      },
      "MessagingConfigRequest": {
        "title": "MessagingConfigRequest",
        "required": [
          "service_type",
          "name"
        ],
        "type": "object",
        "properties": {
          "service_type": {
            "$ref": "#/components/schemas/MessagingServiceType"
          },
          "details": {
            "title": "Details",
            "anyOf": [
              {
                "$ref": "#/components/schemas/MessagingServiceDetailsMailgun"
              },
              {
                "$ref": "#/components/schemas/MessagingServiceDetailsTwilioEmail"
              }
            ]
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "key": {
            "title": "Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "Messaging Config Request Schema"
      },
      "MessagingConfigRequestBase": {
        "title": "MessagingConfigRequestBase",
        "required": [
          "service_type"
        ],
        "type": "object",
        "properties": {
          "service_type": {
            "$ref": "#/components/schemas/MessagingServiceType"
          },
          "details": {
            "title": "Details",
            "anyOf": [
              {
                "$ref": "#/components/schemas/MessagingServiceDetailsMailgun"
              },
              {
                "$ref": "#/components/schemas/MessagingServiceDetailsTwilioEmail"
              }
            ]
          }
        },
        "additionalProperties": false,
        "description": "Base model shared by messaging config requests to provide validation on request inputs"
      },
      "MessagingConfigResponse": {
        "title": "MessagingConfigResponse",
        "required": [
          "service_type",
          "name",
          "key"
        ],
        "type": "object",
        "properties": {
          "service_type": {
            "$ref": "#/components/schemas/MessagingServiceType"
          },
          "details": {
            "title": "Details",
            "anyOf": [
              {
                "$ref": "#/components/schemas/MessagingServiceDetailsMailgun"
              },
              {
                "$ref": "#/components/schemas/MessagingServiceDetailsTwilioEmail"
              }
            ]
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "key": {
            "title": "Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "Messaging Config Response Schema"
      },
      "MessagingConfigStatus": {
        "title": "MessagingConfigStatus",
        "enum": [
          "configured",
          "not configured"
        ],
        "description": "Enum for configuration statuses of a messaging config"
      },
      "MessagingConfigStatusMessage": {
        "title": "MessagingConfigStatusMessage",
        "type": "object",
        "properties": {
          "config_status": {
            "$ref": "#/components/schemas/MessagingConfigStatus"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          }
        },
        "description": "A schema for checking configuration status of message config."
      },
      "MessagingConnectionTestStatus": {
        "title": "MessagingConnectionTestStatus",
        "enum": [
          "succeeded",
          "failed",
          "skipped"
        ],
        "description": "Enum for supplying statuses of validating credentials for a messaging Config"
      },
      "MessagingSecretsMailgunDocs": {
        "title": "MessagingSecretsMailgunDocs",
        "required": [
          "mailgun_api_key"
        ],
        "type": "object",
        "properties": {
          "mailgun_api_key": {
            "title": "Mailgun Api Key",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "The secrets required to connect to Mailgun, for documentation"
      },
      "MessagingSecretsTwilioEmailDocs": {
        "title": "MessagingSecretsTwilioEmailDocs",
        "required": [
          "twilio_api_key"
        ],
        "type": "object",
        "properties": {
          "twilio_api_key": {
            "title": "Twilio Api Key",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "The secrets required to connect to Twilio email, for documentation"
      },
      "MessagingSecretsTwilioSMSDocs": {
        "title": "MessagingSecretsTwilioSMSDocs",
        "required": [
          "twilio_account_sid",
          "twilio_auth_token"
        ],
        "type": "object",
        "properties": {
          "twilio_account_sid": {
            "title": "Twilio Account Sid",
            "type": "string"
          },
          "twilio_auth_token": {
            "title": "Twilio Auth Token",
            "type": "string"
          },
          "twilio_messaging_service_sid": {
            "title": "Twilio Messaging Service Sid",
            "type": "string"
          },
          "twilio_sender_phone_number": {
            "title": "Twilio Sender Phone Number",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "The secrets required to connect to Twilio sms, for documentation"
      },
      "MessagingServiceDetailsMailgun": {
        "title": "MessagingServiceDetailsMailgun",
        "required": [
          "domain"
        ],
        "type": "object",
        "properties": {
          "is_eu_domain": {
            "title": "Is Eu Domain",
            "type": "boolean",
            "default": false
          },
          "api_version": {
            "title": "Api Version",
            "type": "string",
            "default": "v3"
          },
          "domain": {
            "title": "Domain",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "The details required to represent a Mailgun email configuration."
      },
      "MessagingServiceDetailsTwilioEmail": {
        "title": "MessagingServiceDetailsTwilioEmail",
        "required": [
          "twilio_email_from"
        ],
        "type": "object",
        "properties": {
          "twilio_email_from": {
            "title": "Twilio Email From",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "The details required to represent a Twilio email configuration."
      },
      "MessagingServiceType": {
        "title": "MessagingServiceType",
        "enum": [
          "MAILGUN",
          "TWILIO_TEXT",
          "TWILIO_EMAIL"
        ],
        "description": "Enum for messaging service type. Upper-cased in the database"
      },
      "MongoDBDocsSchema": {
        "title": "MongoDBDocsSchema",
        "type": "object",
        "properties": {
          "url": {
            "title": "Url",
            "type": "string"
          },
          "username": {
            "title": "Username",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "host": {
            "title": "Host",
            "type": "string"
          },
          "port": {
            "title": "Port",
            "type": "integer"
          },
          "defaultauthdb": {
            "title": "Defaultauthdb",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "Mongo DB Secrets Schema for API docs"
      },
      "MySQLDocsSchema": {
        "title": "MySQLDocsSchema",
        "type": "object",
        "properties": {
          "url": {
            "title": "Url",
            "type": "string"
          },
          "username": {
            "title": "Username",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "dbname": {
            "title": "Dbname",
            "type": "string"
          },
          "host": {
            "title": "Host",
            "type": "string"
          },
          "port": {
            "title": "Port",
            "type": "integer"
          }
        },
        "additionalProperties": false,
        "description": "MySQL Secrets Schema for API Docs"
      },
      "NotificationApplicationConfig": {
        "title": "NotificationApplicationConfig",
        "type": "object",
        "properties": {
          "send_request_completion_notification": {
            "title": "Send Request Completion Notification",
            "type": "boolean"
          },
          "send_request_receipt_notification": {
            "title": "Send Request Receipt Notification",
            "type": "boolean"
          },
          "send_request_review_notification": {
            "title": "Send Request Review Notification",
            "type": "boolean"
          },
          "notification_service_type": {
            "title": "Notification Service Type",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "API model - configuration settings for data subject and/or data processor notifications"
      },
      "OktaConfig": {
        "title": "OktaConfig",
        "required": [
          "orgUrl",
          "token"
        ],
        "type": "object",
        "properties": {
          "orgUrl": {
            "title": "Orgurl",
            "type": "string"
          },
          "token": {
            "title": "Token",
            "type": "string"
          }
        },
        "description": "The model for the connection config for Okta"
      },
      "Organization": {
        "title": "Organization",
        "required": [
          "fides_key"
        ],
        "type": "object",
        "properties": {
          "fides_key": {
            "title": "Fides Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string",
            "description": "A unique key used to identify this resource."
          },
          "organization_fides_key": {
            "title": "Organization Fides Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string",
            "description": "Defines the Organization that this resource belongs to.",
            "default": "default_organization"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Human-Readable name for this resource."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A detailed description of what this resource is."
          },
          "organization_parent_key": {
            "title": "Organization Parent Key",
            "type": "null",
            "description": "An inherited field from the FidesModel that is unused with an Organization."
          },
          "controller": {
            "title": "Controller",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactDetails"
              }
            ],
            "description": "\n    The contact details information model.\n\n    Used to capture contact information for controllers, used\n    as part of exporting a data map / ROPA.\n\n    This model is nested under an Organization and\n    potentially under a system/dataset.\n    "
          },
          "data_protection_officer": {
            "title": "Data Protection Officer",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactDetails"
              }
            ],
            "description": "\n    The contact details information model.\n\n    Used to capture contact information for controllers, used\n    as part of exporting a data map / ROPA.\n\n    This model is nested under an Organization and\n    potentially under a system/dataset.\n    "
          },
          "fidesctl_meta": {
            "title": "Fidesctl Meta",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrganizationMetadata"
              }
            ],
            "description": "\n    The OrganizationMetadata resource model.\n\n    Object used to hold application specific metadata for an organization\n    "
          },
          "representative": {
            "title": "Representative",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactDetails"
              }
            ],
            "description": "\n    The contact details information model.\n\n    Used to capture contact information for controllers, used\n    as part of exporting a data map / ROPA.\n\n    This model is nested under an Organization and\n    potentially under a system/dataset.\n    "
          },
          "security_policy": {
            "title": "Security Policy",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "description": "Am optional URL to the organization security policy.",
            "format": "uri"
          }
        },
        "description": "The Organization resource model.\n\nThis resource is used as a way to organize all other resources."
      },
      "OrganizationMetadata": {
        "title": "OrganizationMetadata",
        "type": "object",
        "properties": {
          "resource_filters": {
            "title": "Resource Filters",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceFilter"
            },
            "description": "A list of filters that can be used when generating or scanning systems."
          }
        },
        "description": "The OrganizationMetadata resource model.\n\nObject used to hold application specific metadata for an organization"
      },
      "Page_ConnectionConfigurationResponse_": {
        "title": "Page[ConnectionConfigurationResponse]",
        "required": [
          "items",
          "total",
          "page",
          "size"
        ],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectionConfigurationResponse"
            }
          },
          "total": {
            "title": "Total",
            "minimum": 0.0,
            "type": "integer"
          },
          "page": {
            "title": "Page",
            "minimum": 1.0,
            "type": "integer"
          },
          "size": {
            "title": "Size",
            "minimum": 1.0,
            "type": "integer"
          }
        }
      },
      "Page_ConnectionSystemTypeMap_": {
        "title": "Page[ConnectionSystemTypeMap]",
        "required": [
          "items",
          "total",
          "page",
          "size"
        ],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectionSystemTypeMap"
            }
          },
          "total": {
            "title": "Total",
            "minimum": 0.0,
            "type": "integer"
          },
          "page": {
            "title": "Page",
            "minimum": 1.0,
            "type": "integer"
          },
          "size": {
            "title": "Size",
            "minimum": 1.0,
            "type": "integer"
          }
        }
      },
      "Page_DatasetConfigSchema_": {
        "title": "Page[DatasetConfigSchema]",
        "required": [
          "items",
          "total",
          "page",
          "size"
        ],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatasetConfigSchema"
            }
          },
          "total": {
            "title": "Total",
            "minimum": 0.0,
            "type": "integer"
          },
          "page": {
            "title": "Page",
            "minimum": 1.0,
            "type": "integer"
          },
          "size": {
            "title": "Size",
            "minimum": 1.0,
            "type": "integer"
          }
        }
      },
      "Page_Dataset_": {
        "title": "Page[Dataset]",
        "required": [
          "items",
          "total",
          "page",
          "size"
        ],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Dataset"
            }
          },
          "total": {
            "title": "Total",
            "minimum": 0.0,
            "type": "integer"
          },
          "page": {
            "title": "Page",
            "minimum": 1.0,
            "type": "integer"
          },
          "size": {
            "title": "Size",
            "minimum": 1.0,
            "type": "integer"
          }
        }
      },
      "Page_ExecutionLogDetailResponse_": {
        "title": "Page[ExecutionLogDetailResponse]",
        "required": [
          "items",
          "total",
          "page",
          "size"
        ],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExecutionLogDetailResponse"
            }
          },
          "total": {
            "title": "Total",
            "minimum": 0.0,
            "type": "integer"
          },
          "page": {
            "title": "Page",
            "minimum": 1.0,
            "type": "integer"
          },
          "size": {
            "title": "Size",
            "minimum": 1.0,
            "type": "integer"
          }
        }
      },
      "Page_MessagingConfigResponse_": {
        "title": "Page[MessagingConfigResponse]",
        "required": [
          "items",
          "total",
          "page",
          "size"
        ],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessagingConfigResponse"
            }
          },
          "total": {
            "title": "Total",
            "minimum": 0.0,
            "type": "integer"
          },
          "page": {
            "title": "Page",
            "minimum": 1.0,
            "type": "integer"
          },
          "size": {
            "title": "Size",
            "minimum": 1.0,
            "type": "integer"
          }
        }
      },
      "Page_PolicyResponse_": {
        "title": "Page[PolicyResponse]",
        "required": [
          "items",
          "total",
          "page",
          "size"
        ],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyResponse"
            }
          },
          "total": {
            "title": "Total",
            "minimum": 0.0,
            "type": "integer"
          },
          "page": {
            "title": "Page",
            "minimum": 1.0,
            "type": "integer"
          },
          "size": {
            "title": "Size",
            "minimum": 1.0,
            "type": "integer"
          }
        }
      },
      "Page_PolicyWebhookResponse_": {
        "title": "Page[PolicyWebhookResponse]",
        "required": [
          "items",
          "total",
          "page",
          "size"
        ],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyWebhookResponse"
            }
          },
          "total": {
            "title": "Total",
            "minimum": 0.0,
            "type": "integer"
          },
          "page": {
            "title": "Page",
            "minimum": 1.0,
            "type": "integer"
          },
          "size": {
            "title": "Size",
            "minimum": 1.0,
            "type": "integer"
          }
        }
      },
      "Page_RuleResponseWithTargets_": {
        "title": "Page[RuleResponseWithTargets]",
        "required": [
          "items",
          "total",
          "page",
          "size"
        ],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleResponseWithTargets"
            }
          },
          "total": {
            "title": "Total",
            "minimum": 0.0,
            "type": "integer"
          },
          "page": {
            "title": "Page",
            "minimum": 1.0,
            "type": "integer"
          },
          "size": {
            "title": "Size",
            "minimum": 1.0,
            "type": "integer"
          }
        }
      },
      "Page_RuleTarget_": {
        "title": "Page[RuleTarget]",
        "required": [
          "items",
          "total",
          "page",
          "size"
        ],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleTarget"
            }
          },
          "total": {
            "title": "Total",
            "minimum": 0.0,
            "type": "integer"
          },
          "page": {
            "title": "Page",
            "minimum": 1.0,
            "type": "integer"
          },
          "size": {
            "title": "Size",
            "minimum": 1.0,
            "type": "integer"
          }
        }
      },
      "Page_StorageDestinationResponse_": {
        "title": "Page[StorageDestinationResponse]",
        "required": [
          "items",
          "total",
          "page",
          "size"
        ],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StorageDestinationResponse"
            }
          },
          "total": {
            "title": "Total",
            "minimum": 0.0,
            "type": "integer"
          },
          "page": {
            "title": "Page",
            "minimum": 1.0,
            "type": "integer"
          },
          "size": {
            "title": "Size",
            "minimum": 1.0,
            "type": "integer"
          }
        }
      },
      "Page_Union_PrivacyRequestVerboseResponse__PrivacyRequestResponse__": {
        "title": "Page[Union[PrivacyRequestVerboseResponse, PrivacyRequestResponse]]",
        "required": [
          "items",
          "total",
          "page",
          "size"
        ],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/PrivacyRequestVerboseResponse"
                },
                {
                  "$ref": "#/components/schemas/PrivacyRequestResponse"
                }
              ]
            }
          },
          "total": {
            "title": "Total",
            "minimum": 0.0,
            "type": "integer"
          },
          "page": {
            "title": "Page",
            "minimum": 1.0,
            "type": "integer"
          },
          "size": {
            "title": "Size",
            "minimum": 1.0,
            "type": "integer"
          }
        }
      },
      "Page_UserResponse_": {
        "title": "Page[UserResponse]",
        "required": [
          "items",
          "total",
          "page",
          "size"
        ],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserResponse"
            }
          },
          "total": {
            "title": "Total",
            "minimum": 0.0,
            "type": "integer"
          },
          "page": {
            "title": "Page",
            "minimum": 1.0,
            "type": "integer"
          },
          "size": {
            "title": "Size",
            "minimum": 1.0,
            "type": "integer"
          }
        }
      },
      "ParamValue": {
        "title": "ParamValue",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "identity": {
            "title": "Identity",
            "type": "string"
          },
          "references": {
            "title": "References",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/FidesDatasetReference"
                },
                {
                  "type": "string"
                }
              ]
            }
          },
          "connector_param": {
            "title": "Connector Param",
            "type": "string"
          },
          "unpack": {
            "title": "Unpack",
            "type": "boolean",
            "default": false
          }
        },
        "description": "A named variable which can be sourced from identities, dataset references, or connector params. These values\nare used to replace the placeholders in the path, header, query, and body param values."
      },
      "PolicyMaskingSpec": {
        "title": "PolicyMaskingSpec",
        "required": [
          "strategy",
          "configuration"
        ],
        "type": "object",
        "properties": {
          "strategy": {
            "title": "Strategy",
            "type": "string"
          },
          "configuration": {
            "title": "Configuration",
            "type": "object"
          }
        },
        "description": "Models the masking strategy definition"
      },
      "PolicyMaskingSpecResponse": {
        "title": "PolicyMaskingSpecResponse",
        "required": [
          "strategy"
        ],
        "type": "object",
        "properties": {
          "strategy": {
            "title": "Strategy",
            "type": "string"
          }
        },
        "description": "The schema to use when returning a masking strategy via the API. This schema omits other\npotentially sensitive fields in the masking configuration, for example the encryption\nalgorithm."
      },
      "PolicyResponse": {
        "title": "PolicyResponse",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "key": {
            "title": "Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string"
          },
          "drp_action": {
            "$ref": "#/components/schemas/DrpAction"
          },
          "execution_timeframe": {
            "title": "Execution Timeframe",
            "type": "integer"
          },
          "rules": {
            "title": "Rules",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleResponse"
            }
          }
        },
        "description": "A holistic view of a Policy record, including all foreign keys by default."
      },
      "PolicyRule": {
        "title": "PolicyRule",
        "required": [
          "name",
          "data_categories",
          "data_uses",
          "data_subjects"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "data_categories": {
            "title": "Data Categories",
            "allOf": [
              {
                "$ref": "#/components/schemas/PrivacyRule"
              }
            ],
            "description": "\n    The PrivacyRule resource model.\n\n    A list of privacy data types and what match method to use.\n    "
          },
          "data_uses": {
            "title": "Data Uses",
            "allOf": [
              {
                "$ref": "#/components/schemas/PrivacyRule"
              }
            ],
            "description": "\n    The PrivacyRule resource model.\n\n    A list of privacy data types and what match method to use.\n    "
          },
          "data_subjects": {
            "title": "Data Subjects",
            "allOf": [
              {
                "$ref": "#/components/schemas/PrivacyRule"
              }
            ],
            "description": "\n    The PrivacyRule resource model.\n\n    A list of privacy data types and what match method to use.\n    "
          },
          "data_qualifier": {
            "title": "Data Qualifier",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string",
            "description": "The fides key of the data qualifier to be used in a privacy rule.",
            "default": "aggregated.anonymized.unlinked_pseudonymized.pseudonymized.identified"
          }
        },
        "description": "The PolicyRule resource model.\n\nDescribes the allowed combination of the various privacy data types."
      },
      "PolicyWebhookCreate": {
        "title": "PolicyWebhookCreate",
        "required": [
          "direction",
          "connection_config_key"
        ],
        "type": "object",
        "properties": {
          "direction": {
            "$ref": "#/components/schemas/WebhookDirection"
          },
          "key": {
            "title": "Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "connection_config_key": {
            "title": "Connection Config Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string"
          }
        },
        "description": "Request schema for creating/updating a Policy Webhook"
      },
      "PolicyWebhookDeleteResponse": {
        "title": "PolicyWebhookDeleteResponse",
        "required": [
          "new_order"
        ],
        "type": "object",
        "properties": {
          "new_order": {
            "title": "New Order",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookOrder"
            }
          }
        },
        "description": "Response schema after deleting a webhook; new_order includes remaining reordered webhooks if applicable"
      },
      "PolicyWebhookResponse": {
        "title": "PolicyWebhookResponse",
        "required": [
          "direction",
          "order"
        ],
        "type": "object",
        "properties": {
          "direction": {
            "$ref": "#/components/schemas/WebhookDirection"
          },
          "key": {
            "title": "Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "connection_config": {
            "$ref": "#/components/schemas/ConnectionConfigurationResponse"
          },
          "order": {
            "title": "Order",
            "type": "integer"
          }
        },
        "description": "Response schema after creating a PolicyWebhook"
      },
      "PolicyWebhookUpdate": {
        "title": "PolicyWebhookUpdate",
        "type": "object",
        "properties": {
          "direction": {
            "$ref": "#/components/schemas/WebhookDirection"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "connection_config_key": {
            "title": "Connection Config Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string"
          },
          "order": {
            "title": "Order",
            "type": "integer"
          }
        },
        "additionalProperties": false,
        "description": "Request schema for updating a single webhook - fields are optional"
      },
      "PolicyWebhookUpdateResponse": {
        "title": "PolicyWebhookUpdateResponse",
        "required": [
          "resource",
          "new_order"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/PolicyWebhookResponse"
          },
          "new_order": {
            "title": "New Order",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookOrder"
            }
          }
        },
        "description": "Response schema after a PATCH to a single webhook - because updating the order of this webhook can update the\norder of other webhooks, new_order will include the new order if order was adjusted at all"
      },
      "PostgreSQLDocsSchema": {
        "title": "PostgreSQLDocsSchema",
        "type": "object",
        "properties": {
          "url": {
            "title": "Url",
            "type": "string"
          },
          "username": {
            "title": "Username",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "dbname": {
            "title": "Dbname",
            "type": "string"
          },
          "db_schema": {
            "title": "Db Schema",
            "type": "string"
          },
          "host": {
            "title": "Host",
            "type": "string"
          },
          "port": {
            "title": "Port",
            "type": "integer"
          }
        },
        "additionalProperties": false,
        "description": "Postgres Secrets Schema for API Docs"
      },
      "PrivacyDeclaration": {
        "title": "PrivacyDeclaration",
        "required": [
          "data_categories",
          "data_use",
          "data_subjects"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the privacy declaration on the system."
          },
          "data_categories": {
            "title": "Data Categories",
            "type": "array",
            "items": {
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "description": "An array of data categories describing a system in a privacy declaration."
          },
          "data_use": {
            "title": "Data Use",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string",
            "description": "The Data Use describing a system in a privacy declaration."
          },
          "data_qualifier": {
            "title": "Data Qualifier",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string",
            "description": "The fides key of the data qualifier describing a system in a privacy declaration.",
            "default": "aggregated.anonymized.unlinked_pseudonymized.pseudonymized.identified"
          },
          "data_subjects": {
            "title": "Data Subjects",
            "type": "array",
            "items": {
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "description": "An array of data subjects describing a system in a privacy declaration."
          },
          "dataset_references": {
            "title": "Dataset References",
            "type": "array",
            "items": {
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "description": "Referenced Dataset fides keys used by the system."
          },
          "egress": {
            "title": "Egress",
            "type": "array",
            "items": {
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "description": "The resources to which data is sent. Any `fides_key`s included in this list reference `DataFlow` entries in the `egress` array of any `System` resources to which this `PrivacyDeclaration` is applied."
          },
          "ingress": {
            "title": "Ingress",
            "type": "array",
            "items": {
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "description": "The resources from which data is received. Any `fides_key`s included in this list reference `DataFlow` entries in the `ingress` array of any `System` resources to which this `PrivacyDeclaration` is applied."
          }
        },
        "description": "The PrivacyDeclaration resource model.\n\nStates a function of a system, and describes how it relates\nto the privacy data types."
      },
      "PrivacyRequestCreate": {
        "title": "PrivacyRequestCreate",
        "required": [
          "identity",
          "policy_key"
        ],
        "type": "object",
        "properties": {
          "external_id": {
            "title": "External Id",
            "type": "string"
          },
          "started_processing_at": {
            "title": "Started Processing At",
            "type": "string",
            "format": "date-time"
          },
          "finished_processing_at": {
            "title": "Finished Processing At",
            "type": "string",
            "format": "date-time"
          },
          "requested_at": {
            "title": "Requested At",
            "type": "string",
            "format": "date-time"
          },
          "identity": {
            "$ref": "#/components/schemas/Identity"
          },
          "policy_key": {
            "title": "Policy Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string"
          },
          "encryption_key": {
            "title": "Encryption Key",
            "type": "string"
          },
          "consent_preferences": {
            "title": "Consent Preferences",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Consent"
            }
          }
        },
        "description": "Data required to create a PrivacyRequest"
      },
      "PrivacyRequestDRPStatus": {
        "title": "PrivacyRequestDRPStatus",
        "enum": [
          "open",
          "in_progress",
          "fulfilled",
          "revoked",
          "denied",
          "expired"
        ],
        "description": "A list of privacy request statuses specified by the Data Rights Protocol."
      },
      "PrivacyRequestDRPStatusResponse": {
        "title": "PrivacyRequestDRPStatusResponse",
        "required": [
          "request_id",
          "received_at",
          "status"
        ],
        "type": "object",
        "properties": {
          "request_id": {
            "title": "Request Id",
            "type": "string"
          },
          "received_at": {
            "title": "Received At",
            "type": "string",
            "format": "date-time"
          },
          "expected_by": {
            "title": "Expected By",
            "type": "string",
            "format": "date-time"
          },
          "processing_details": {
            "title": "Processing Details",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/PrivacyRequestDRPStatus"
          },
          "reason": {
            "title": "Reason",
            "type": "string"
          },
          "user_verification_url": {
            "title": "User Verification Url",
            "type": "string"
          }
        },
        "description": "A Fidesops PrivacyRequest updated to fit the Data Rights Protocol specification."
      },
      "PrivacyRequestNotificationInfo": {
        "title": "PrivacyRequestNotificationInfo",
        "required": [
          "email_addresses",
          "notify_after_failures"
        ],
        "type": "object",
        "properties": {
          "email_addresses": {
            "title": "Email Addresses",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "notify_after_failures": {
            "title": "Notify After Failures",
            "type": "integer"
          }
        },
        "description": "A base template for all other Fidesops Schemas to inherit from."
      },
      "PrivacyRequestResponse": {
        "title": "PrivacyRequestResponse",
        "required": [
          "id",
          "status",
          "policy"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "started_processing_at": {
            "title": "Started Processing At",
            "type": "string",
            "format": "date-time"
          },
          "reviewed_at": {
            "title": "Reviewed At",
            "type": "string",
            "format": "date-time"
          },
          "reviewed_by": {
            "title": "Reviewed By",
            "type": "string"
          },
          "reviewer": {
            "$ref": "#/components/schemas/PrivacyRequestReviewer"
          },
          "finished_processing_at": {
            "title": "Finished Processing At",
            "type": "string",
            "format": "date-time"
          },
          "identity_verified_at": {
            "title": "Identity Verified At",
            "type": "string",
            "format": "date-time"
          },
          "paused_at": {
            "title": "Paused At",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/PrivacyRequestStatus"
          },
          "external_id": {
            "title": "External Id",
            "type": "string"
          },
          "identity": {
            "title": "Identity",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "policy": {
            "$ref": "#/components/schemas/PolicyResponse"
          },
          "action_required_details": {
            "$ref": "#/components/schemas/CheckpointActionRequiredDetails"
          },
          "resume_endpoint": {
            "title": "Resume Endpoint",
            "type": "string"
          },
          "days_left": {
            "title": "Days Left",
            "type": "integer"
          }
        },
        "description": "Schema to check the status of a PrivacyRequest"
      },
      "PrivacyRequestResumeFormat": {
        "title": "PrivacyRequestResumeFormat",
        "type": "object",
        "properties": {
          "derived_identity": {
            "title": "Derived Identity",
            "allOf": [
              {
                "$ref": "#/components/schemas/Identity"
              }
            ],
            "default": {}
          }
        },
        "description": "Expected request body to resume a privacy request after it was paused by a webhook"
      },
      "PrivacyRequestReviewer": {
        "title": "PrivacyRequestReviewer",
        "required": [
          "id",
          "username"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "username": {
            "title": "Username",
            "type": "string"
          }
        },
        "description": "Data we can expose via the PrivacyRequest.reviewer relation"
      },
      "PrivacyRequestStatus": {
        "title": "PrivacyRequestStatus",
        "enum": [
          "identity_unverified",
          "requires_input",
          "pending",
          "approved",
          "denied",
          "in_processing",
          "complete",
          "paused",
          "awaiting_consent_email_send",
          "canceled",
          "error"
        ],
        "type": "string",
        "description": "Enum for privacy request statuses, reflecting where they are in the Privacy Request Lifecycle"
      },
      "PrivacyRequestVerboseResponse": {
        "title": "PrivacyRequestVerboseResponse",
        "required": [
          "id",
          "status",
          "policy",
          "results"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "started_processing_at": {
            "title": "Started Processing At",
            "type": "string",
            "format": "date-time"
          },
          "reviewed_at": {
            "title": "Reviewed At",
            "type": "string",
            "format": "date-time"
          },
          "reviewed_by": {
            "title": "Reviewed By",
            "type": "string"
          },
          "reviewer": {
            "$ref": "#/components/schemas/PrivacyRequestReviewer"
          },
          "finished_processing_at": {
            "title": "Finished Processing At",
            "type": "string",
            "format": "date-time"
          },
          "identity_verified_at": {
            "title": "Identity Verified At",
            "type": "string",
            "format": "date-time"
          },
          "paused_at": {
            "title": "Paused At",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/PrivacyRequestStatus"
          },
          "external_id": {
            "title": "External Id",
            "type": "string"
          },
          "identity": {
            "title": "Identity",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "policy": {
            "$ref": "#/components/schemas/PolicyResponse"
          },
          "action_required_details": {
            "$ref": "#/components/schemas/CheckpointActionRequiredDetails"
          },
          "resume_endpoint": {
            "title": "Resume Endpoint",
            "type": "string"
          },
          "days_left": {
            "title": "Days Left",
            "type": "integer"
          },
          "results": {
            "title": "Results",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ExecutionAndAuditLogResponse"
              }
            }
          }
        },
        "description": "The schema for the more detailed PrivacyRequest response containing both\ndetailed execution logs and audit logs."
      },
      "PrivacyRule": {
        "title": "PrivacyRule",
        "required": [
          "matches",
          "values"
        ],
        "type": "object",
        "properties": {
          "matches": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MatchesEnum"
              }
            ],
            "description": "\n    The MatchesEnum resource model.\n\n    Determines how the listed resources are matched in the evaluation logic.\n    "
          },
          "values": {
            "title": "Values",
            "type": "array",
            "items": {
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "description": "A list of fides keys to be used with the matching type in a privacy rule."
          }
        },
        "description": "The PrivacyRule resource model.\n\nA list of privacy data types and what match method to use."
      },
      "QueryParam": {
        "title": "QueryParam",
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "value": {
            "title": "Value",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ]
          }
        }
      },
      "RateLimit": {
        "title": "RateLimit",
        "required": [
          "rate",
          "period"
        ],
        "type": "object",
        "properties": {
          "rate": {
            "title": "Rate",
            "type": "integer"
          },
          "period": {
            "$ref": "#/components/schemas/RateLimitPeriod"
          },
          "custom_key": {
            "title": "Custom Key",
            "type": "string"
          }
        },
        "description": "A config object which allows configuring rate limits for connectors"
      },
      "RateLimitConfig": {
        "title": "RateLimitConfig",
        "type": "object",
        "properties": {
          "limits": {
            "title": "Limits",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RateLimit"
            }
          },
          "enabled": {
            "title": "Enabled",
            "type": "boolean",
            "default": true
          }
        },
        "description": "A config object which allows configuring rate limits for connectors"
      },
      "RateLimitPeriod": {
        "title": "RateLimitPeriod",
        "enum": [
          "second",
          "minute",
          "hour",
          "day"
        ],
        "type": "string",
        "description": "Defines the periods supported by rate limit config"
      },
      "RedshiftDocsSchema": {
        "title": "RedshiftDocsSchema",
        "type": "object",
        "properties": {
          "url": {
            "title": "Url",
            "type": "string"
          },
          "host": {
            "title": "Host",
            "type": "string"
          },
          "port": {
            "title": "Port",
            "type": "integer"
          },
          "database": {
            "title": "Database",
            "type": "string"
          },
          "user": {
            "title": "User",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "db_schema": {
            "title": "Db Schema",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "Redshift Secrets Schema for API Docs"
      },
      "Registration": {
        "title": "Registration",
        "required": [
          "opt_in",
          "analytics_id"
        ],
        "type": "object",
        "properties": {
          "opt_in": {
            "title": "Opt In",
            "type": "boolean"
          },
          "analytics_id": {
            "title": "Analytics Id",
            "type": "string"
          },
          "user_email": {
            "title": "User Email",
            "type": "string"
          },
          "user_organization": {
            "title": "User Organization",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "Describes a Fides registration."
      },
      "Registry": {
        "title": "Registry",
        "required": [
          "fides_key"
        ],
        "type": "object",
        "properties": {
          "fides_key": {
            "title": "Fides Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string",
            "description": "A unique key used to identify this resource."
          },
          "organization_fides_key": {
            "title": "Organization Fides Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string",
            "description": "Defines the Organization that this resource belongs to.",
            "default": "default_organization"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Human-Readable name for this resource."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A detailed description of what this resource is."
          }
        },
        "description": "The Registry resource model.\n\nSystems can be assigned to this resource, but it doesn't inherently\npoint to any other resources."
      },
      "ResourceFilter": {
        "title": "ResourceFilter",
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string",
            "description": "The type of filter to be used (i.e. ignore_resource_arn)"
          },
          "value": {
            "title": "Value",
            "type": "string",
            "description": "A string representation of resources to be filtered. Can include wildcards."
          }
        },
        "description": "The ResourceFilter resource model."
      },
      "ResponseFormat": {
        "title": "ResponseFormat",
        "enum": [
          "json",
          "csv"
        ],
        "description": "Response formats"
      },
      "ReviewPrivacyRequestIds": {
        "title": "ReviewPrivacyRequestIds",
        "required": [
          "request_ids"
        ],
        "type": "object",
        "properties": {
          "request_ids": {
            "title": "Request Ids",
            "maxItems": 50,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Pass in a list of privacy request ids"
      },
      "RoleRegistry": {
        "title": "RoleRegistry",
        "enum": [
          "admin",
          "viewer_and_privacy_request_manager",
          "viewer",
          "privacy_request_manager"
        ],
        "description": "Enum of available roles"
      },
      "RowCountRequest": {
        "title": "RowCountRequest",
        "required": [
          "row_count"
        ],
        "type": "object",
        "properties": {
          "row_count": {
            "title": "Row Count",
            "type": "integer"
          }
        },
        "description": "Schema for a user to manually confirm data erased for a collection"
      },
      "RuleCreate": {
        "title": "RuleCreate",
        "required": [
          "name",
          "action_type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "key": {
            "title": "Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string"
          },
          "action_type": {
            "$ref": "#/components/schemas/ActionType"
          },
          "storage_destination_key": {
            "title": "Storage Destination Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string"
          },
          "masking_strategy": {
            "$ref": "#/components/schemas/PolicyMaskingSpec"
          }
        },
        "description": "The schema to use when creating a Rule. This schema accepts a storage_destination_key\nover a composite object."
      },
      "RuleResponse": {
        "title": "RuleResponse",
        "required": [
          "name",
          "action_type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "key": {
            "title": "Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string"
          },
          "action_type": {
            "$ref": "#/components/schemas/ActionType"
          },
          "storage_destination": {
            "$ref": "#/components/schemas/StorageDestinationResponse"
          },
          "masking_strategy": {
            "$ref": "#/components/schemas/PolicyMaskingSpecResponse"
          }
        },
        "description": "The schema to use when returning a Rule via the API. This schema uses a censored version\nof the `PolicyMaskingSpec` that omits the configuration to avoid exposing secrets."
      },
      "RuleResponseWithTargets": {
        "title": "RuleResponseWithTargets",
        "required": [
          "name",
          "action_type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "key": {
            "title": "Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string"
          },
          "action_type": {
            "$ref": "#/components/schemas/ActionType"
          },
          "targets": {
            "title": "Targets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleTarget"
            }
          },
          "storage_destination": {
            "$ref": "#/components/schemas/StorageDestinationResponse"
          },
          "masking_strategy": {
            "$ref": "#/components/schemas/PolicyMaskingSpecResponse"
          }
        },
        "description": "The schema to use when returning a Rule via the API and when including the Rule's targets\nis desired. This schema uses a censored version of the `PolicyMaskingSpec` that omits the\nconfiguration to avoid exposing secrets."
      },
      "RuleTarget": {
        "title": "RuleTarget",
        "required": [
          "data_category"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "key": {
            "title": "Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string"
          },
          "data_category": {
            "$ref": "#/components/schemas/FidesDataCategory"
          }
        },
        "description": "An external representation of a Rule's target DataCategory within a Fidesops Policy"
      },
      "S3AuthMethod": {
        "title": "S3AuthMethod",
        "enum": [
          "automatic",
          "secret_keys"
        ],
        "description": "An enumeration."
      },
      "SaaSConfig": {
        "title": "SaaSConfig",
        "required": [
          "fides_key",
          "name",
          "type",
          "description",
          "version",
          "connector_params",
          "client_config",
          "endpoints",
          "test_request"
        ],
        "type": "object",
        "properties": {
          "fides_key": {
            "title": "Fides Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "type": {
            "title": "Type",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "version": {
            "title": "Version",
            "type": "string"
          },
          "connector_params": {
            "title": "Connector Params",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectorParam"
            }
          },
          "external_references": {
            "title": "External References",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalDatasetReference"
            }
          },
          "client_config": {
            "$ref": "#/components/schemas/ClientConfig"
          },
          "endpoints": {
            "title": "Endpoints",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Endpoint"
            }
          },
          "test_request": {
            "$ref": "#/components/schemas/SaaSRequest"
          },
          "data_protection_request": {
            "$ref": "#/components/schemas/SaaSRequest"
          },
          "rate_limit_config": {
            "$ref": "#/components/schemas/RateLimitConfig"
          },
          "consent_requests": {
            "$ref": "#/components/schemas/ConsentRequestMap"
          }
        },
        "description": "Used to store endpoint and param configurations for a SaaS connector.\nThis is done to separate the details of how to make the API calls\nfrom the data provided by a given API collection.\n\nThe required fields for the config are converted into a Dataset which is\nmerged with the standard Fidesops Dataset to provide a complete set of dependencies\nfor the graph traversal."
      },
      "SaaSConfigBase": {
        "title": "SaaSConfigBase",
        "required": [
          "fides_key",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "fides_key": {
            "title": "Fides Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "type": {
            "title": "Type",
            "type": "string"
          }
        },
        "description": "Used to store base info for a saas config"
      },
      "SaaSConfigValidationDetails": {
        "title": "SaaSConfigValidationDetails",
        "type": "object",
        "properties": {
          "msg": {
            "title": "Msg",
            "type": "string"
          }
        },
        "description": "Message with any validation issues with the SaaS config"
      },
      "SaaSRequest": {
        "title": "SaaSRequest",
        "type": "object",
        "properties": {
          "request_override": {
            "title": "Request Override",
            "type": "string"
          },
          "path": {
            "title": "Path",
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/HTTPMethod"
          },
          "headers": {
            "title": "Headers",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Header"
            },
            "default": []
          },
          "query_params": {
            "title": "Query Params",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueryParam"
            },
            "default": []
          },
          "body": {
            "title": "Body",
            "type": "string"
          },
          "param_values": {
            "title": "Param Values",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParamValue"
            },
            "default": []
          },
          "client_config": {
            "$ref": "#/components/schemas/ClientConfig"
          },
          "data_path": {
            "title": "Data Path",
            "type": "string"
          },
          "postprocessors": {
            "title": "Postprocessors",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Strategy"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Strategy"
          },
          "grouped_inputs": {
            "title": "Grouped Inputs",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "ignore_errors": {
            "title": "Ignore Errors",
            "type": "boolean",
            "default": false
          },
          "rate_limit_config": {
            "$ref": "#/components/schemas/RateLimitConfig"
          },
          "skip_missing_param_values": {
            "title": "Skip Missing Param Values",
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "A single request with static or dynamic path, headers, query, and body params.\nAlso specifies the names and sources for the param values needed to build the request.\n\nIncludes optional strategies for postprocessing and pagination."
      },
      "SaaSRequestMap": {
        "title": "SaaSRequestMap",
        "type": "object",
        "properties": {
          "read": {
            "title": "Read",
            "anyOf": [
              {
                "$ref": "#/components/schemas/SaaSRequest"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SaaSRequest"
                }
              }
            ],
            "default": []
          },
          "update": {
            "$ref": "#/components/schemas/SaaSRequest"
          },
          "delete": {
            "$ref": "#/components/schemas/SaaSRequest"
          }
        },
        "description": "A map of actions to SaaS requests"
      },
      "SaaSSchema": {
        "title": "SaaSSchema",
        "type": "object",
        "properties": {},
        "additionalProperties": false,
        "description": "Abstract base schema for updating SaaS connection configuration secrets.\nFields are added during runtime based on the connector_params and any\nexternal_references in the passed in saas_config"
      },
      "SaasConnectionTemplateResponse": {
        "title": "SaasConnectionTemplateResponse",
        "required": [
          "connection",
          "dataset"
        ],
        "type": "object",
        "properties": {
          "connection": {
            "$ref": "#/components/schemas/ConnectionConfigurationResponse"
          },
          "dataset": {
            "$ref": "#/components/schemas/Dataset"
          }
        }
      },
      "SaasConnectionTemplateValues": {
        "title": "SaasConnectionTemplateValues",
        "required": [
          "name",
          "secrets",
          "instance_key"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "key": {
            "title": "Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "secrets": {
            "title": "Secrets",
            "anyOf": [
              {
                "$ref": "#/components/schemas/MongoDBDocsSchema"
              },
              {
                "$ref": "#/components/schemas/PostgreSQLDocsSchema"
              },
              {
                "$ref": "#/components/schemas/MySQLDocsSchema"
              },
              {
                "$ref": "#/components/schemas/RedshiftDocsSchema"
              },
              {
                "$ref": "#/components/schemas/SnowflakeDocsSchema"
              },
              {
                "$ref": "#/components/schemas/MSSQLDocsSchema"
              },
              {
                "$ref": "#/components/schemas/MariaDBDocsSchema"
              },
              {
                "$ref": "#/components/schemas/BigQueryDocsSchema"
              },
              {
                "$ref": "#/components/schemas/SaaSSchema"
              },
              {
                "$ref": "#/components/schemas/EmailDocsSchema"
              },
              {
                "$ref": "#/components/schemas/ManualWebhookSchemaforDocs"
              },
              {
                "$ref": "#/components/schemas/TimescaleDocsSchema"
              },
              {
                "$ref": "#/components/schemas/FidesDocsSchema"
              },
              {
                "$ref": "#/components/schemas/SovrnEmailDocsSchema"
              }
            ]
          },
          "instance_key": {
            "title": "Instance Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string"
          }
        },
        "description": "Schema with values to create both a Saas ConnectionConfig and DatasetConfig from a template"
      },
      "SnowflakeDocsSchema": {
        "title": "SnowflakeDocsSchema",
        "type": "object",
        "properties": {
          "url": {
            "title": "Url",
            "type": "string"
          },
          "user_login_name": {
            "title": "User Login Name",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "account_identifier": {
            "title": "Account Identifier",
            "type": "string"
          },
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "schema_name": {
            "title": "Schema Name",
            "type": "string"
          },
          "warehouse_name": {
            "title": "Warehouse Name",
            "type": "string"
          },
          "role_name": {
            "title": "Role Name",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "Snowflake Secrets Schema for API Docs"
      },
      "SovrnEmailDocsSchema": {
        "title": "SovrnEmailDocsSchema",
        "required": [
          "recipient_email_address",
          "advanced_settings"
        ],
        "type": "object",
        "properties": {
          "third_party_vendor_name": {
            "title": "Third Party Vendor Name",
            "type": "string",
            "default": "Sovrn"
          },
          "recipient_email_address": {
            "title": "Recipient Email Address",
            "type": "string"
          },
          "test_email_address": {
            "title": "Test Email Address",
            "type": "string"
          },
          "advanced_settings": {
            "$ref": "#/components/schemas/AdvancedSettingsWithExtendedIdentityTypes"
          }
        },
        "additionalProperties": false,
        "description": "SovrnDocsSchema Secrets Schema for API Docs"
      },
      "SpecialCategoriesEnum": {
        "title": "SpecialCategoriesEnum",
        "enum": [
          "Consent",
          "Employment",
          "Vital Interests",
          "Non-profit Bodies",
          "Public by Data Subject",
          "Legal Claims",
          "Substantial Public Interest",
          "Medical",
          "Public Health Interest"
        ],
        "type": "string",
        "description": "The model for processing special categories\nof personal data.\n\nBased upon article 9 of the GDPR"
      },
      "StatusEnum": {
        "title": "StatusEnum",
        "enum": [
          "FAIL",
          "PASS"
        ],
        "type": "string",
        "description": "The model for possible evaluation results."
      },
      "StorageApplicationConfig": {
        "title": "StorageApplicationConfig",
        "required": [
          "active_default_storage_type"
        ],
        "type": "object",
        "properties": {
          "active_default_storage_type": {
            "$ref": "#/components/schemas/StorageTypeApiAccepted"
          }
        },
        "additionalProperties": false,
        "description": "A base template for all other Fides Schemas to inherit from."
      },
      "StorageConfigStatus": {
        "title": "StorageConfigStatus",
        "enum": [
          "configured",
          "not configured"
        ],
        "description": "Enum for configuration statuses of a storage config"
      },
      "StorageConfigStatusMessage": {
        "title": "StorageConfigStatusMessage",
        "type": "object",
        "properties": {
          "config_status": {
            "$ref": "#/components/schemas/StorageConfigStatus"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          }
        },
        "description": "A schema for checking configuration status of storage config."
      },
      "StorageDestination": {
        "title": "StorageDestination",
        "required": [
          "type",
          "details",
          "name"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/StorageType"
          },
          "details": {
            "title": "Details",
            "anyOf": [
              {
                "$ref": "#/components/schemas/StorageDetailsS3"
              },
              {
                "$ref": "#/components/schemas/StorageDetailsLocal"
              }
            ]
          },
          "format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResponseFormat"
              }
            ],
            "default": "json"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "key": {
            "title": "Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "Storage Destination Schema"
      },
      "StorageDestinationBase": {
        "title": "StorageDestinationBase",
        "required": [
          "type",
          "details"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/StorageType"
          },
          "details": {
            "title": "Details",
            "anyOf": [
              {
                "$ref": "#/components/schemas/StorageDetailsS3"
              },
              {
                "$ref": "#/components/schemas/StorageDetailsLocal"
              }
            ]
          },
          "format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResponseFormat"
              }
            ],
            "default": "json"
          }
        },
        "additionalProperties": false,
        "description": "Storage Destination Schema -- used for setting defaults"
      },
      "StorageDestinationResponse": {
        "title": "StorageDestinationResponse",
        "required": [
          "name",
          "type",
          "details",
          "key",
          "format"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/StorageType"
          },
          "details": {
            "title": "Details",
            "type": "object"
          },
          "key": {
            "title": "Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string"
          },
          "format": {
            "$ref": "#/components/schemas/ResponseFormat"
          },
          "is_default": {
            "title": "Is Default",
            "type": "boolean",
            "default": false
          }
        },
        "description": "Storage Destination Response Schema"
      },
      "StorageDetailsLocal": {
        "title": "StorageDetailsLocal",
        "type": "object",
        "properties": {
          "naming": {
            "title": "Naming",
            "type": "string",
            "default": "request_id"
          }
        },
        "additionalProperties": false,
        "description": "The details required to configurate local storage configuration"
      },
      "StorageDetailsS3": {
        "title": "StorageDetailsS3",
        "required": [
          "auth_method",
          "bucket"
        ],
        "type": "object",
        "properties": {
          "naming": {
            "title": "Naming",
            "type": "string",
            "default": "request_id"
          },
          "auth_method": {
            "$ref": "#/components/schemas/S3AuthMethod"
          },
          "bucket": {
            "title": "Bucket",
            "type": "string"
          },
          "max_retries": {
            "title": "Max Retries",
            "type": "integer",
            "default": 0
          }
        },
        "additionalProperties": false,
        "description": "The details required to represent an AWS S3 storage bucket."
      },
      "StorageSecretsS3Docs": {
        "title": "StorageSecretsS3Docs",
        "required": [
          "aws_access_key_id",
          "aws_secret_access_key"
        ],
        "type": "object",
        "properties": {
          "aws_access_key_id": {
            "title": "Aws Access Key Id",
            "type": "string"
          },
          "aws_secret_access_key": {
            "title": "Aws Secret Access Key",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "The secrets required to connect to S3, for documentation"
      },
      "StorageType": {
        "title": "StorageType",
        "enum": [
          "s3",
          "gcs",
          "transcend",
          "ethyca",
          "local"
        ],
        "description": "Enum for storage destination types"
      },
      "StorageTypeApiAccepted": {
        "title": "StorageTypeApiAccepted",
        "enum": [
          "s3",
          "local"
        ],
        "description": "Enum for storage destination types accepted in API updates"
      },
      "Strategy": {
        "title": "Strategy",
        "required": [
          "strategy",
          "configuration"
        ],
        "type": "object",
        "properties": {
          "strategy": {
            "title": "Strategy",
            "type": "string"
          },
          "configuration": {
            "title": "Configuration",
            "type": "object"
          }
        },
        "description": "General shape for swappable strategies (ex: auth, processors, pagination, etc.)"
      },
      "System": {
        "title": "System",
        "required": [
          "fides_key",
          "system_type",
          "privacy_declarations"
        ],
        "type": "object",
        "properties": {
          "fides_key": {
            "title": "Fides Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string",
            "description": "A unique key used to identify this resource."
          },
          "organization_fides_key": {
            "title": "Organization Fides Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string",
            "description": "Defines the Organization that this resource belongs to.",
            "default": "default_organization"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Human-Readable name for this resource."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A detailed description of what this resource is."
          },
          "registry_id": {
            "title": "Registry Id",
            "type": "integer",
            "description": "The id of the system registry, if used."
          },
          "meta": {
            "title": "Meta",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "An optional property to store any extra information for a system. Not used by fidesctl."
          },
          "fidesctl_meta": {
            "title": "Fidesctl Meta",
            "allOf": [
              {
                "$ref": "#/components/schemas/SystemMetadata"
              }
            ],
            "description": "\n    The SystemMetadata resource model.\n\n    Object used to hold application specific metadata for a system\n    "
          },
          "system_type": {
            "title": "System Type",
            "type": "string",
            "description": "A required value to describe the type of system being modeled, examples include: Service, Application, Third Party, etc."
          },
          "data_responsibility_title": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DataResponsibilityTitle"
              }
            ],
            "description": "\n    The model defining the responsibility or role over\n    the system that processes personal data.\n\n    Used to identify whether the organization is a\n    Controller, Processor, or Sub-Processor of the data\n    ",
            "default": "Controller"
          },
          "egress": {
            "title": "Egress",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataFlow"
            },
            "description": "The resources to which the System sends data."
          },
          "ingress": {
            "title": "Ingress",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataFlow"
            },
            "description": "The resources from which the System receives data."
          },
          "privacy_declarations": {
            "title": "Privacy Declarations",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrivacyDeclaration"
            },
            "description": "\n    The PrivacyDeclaration resource model.\n\n    States a function of a system, and describes how it relates\n    to the privacy data types.\n    "
          },
          "system_dependencies": {
            "title": "System Dependencies",
            "type": "array",
            "items": {
              "pattern": "^[a-zA-Z0-9_.<>-]+$",
              "type": "string"
            },
            "description": "A list of fides keys to model dependencies."
          },
          "joint_controller": {
            "title": "Joint Controller",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactDetails"
              }
            ],
            "description": "\n    The contact details information model.\n\n    Used to capture contact information for controllers, used\n    as part of exporting a data map / ROPA.\n\n    This model is nested under an Organization and\n    potentially under a system/dataset.\n    "
          },
          "third_country_transfers": {
            "title": "Third Country Transfers",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An optional array to identify any third countries where data is transited to. For consistency purposes, these fields are required to follow the Alpha-3 code set in ISO 3166-1."
          },
          "administrating_department": {
            "title": "Administrating Department",
            "type": "string",
            "description": "An optional value to identify the owning department or group of the system within your organization",
            "default": "Not defined"
          },
          "data_protection_impact_assessment": {
            "title": "Data Protection Impact Assessment",
            "allOf": [
              {
                "$ref": "#/components/schemas/DataProtectionImpactAssessment"
              }
            ],
            "description": "\n    The DataProtectionImpactAssessment (DPIA) resource model.\n\n    Contains information in regard to the data protection\n    impact assessment exported on a data map or Record of\n    Processing Activities (RoPA).\n\n    A legal requirement under GDPR for any project that\n    introduces a high risk to personal information.\n    ",
            "default": {
              "is_required": false
            }
          }
        },
        "description": "The System resource model.\n\nDescribes an application and includes a list of PrivacyDeclaration resources."
      },
      "SystemMetadata": {
        "title": "SystemMetadata",
        "type": "object",
        "properties": {
          "resource_id": {
            "title": "Resource Id",
            "type": "string",
            "description": "The external resource id for the system being modeled."
          },
          "endpoint_address": {
            "title": "Endpoint Address",
            "type": "string",
            "description": "The host of the external resource for the system being modeled."
          },
          "endpoint_port": {
            "title": "Endpoint Port",
            "type": "string",
            "description": "The port of the external resource for the system being modeled."
          }
        },
        "description": "The SystemMetadata resource model.\n\nObject used to hold application specific metadata for a system"
      },
      "SystemType": {
        "title": "SystemType",
        "enum": [
          "saas",
          "database",
          "manual",
          "email"
        ],
        "description": "An enumeration."
      },
      "TestMessagingStatusMessage": {
        "title": "TestMessagingStatusMessage",
        "required": [
          "msg"
        ],
        "type": "object",
        "properties": {
          "msg": {
            "title": "Msg",
            "type": "string"
          },
          "test_status": {
            "$ref": "#/components/schemas/MessagingConnectionTestStatus"
          },
          "failure_reason": {
            "title": "Failure Reason",
            "type": "string"
          }
        },
        "description": "A schema for testing functionality of a messaging config."
      },
      "TestStatus": {
        "title": "TestStatus",
        "enum": [
          "passed",
          "failed",
          "untested"
        ],
        "description": "An enumeration."
      },
      "TestStatusMessage": {
        "title": "TestStatusMessage",
        "required": [
          "msg"
        ],
        "type": "object",
        "properties": {
          "msg": {
            "title": "Msg",
            "type": "string"
          },
          "test_status": {
            "$ref": "#/components/schemas/ConnectionTestStatus"
          },
          "failure_reason": {
            "title": "Failure Reason",
            "type": "string"
          }
        },
        "description": "A schema for checking status."
      },
      "TimescaleDocsSchema": {
        "title": "TimescaleDocsSchema",
        "type": "object",
        "properties": {
          "url": {
            "title": "Url",
            "type": "string"
          },
          "username": {
            "title": "Username",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "dbname": {
            "title": "Dbname",
            "type": "string"
          },
          "db_schema": {
            "title": "Db Schema",
            "type": "string"
          },
          "host": {
            "title": "Host",
            "type": "string"
          },
          "port": {
            "title": "Port",
            "type": "integer"
          }
        },
        "additionalProperties": false,
        "description": "TimescaleDB Secrets Schema for API Docs"
      },
      "UserCreate": {
        "title": "UserCreate",
        "required": [
          "username",
          "password"
        ],
        "type": "object",
        "properties": {
          "username": {
            "title": "Username",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "first_name": {
            "title": "First Name",
            "type": "string"
          },
          "last_name": {
            "title": "Last Name",
            "type": "string"
          }
        },
        "description": "Data required to create a FidesUser."
      },
      "UserCreateResponse": {
        "title": "UserCreateResponse",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          }
        },
        "description": "Response after creating a FidesUser"
      },
      "UserForcePasswordReset": {
        "title": "UserForcePasswordReset",
        "required": [
          "new_password"
        ],
        "type": "object",
        "properties": {
          "new_password": {
            "title": "New Password",
            "type": "string"
          }
        },
        "description": "Only a new password, for the case where the user does not remember their password"
      },
      "UserLogin": {
        "title": "UserLogin",
        "required": [
          "username",
          "password"
        ],
        "type": "object",
        "properties": {
          "username": {
            "title": "Username",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          }
        },
        "description": "Similar to UserCreate except we do not need the extra validation on\nusername and password."
      },
      "UserLoginResponse": {
        "title": "UserLoginResponse",
        "required": [
          "user_data",
          "token_data"
        ],
        "type": "object",
        "properties": {
          "user_data": {
            "$ref": "#/components/schemas/UserResponse"
          },
          "token_data": {
            "$ref": "#/components/schemas/AccessToken"
          }
        },
        "description": "Similar to UserResponse except with an access token"
      },
      "UserPasswordReset": {
        "title": "UserPasswordReset",
        "required": [
          "old_password",
          "new_password"
        ],
        "type": "object",
        "properties": {
          "old_password": {
            "title": "Old Password",
            "type": "string"
          },
          "new_password": {
            "title": "New Password",
            "type": "string"
          }
        },
        "description": "Contains both old and new passwords when resetting a password"
      },
      "UserPermissionsCreate": {
        "title": "UserPermissionsCreate",
        "type": "object",
        "properties": {
          "scopes": {
            "title": "Scopes",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleRegistry"
            },
            "default": []
          }
        },
        "description": "Data required to create a FidesUserPermissions record\n\nUsers will generally be assigned role(s) directly which are associated with many scopes,\nbut we also will continue to support the ability to be assigned specific individual scopes."
      },
      "UserPermissionsEdit": {
        "title": "UserPermissionsEdit",
        "type": "object",
        "properties": {
          "scopes": {
            "title": "Scopes",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleRegistry"
            },
            "default": []
          },
          "id": {
            "title": "Id",
            "type": "string"
          }
        },
        "description": "Data required to edit a FidesUserPermissions record."
      },
      "UserPermissionsResponse": {
        "title": "UserPermissionsResponse",
        "required": [
          "id",
          "user_id"
        ],
        "type": "object",
        "properties": {
          "scopes": {
            "title": "Scopes",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleRegistry"
            },
            "default": []
          },
          "id": {
            "title": "Id",
            "type": "string"
          },
          "user_id": {
            "title": "User Id",
            "type": "string"
          }
        },
        "description": "Response after creating, editing, or retrieving a FidesUserPermissions record."
      },
      "UserResponse": {
        "title": "UserResponse",
        "required": [
          "id",
          "username",
          "created_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "username": {
            "title": "Username",
            "type": "string"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "first_name": {
            "title": "First Name",
            "type": "string"
          },
          "last_name": {
            "title": "Last Name",
            "type": "string"
          }
        },
        "description": "Response after requesting a User"
      },
      "UserUpdate": {
        "title": "UserUpdate",
        "type": "object",
        "properties": {
          "first_name": {
            "title": "First Name",
            "type": "string"
          },
          "last_name": {
            "title": "Last Name",
            "type": "string"
          }
        },
        "description": "Data required to update a FidesopsUser"
      },
      "ValidTargets": {
        "title": "ValidTargets",
        "enum": [
          "aws",
          "db",
          "okta",
          "bigquery"
        ],
        "type": "string",
        "description": "Validation of targets attempted to generate resources from"
      },
      "ValidateDatasetResponse": {
        "title": "ValidateDatasetResponse",
        "required": [
          "dataset",
          "traversal_details"
        ],
        "type": "object",
        "properties": {
          "dataset": {
            "$ref": "#/components/schemas/Dataset"
          },
          "traversal_details": {
            "$ref": "#/components/schemas/DatasetTraversalDetails"
          }
        },
        "description": "Response model for validating a dataset, which includes both the dataset\nitself (if valid) plus a details object describing if the dataset is\ntraversable or not."
      },
      "ValidateRequest": {
        "title": "ValidateRequest",
        "required": [
          "config",
          "target"
        ],
        "type": "object",
        "properties": {
          "config": {
            "title": "Config",
            "anyOf": [
              {
                "$ref": "#/components/schemas/AWSConfig"
              },
              {
                "$ref": "#/components/schemas/BigQueryConfig"
              },
              {
                "$ref": "#/components/schemas/OktaConfig"
              }
            ]
          },
          "target": {
            "$ref": "#/components/schemas/ValidationTarget"
          }
        },
        "description": "Validate endpoint request object"
      },
      "ValidateResponse": {
        "title": "ValidateResponse",
        "required": [
          "status",
          "message"
        ],
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/ValidationStatus"
          },
          "message": {
            "title": "Message",
            "type": "string"
          }
        },
        "description": "Validate endpoint response object"
      },
      "ValidateSaaSConfigResponse": {
        "title": "ValidateSaaSConfigResponse",
        "required": [
          "saas_config",
          "validation_details"
        ],
        "type": "object",
        "properties": {
          "saas_config": {
            "$ref": "#/components/schemas/SaaSConfig"
          },
          "validation_details": {
            "$ref": "#/components/schemas/SaaSConfigValidationDetails"
          }
        },
        "description": "Response model for validating a SaaS config, which includes both the SaaS config\nitself (if valid) plus a details object describing any validation errors."
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      },
      "ValidationStatus": {
        "title": "ValidationStatus",
        "enum": [
          "success",
          "failure"
        ],
        "type": "string",
        "description": "Validate endpoint response status"
      },
      "ValidationTarget": {
        "title": "ValidationTarget",
        "enum": [
          "aws",
          "okta",
          "bigquery"
        ],
        "type": "string",
        "description": "Allowed targets for the validate endpoint"
      },
      "VerificationCode": {
        "title": "VerificationCode",
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "title": "Code",
            "type": "string"
          }
        },
        "description": "Request Body for the user to supply their identity verification code"
      },
      "Violation": {
        "title": "Violation",
        "required": [
          "violating_attributes",
          "detail"
        ],
        "type": "object",
        "properties": {
          "violating_attributes": {
            "title": "Violating Attributes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ViolationAttributes"
              }
            ],
            "description": "The model for attributes which led to an evaluation violation"
          },
          "detail": {
            "title": "Detail",
            "type": "string",
            "description": "A human-readable string detailing the evaluation violation."
          }
        },
        "description": "The model for violations within an evaluation."
      },
      "ViolationAttributes": {
        "title": "ViolationAttributes",
        "required": [
          "data_categories",
          "data_subjects",
          "data_uses",
          "data_qualifier"
        ],
        "type": "object",
        "properties": {
          "data_categories": {
            "title": "Data Categories",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of data categories which led to an evaluation violation."
          },
          "data_subjects": {
            "title": "Data Subjects",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of data subjects which led to an evaluation violation."
          },
          "data_uses": {
            "title": "Data Uses",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of data uses which led to an evaluation violation."
          },
          "data_qualifier": {
            "title": "Data Qualifier",
            "type": "string",
            "description": "The data qualifier which led to an evaluation violation."
          }
        },
        "description": "The model for attributes which led to an evaluation violation"
      },
      "WebhookDirection": {
        "title": "WebhookDirection",
        "enum": [
          "one_way",
          "two_way"
        ],
        "description": "The webhook direction"
      },
      "WebhookOrder": {
        "title": "WebhookOrder",
        "required": [
          "key",
          "order"
        ],
        "type": "object",
        "properties": {
          "key": {
            "title": "Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string"
          },
          "order": {
            "title": "Order",
            "type": "integer"
          }
        },
        "description": "Schema for displaying a minimal amount of information about the webhook and its order"
      },
      "fides__api__ops__schemas__connection_configuration__connection_secrets_bigquery__KeyfileCreds": {
        "title": "KeyfileCreds",
        "required": [
          "project_id"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string"
          },
          "project_id": {
            "title": "Project Id",
            "type": "string"
          },
          "private_key_id": {
            "title": "Private Key Id",
            "type": "string"
          },
          "private_key": {
            "title": "Private Key",
            "type": "string"
          },
          "client_email": {
            "title": "Client Email",
            "type": "string"
          },
          "client_id": {
            "title": "Client Id",
            "type": "string"
          },
          "auth_uri": {
            "title": "Auth Uri",
            "type": "string"
          },
          "token_uri": {
            "title": "Token Uri",
            "type": "string"
          },
          "auth_provider_x509_cert_url": {
            "title": "Auth Provider X509 Cert Url",
            "type": "string"
          },
          "client_x509_cert_url": {
            "title": "Client X509 Cert Url",
            "type": "string"
          }
        },
        "description": "Schema that holds BigQuery keyfile key/vals"
      },
      "fides__api__ops__schemas__policy__Policy": {
        "title": "Policy",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "key": {
            "title": "Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string"
          },
          "drp_action": {
            "$ref": "#/components/schemas/DrpAction"
          },
          "execution_timeframe": {
            "title": "Execution Timeframe",
            "type": "integer"
          }
        },
        "description": "An external representation of a Fidesops Policy"
      },
      "fides__connectors__models__KeyfileCreds": {
        "title": "KeyfileCreds",
        "required": [
          "project_id"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string"
          },
          "project_id": {
            "title": "Project Id",
            "type": "string"
          },
          "private_key_id": {
            "title": "Private Key Id",
            "type": "string"
          },
          "private_key": {
            "title": "Private Key",
            "type": "string"
          },
          "client_email": {
            "title": "Client Email",
            "type": "string"
          },
          "client_id": {
            "title": "Client Id",
            "type": "string"
          },
          "auth_uri": {
            "title": "Auth Uri",
            "type": "string"
          },
          "token_uri": {
            "title": "Token Uri",
            "type": "string"
          },
          "auth_provider_x509_cert_url": {
            "title": "Auth Provider X509 Cert Url",
            "type": "string"
          },
          "client_x509_cert_url": {
            "title": "Client X509 Cert Url",
            "type": "string"
          }
        },
        "description": "The model for BigQuery credential keyfiles."
      },
      "fideslang__models__Policy": {
        "title": "Policy",
        "required": [
          "fides_key",
          "rules"
        ],
        "type": "object",
        "properties": {
          "fides_key": {
            "title": "Fides Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string",
            "description": "A unique key used to identify this resource."
          },
          "organization_fides_key": {
            "title": "Organization Fides Key",
            "pattern": "^[a-zA-Z0-9_.<>-]+$",
            "type": "string",
            "description": "Defines the Organization that this resource belongs to.",
            "default": "default_organization"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Human-Readable name for this resource."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A detailed description of what this resource is."
          },
          "rules": {
            "title": "Rules",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyRule"
            },
            "description": "\n    The PolicyRule resource model.\n\n    Describes the allowed combination of the various privacy data types.\n    "
          }
        },
        "description": "The Policy resource model.\n\nAn object used to organize a list of PolicyRules."
      }
    },
    "securitySchemes": {
      "OAuth2ClientCredentialsBearer": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "scopes": {},
            "tokenUrl": "/api/v1/oauth/token"
          }
        }
      }
    }
  }
}