"""This module defines the settings for everything related to the CLI."""
from typing import Optional

from fideslog.sdk.python.utils import FIDESCTL_CLI, generate_client_id
from pydantic import AnyHttpUrl, ConfigDict, Field, field_validator, model_validator

from .fides_settings import FidesSettings

# pylint: disable=C0115,C0116, E0213
ENV_PREFIX = "FIDES__CLI__"


def get_server_url(host: str, port: int, protocol: str) -> AnyHttpUrl:
    "Create the server_url."

    server_url = "{}://{}{}".format(
        protocol,
        host,
        f":{port}" if port else "",
    )

    return AnyHttpUrl(server_url)


class CLISettings(FidesSettings):
    """Configuration settings for the command-line application."""

    analytics_id: str = Field(
        default=generate_client_id(FIDESCTL_CLI),
        description="A fully anonymized unique identifier that is automatically generated by the application. Used for anonymous analytics when opted-in.",
    )
    local_mode: bool = Field(
        default=False,
        description="When set to True, disables functionality that requires making calls to a Fides webserver.",
    )
    server_protocol: str = Field(
        default="http", description="The protocol used by the Fides webserver."
    )
    server_host: str = Field(
        default="localhost", description="The hostname of the Fides webserver."
    )
    server_port: int = Field(
        default=8080, description="The port of the Fides webserver"
    )
    server_url: Optional[AnyHttpUrl] = Field(
        default=None,
        description="The full server url generated from the other server configuration values.",
        exclude=True,
    )

    @model_validator(mode="after")
    def validate_model(self) -> "CLISettings":
        """Do cross-field validation."""

        self.server_url = get_server_url(
            host=self.server_host,
            port=int(self.server_port),
            protocol=self.server_protocol,
        )

        return self

    @field_validator("analytics_id")
    def ensure_not_empty(cls, value: str) -> str:
        """
        Validate that the `analytics_id` is not `""`.
        """
        return value if value != "" else generate_client_id(FIDESCTL_CLI)

    model_config = ConfigDict(env_prefix=ENV_PREFIX)
