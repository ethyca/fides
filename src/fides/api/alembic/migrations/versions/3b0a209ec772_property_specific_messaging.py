"""property specific messaging

Revision ID: 3b0a209ec772
Revises: ad0109b041b3
Create Date: 2024-05-19 01:19:34.691319

"""
import random
import string
import uuid
from typing import Dict, Any

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
from fides.api.schemas.messaging.messaging import MessagingActionType
from sqlalchemy.exc import IntegrityError

from sqlalchemy import text
from sqlalchemy.engine import Connection, ResultProxy
from sqlalchemy.sql.elements import TextClause

revision = '3b0a209ec772'
down_revision = 'ad0109b041b3'
branch_labels = None
depends_on = None


DEFAULT_MESSAGING_TEMPLATES: Dict[str, Any] = {
    MessagingActionType.SUBJECT_IDENTITY_VERIFICATION.value: {
        "label": "Subject identity verification",
        "content": {
            "subject": "Your one-time code is {{code}}",
            "body": "Your privacy request verification code is {{code}}. Please return to the Privacy Center and enter the code to continue. This code will expire in {{minutes}} minutes.",
        },
    },
    MessagingActionType.PRIVACY_REQUEST_RECEIPT.value: {
        "label": "Privacy request received",
        "content": {
            "subject": "Your privacy request has been received",
            "body": "Your privacy request has been received. We will get back to you shortly.",
        },
    },
    MessagingActionType.PRIVACY_REQUEST_REVIEW_APPROVE.value: {
        "label": "Privacy request approved",
        "content": {
            "subject": "Your privacy request has been approved",
            "body": "Your privacy request has been approved and is currently processing.",
        },
    },
    MessagingActionType.PRIVACY_REQUEST_REVIEW_DENY.value: {
        "label": "Privacy request denied",
        "content": {
            "subject": "Your privacy request has been denied",
            "body": "Your privacy request has been denied. {{denial_reason}}.",
        },
    },
    MessagingActionType.PRIVACY_REQUEST_COMPLETE_ACCESS.value: {
        "label": "Access request completed",
        "content": {
            "subject": "Your data is ready to be downloaded",
            "body": "Your access request has been completed and can be downloaded at {{download_link}}. For security purposes, this secret link will expire in {{days}} days.",
        },
    },
    MessagingActionType.PRIVACY_REQUEST_COMPLETE_DELETION.value: {
        "label": "Erasure request completed",
        "content": {
            "subject": "Your data has been deleted",
            "body": "Your erasure request has been completed.",
        },
    },
}

def generate_record_id(prefix):
    return prefix + "_" + str(uuid.uuid4())


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    op.create_table('messaging_template_to_property',
    sa.Column('id', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('messaging_template_id', sa.String(), nullable=False),
    sa.Column('property_id', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['messaging_template_id'], ['messaging_template.id'], ),
    sa.ForeignKeyConstraint(['property_id'], ['plus_property.id'], ),
    sa.PrimaryKeyConstraint('id', 'messaging_template_id', 'property_id'),
    sa.UniqueConstraint('messaging_template_id', 'property_id', name='messaging_template_id_property_id')
    )
    op.create_index(op.f('ix_messaging_template_to_property_id'), 'messaging_template_to_property', ['id'], unique=False)
    op.create_index(op.f('ix_messaging_template_to_property_messaging_template_id'), 'messaging_template_to_property', ['messaging_template_id'], unique=False)
    op.create_index(op.f('ix_messaging_template_to_property_property_id'), 'messaging_template_to_property', ['property_id'], unique=False)
    op.alter_column('messaging_template', 'key', new_column_name='type')

    op.drop_index(op.f("ix_messaging_template_key"), table_name="messaging_template")
    op.create_index(
        op.f("ix_messaging_template_key"), "messaging_template", ["key"], unique=False
    )
    op.drop_index(op.f("ix_messaging_template_key"), table_name="messaging_template")
    op.add_column('messaging_template', sa.Column('is_enabled', sa.Boolean(), nullable=False))
    op.add_column('plus_property', sa.Column('is_default', sa.Boolean(), server_default='f', nullable=True))
    op.create_index('only_one_default', 'plus_property', ['is_default'], unique=True, postgresql_where=sa.text('is_default'))


    bind: Connection = op.get_bind()

    # First, ensure we have exactly 1 default property in the DB
    existing_properties: ResultProxy = bind.execute(
        text("select id from plus_property;")
    )
    # todo- what's the right way to get count of rows that's performant?
    if len(existing_properties.all()) == 1:
        # If exactly one property exists, assume this is the "default"
        default_property_id = existing_properties.first()["id"]
        update_property_query: TextClause = text(
            "UPDATE plus_property SET is_default= TRUE WHERE id= :id"
        )
        bind.execute(
            update_property_query,
            {"id": existing_properties.first()["id"]},
        )
    else:
        # Create new property, label as default
        insert_into_property_query: TextClause = text(
            "INSERT INTO plus_property (id, name, key, is_default, type)"
            "VALUES (:id, :name, :key, :is_default, :type)"
        )
        characters = string.ascii_uppercase + string.digits
        # fixme- does this need the plu_ prefix?
        new_property_id: str = "plu_FDS-" + "".join(random.choices(characters, k=6))
        default_property_id = new_property_id

        new_property: Dict[str, Any] = {
            "id": new_property_id,
            "name": "Default Property",
            "key": "default_property",
            "is_default": True,
        }
        try:
            bind.execute(
                insert_into_property_query,
                new_property
            )
        except IntegrityError as exc:
            raise Exception(
                f"Fides attempted to create a new default property but got error: {exc}. "
                f"Adjust keys in property table to not conflict."
            )

    # Next we ensure all default templates are saved to the DB
    existing_templates: ResultProxy = bind.execute(
        text("select id, type from messaging_template;")
    )
    templates_from_db = [
        template.type for template in existing_templates.all()
    ]
    for template_type, template in DEFAULT_MESSAGING_TEMPLATES.items():
        # if a template is not already in the DB, save it with defaults
        if template_type not in templates_from_db:
            insert_into_messaging_template_query: TextClause = text(
                "INSERT INTO messaging_template (id, type, content, is_enabled)"
                "VALUES (:id, :type, :content, :is_enabled)"
            )
            new_messaging_template: Dict[str, Any] = {
                "id": generate_record_id("mes"),
                "type": template_type,
                "content": template["content"],
                "is_enabled": False,
            }
            try:
                bind.execute(
                    insert_into_messaging_template_query,
                    new_messaging_template
                )
            except IntegrityError as exc:
                raise Exception(
                    f"Fides attempted to create a new messaging_template but got error: {exc}. "
                )

    # Last, ensure all saved messaging templates are linked to the default property
    updated_templates: ResultProxy = bind.execute(
        text("select id, type from messaging_template;")
    )
    for template in updated_templates:
        insert_into_messaging_template_to_property_query: TextClause = text(
            "INSERT INTO messaging_template_to_property (id, messaging_template_id, property_id)"
            "VALUES (:id, :messaging_template_id, :property_id)"
        )
        new_messaging_template_to_property: Dict[str, Any] = {
            "id": generate_record_id("mes"),
            "messaging_template_id": template["id"],
            "property_id": default_property_id,
        }
        bind.execute(
            insert_into_messaging_template_to_property_query,
            new_messaging_template_to_property
        )


    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('only_one_default', table_name='plus_property', postgresql_where=sa.text('is_default'))
    op.drop_column('plus_property', 'is_default')
    op.drop_index(op.f('ix_messaging_template_type'), table_name='messaging_template')
    op.alter_column('messaging_template', 'type', new_column_name='key')
    op.drop_index(op.f("ix_messaging_template_key"), table_name="messaging_template")
    op.create_index(
        op.f("ix_messaging_template_key"), "messaging_template", ["key"], unique=True
    )
    op.drop_column('messaging_template', 'is_enabled')
    op.drop_index(op.f('ix_messaging_template_to_property_property_id'), table_name='messaging_template_to_property')
    op.drop_index(op.f('ix_messaging_template_to_property_messaging_template_id'), table_name='messaging_template_to_property')
    op.drop_index(op.f('ix_messaging_template_to_property_id'), table_name='messaging_template_to_property')
    op.drop_table('messaging_template_to_property')
    # ### end Alembic commands ###
